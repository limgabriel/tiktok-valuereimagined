import { useState, useCallback } from 'react'
import './App.css'

interface AnalysisResult {
  sentiment: string
  ai_ratio: string
  engagement_score?: string
}

export function App() {
  const [videoUrl, setVideoUrl] = useState('')
  const [result, setResult] = useState<AnalysisResult | null>(null)
  const [loading, setLoading] = useState(false)

  // Info popups
  const [showInfo, setShowInfo] = useState<{ [key: string]: boolean }>({})

  const toggleInfo = (key: string) => {
    setShowInfo((prev) => ({ ...prev, [key]: !prev[key] }))
  }

  const onAnalyze = useCallback(async () => {
    if (!videoUrl.trim()) return alert('Please enter a TikTok URL')
    setLoading(true)
    setResult(null)

    try {
      // const res = await fetch('http://localhost:5000/creator_value_score', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ videoUrl }),
      // })
      // const data = await res.json()

      // fallback
      const data: AnalysisResult = {
        sentiment: "Positive",
        ai_ratio: "35%",
        engagement_score: "0.8"
      }
      setResult(data)
    } catch (err) {
      console.error(err)
      alert('Failed to fetch analysis')
    } finally {
      setLoading(false)
    }
  }, [videoUrl])

  return (
    <div className="App">
      <h1 className="Title">What's the Value of this TikTok?</h1>

      <div className="FormGroup">
        {/* <label htmlFor="videoUrl" className="Label">
          Video URL
        </label> */}
        <input
          id="videoUrl"
          type="text"
          placeholder="Enter TikTok video URL"
          value={videoUrl}
          onChange={(e) => setVideoUrl(e.target.value)}
          className="Input"
        />
      </div>

      <button
        onClick={onAnalyze}
        className="AnalyzeButton"
        disabled={loading}
        aria-busy={loading}
      >
        {loading ? 'Analyzing…' : 'Analyze'}
      </button>

     

      {result && (
        <div className="ResultCard">
          {/* Main Value Score */}
          <div className="CompositeScore">
            <span className="Label">Value Score</span>
            <button className="InfoButton" onClick={() => toggleInfo('composite_score')}>i</button>
            <div className="ScoreNumber">{result.engagement_score}</div>
            {showInfo['composite_score'] && (
              <div className="InfoBox">
                 Value Score is a rough measure of audience interaction, based on comment volume and other metrics.
              </div>
            )}
          </div>

          {/* Child metrics */}
          <div className="ChildMetrics">
            <div className="ChildMetric">
              <span className="Label">Community Vibe</span>
              <button className="InfoButton" onClick={() => toggleInfo('community')}>i</button>
              <div className="ChildValue">
                {result.sentiment} <br/>
              </div>
              {showInfo['community'] && (
                <div className="InfoBox">
                  Community Vibe measures the overall sentiment and engagement of the audience.
                </div>
              )}
            </div>

            <div className="ChildMetric">
              <span className="Label">AIGC Percentage</span>
              <button className="InfoButton" onClick={() => toggleInfo('ai_ratio')}>i</button>
              <div className="ChildValue">{result.ai_ratio}</div>
              {showInfo['ai_ratio'] && (
                <div className="InfoBox">
                AIGC Percentage estimates how much of the video’s content is likely generated by AI tools.
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
