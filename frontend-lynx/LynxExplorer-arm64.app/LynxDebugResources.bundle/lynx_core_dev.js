/** build time: Mon, 25 Aug 2025 06:46:36 GMT, commit: ad973fcbe989fb72d0caeb85984eaa7d2105388e */
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true,
  configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports,
    mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(
          from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(
  mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod,
    enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/global.js
  var require_global = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/globa\
l.js"(exports, module2) {
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module2.exports = // eslint-disable-next-line no-undef
      check(typeof globalThis == "object" && globalThis) || check(typeof window ==
      "object" && window) || check(typeof self == "object" && self) || check(typeof global ==
      "object" && global) || // eslint-disable-next-line no-new-func
      Function("return this")();
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/fails.js
  var require_fails = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/fails\
.js"(exports, module2) {
      module2.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/descriptors.js
  var require_descriptors = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/descr\
iptors.js"(exports, module2) {
      var fails = require_fails();
      module2.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-property-is-enumerable.js"(exports) {
      "use strict";
      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.
      call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : nativePropertyIsEnumerable;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/creat\
e-property-descriptor.js"(exports, module2) {
      module2.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/class\
of-raw.js"(exports, module2) {
      var toString = {}.toString;
      module2.exports = function(it) {
        return toString.call(it).slice(8, -1);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/index\
ed-object.js"(exports, module2) {
      var fails = require_fails();
      var classof = require_classof_raw();
      var split = "".split;
      module2.exports = fails(function() {
        return !Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split.call(it, "") : Object(it);
      } : Object;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/requi\
re-object-coercible.js"(exports, module2) {
      module2.exports = function(it) {
        if (it == void 0)
          throw TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-in\
dexed-object.js"(exports, module2) {
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module2.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-object.js
  var require_is_object = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-ob\
ject.js"(exports, module2) {
      module2.exports = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-primitive.js
  var require_to_primitive = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-pr\
imitive.js"(exports, module2) {
      var isObject2 = require_is_object();
      module2.exports = function(input, PREFERRED_STRING) {
        if (!isObject2(input))
          return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject2(
        val = fn.call(input)))
          return val;
        if (typeof (fn = input.valueOf) == "function" && !isObject2(val = fn.call(
        input)))
          return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject2(
        val = fn.call(input)))
          return val;
        throw TypeError("Can't convert object to primitive value");
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/has.js
  var require_has = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/has.j\
s"(exports, module2) {
      var hasOwnProperty = {}.hasOwnProperty;
      module2.exports = function(it, key) {
        return hasOwnProperty.call(it, key);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/docum\
ent-create-element.js"(exports, module2) {
      var global2 = require_global();
      var isObject2 = require_is_object();
      var document2 = global2.document;
      var EXISTS = isObject2(document2) && isObject2(document2.createElement);
      module2.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/ie8-d\
om-define.js"(exports, module2) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var createElement = require_document_create_element();
      module2.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-get-own-property-descriptor.js"(exports) {
      var DESCRIPTORS = require_descriptors();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPrimitive = require_to_primitive();
      var has = require_has();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE)
          try {
            return nativeGetOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (has(O, P))
          return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P),
          O[P]);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/an-object.js
  var require_an_object = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/an-ob\
ject.js"(exports, module2) {
      var isObject2 = require_is_object();
      module2.exports = function(it) {
        if (!isObject2(it)) {
          throw TypeError(String(it) + " is not an object");
        }
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-define-property.js"(exports) {
      var DESCRIPTORS = require_descriptors();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var anObject = require_an_object();
      var toPrimitive = require_to_primitive();
      var nativeDefineProperty = Object.defineProperty;
      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return nativeDefineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw TypeError("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/creat\
e-non-enumerable-property.js"(exports, module2) {
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module2.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-global.js
  var require_set_global = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-g\
lobal.js"(exports, module2) {
      var global2 = require_global();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      module2.exports = function(key, value) {
        try {
          createNonEnumerableProperty(global2, key, value);
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/shared-store.js
  var require_shared_store = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/share\
d-store.js"(exports, module2) {
      var global2 = require_global();
      var setGlobal = require_set_global();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || setGlobal(SHARED, {});
      module2.exports = store;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inspe\
ct-source.js"(exports, module2) {
      var store = require_shared_store();
      var functionToString = Function.toString;
      if (typeof store.inspectSource != "function") {
        store.inspectSource = function(it) {
          return functionToString.call(it);
        };
      }
      module2.exports = store.inspectSource;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/native-weak-map.js
  var require_native_weak_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/nativ\
e-weak-map.js"(exports, module2) {
      var global2 = require_global();
      var inspectSource = require_inspect_source();
      var WeakMap = global2.WeakMap;
      module2.exports = typeof WeakMap === "function" && /native code/.test(inspectSource(
      WeakMap));
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-pure.js
  var require_is_pure = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-pu\
re.js"(exports, module2) {
      module2.exports = false;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/shared.js
  var require_shared = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/share\
d.js"(exports, module2) {
      var IS_PURE = require_is_pure();
      var store = require_shared_store();
      (module2.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.6.4",
        mode: IS_PURE ? "pure" : "global",
        copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/uid.js
  var require_uid = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/uid.j\
s"(exports, module2) {
      var id = 0;
      var postfix = Math.random();
      module2.exports = function(key) {
        return "Symbol(" + String(key === void 0 ? "" : key) + ")_" + (++id + postfix).
        toString(36);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/shared-key.js
  var require_shared_key = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/share\
d-key.js"(exports, module2) {
      var shared = require_shared();
      var uid = require_uid();
      var keys = shared("keys");
      module2.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/hidde\
n-keys.js"(exports, module2) {
      module2.exports = {};
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/internal-state.js
  var require_internal_state = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inter\
nal-state.js"(exports, module2) {
      var NATIVE_WEAK_MAP = require_native_weak_map();
      var global2 = require_global();
      var isObject2 = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var objectHas = require_has();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var WeakMap = global2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject2(it) || (state = get(it)).type !== TYPE) {
            throw TypeError("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP) {
        store = new WeakMap();
        wmget = store.get;
        wmhas = store.has;
        wmset = store.set;
        set = function(it, metadata) {
          wmset.call(store, it, metadata);
          return metadata;
        };
        get = function(it) {
          return wmget.call(store, it) || {};
        };
        has = function(it) {
          return wmhas.call(store, it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return objectHas(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return objectHas(it, STATE);
        };
      }
      var store;
      var wmget;
      var wmhas;
      var wmset;
      var STATE;
      module2.exports = {
        set,
        get,
        has,
        enforce,
        getterFor
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/redefine.js
  var require_redefine = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/redef\
ine.js"(exports, module2) {
      var global2 = require_global();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var has = require_has();
      var setGlobal = require_set_global();
      var inspectSource = require_inspect_source();
      var InternalStateModule = require_internal_state();
      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(String).split("String");
      (module2.exports = function(O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;
        if (typeof value == "function") {
          if (typeof key == "string" && !has(value, "name"))
            createNonEnumerableProperty(value, "name", key);
          enforceInternalState(value).source = TEMPLATE.join(typeof key == "stri\
ng" ? key : "");
        }
        if (O === global2) {
          if (simple)
            O[key] = value;
          else
            setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }
        if (simple)
          O[key] = value;
        else
          createNonEnumerableProperty(O, key, value);
      })(Function.prototype, "toString", function toString() {
        return typeof this == "function" && getInternalState(this).source || inspectSource(
        this);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/path.js
  var require_path = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/path.\
js"(exports, module2) {
      var global2 = require_global();
      module2.exports = global2;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/get-b\
uilt-in.js"(exports, module2) {
      var path2 = require_path();
      var global2 = require_global();
      var aFunction = function(variable) {
        return typeof variable == "function" ? variable : void 0;
      };
      module2.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(path2[namespace]) || aFunction(global2[namespace]) :
        path2[namespace] && path2[namespace][method] || global2[namespace] && global2[namespace][method];
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-integer.js
  var require_to_integer = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-in\
teger.js"(exports, module2) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      module2.exports = function(argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-length.js
  var require_to_length = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-le\
ngth.js"(exports, module2) {
      var toInteger = require_to_integer();
      var min = Math.min;
      module2.exports = function(argument) {
        return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-ab\
solute-index.js"(exports, module2) {
      var toInteger = require_to_integer();
      var max = Math.max;
      var min = Math.min;
      module2.exports = function(index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-includes.js
  var require_array_includes = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-includes.js"(exports, module2) {
      var toIndexedObject = require_to_indexed_object();
      var toLength = require_to_length();
      var toAbsoluteIndex = require_to_absolute_index();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module2.exports = {
        // `Array.prototype.includes` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-keys-internal.js"(exports, module2) {
      var has = require_has();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes().indexOf;
      var hiddenKeys = require_hidden_keys();
      module2.exports = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !has(hiddenKeys, key) && has(O, key) && result.push(key);
        while (names.length > i)
          if (has(O, key = names[i++])) {
            ~indexOf(result, key) || result.push(key);
          }
        return result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/enum-\
bug-keys.js"(exports, module2) {
      module2.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-get-own-property-names.js"(exports) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-get-own-property-symbols.js"(exports) {
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/own-keys.js
  var require_own_keys = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/own-k\
eys.js"(exports, module2) {
      var getBuiltIn = require_get_built_in();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var anObject = require_an_object();
      module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/copy-constructor-properties.js
  var require_copy_constructor_properties = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/copy-\
constructor-properties.js"(exports, module2) {
      var has = require_has();
      var ownKeys = require_own_keys();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      module2.exports = function(target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!has(target, key))
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-forced.js
  var require_is_forced = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-fo\
rced.js"(exports, module2) {
      var fails = require_fails();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection ==
        "function" ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module2.exports = isForced;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/export.js
  var require_export = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/expor\
t.js"(exports, module2) {
      var global2 = require_global();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().
      f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var setGlobal = require_set_global();
      var copyConstructorProperties = require_copy_constructor_properties();
      var isForced = require_is_forced();
      module2.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = global2;
        } else if (STATIC) {
          target = global2[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global2[TARGET] || {}).prototype;
        }
        if (target)
          for (key in source) {
            sourceProperty = source[key];
            if (options.noTargetGet) {
              descriptor = getOwnPropertyDescriptor(target, key);
              targetProperty = descriptor && descriptor.value;
            } else
              targetProperty = target[key];
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key,
            options.forced);
            if (!FORCED && targetProperty !== void 0) {
              if (typeof sourceProperty === typeof targetProperty)
                continue;
              copyConstructorProperties(sourceProperty, targetProperty);
            }
            if (options.sham || targetProperty && targetProperty.sham) {
              createNonEnumerableProperty(sourceProperty, "sham", true);
            }
            redefine(target, key, sourceProperty, options);
          }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/native-symbol.js
  var require_native_symbol = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/nativ\
e-symbol.js"(exports, module2) {
      var fails = require_fails();
      module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        return !String(Symbol());
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/use-s\
ymbol-as-uid.js"(exports, module2) {
      var NATIVE_SYMBOL = require_native_symbol();
      module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator ==
      "symbol";
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-array.js
  var require_is_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-ar\
ray.js"(exports, module2) {
      var classof = require_classof_raw();
      module2.exports = Array.isArray || function isArray(arg) {
        return classof(arg) == "Array";
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-object.js
  var require_to_object = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-ob\
ject.js"(exports, module2) {
      var requireObjectCoercible = require_require_object_coercible();
      module2.exports = function(argument) {
        return Object(requireObjectCoercible(argument));
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-keys.js
  var require_object_keys = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-keys.js"(exports, module2) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module2.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-define-properties.js"(exports, module2) {
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object();
      var objectKeys = require_object_keys();
      module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], Properties[key]);
        return O;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/html.js
  var require_html = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/html.\
js"(exports, module2) {
      var getBuiltIn = require_get_built_in();
      module2.exports = getBuiltIn("document", "documentElement");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-create.js
  var require_object_create = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-create.js"(exports, module2) {
      var anObject = require_an_object();
      var defineProperties = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = require_hidden_keys();
      var html = require_html();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = document.domain && new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) :
        NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module2.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : defineProperties(result, Properties);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-get-own-property-names-external.js
  var require_object_get_own_property_names_external = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-get-own-property-names-external.js"(exports, module2) {
      var toIndexedObject = require_to_indexed_object();
      var nativeGetOwnPropertyNames = require_object_get_own_property_names().f;
      var toString = {}.toString;
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ?
      Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return nativeGetOwnPropertyNames(it);
        } catch (error) {
          return windowNames.slice();
        }
      };
      module2.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(
        it) : nativeGetOwnPropertyNames(toIndexedObject(it));
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/well-\
known-symbol.js"(exports, module2) {
      var global2 = require_global();
      var shared = require_shared();
      var has = require_has();
      var uid = require_uid();
      var NATIVE_SYMBOL = require_native_symbol();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.
      withoutSetter || uid;
      module2.exports = function(name) {
        if (!has(WellKnownSymbolsStore, name)) {
          if (NATIVE_SYMBOL && has(Symbol2, name))
            WellKnownSymbolsStore[name] = Symbol2[name];
          else
            WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/well-known-symbol-wrapped.js
  var require_well_known_symbol_wrapped = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/well-\
known-symbol-wrapped.js"(exports) {
      var wellKnownSymbol = require_well_known_symbol();
      exports.f = wellKnownSymbol;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/define-well-known-symbol.js
  var require_define_well_known_symbol = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/defin\
e-well-known-symbol.js"(exports, module2) {
      var path2 = require_path();
      var has = require_has();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineProperty = require_object_define_property().f;
      module2.exports = function(NAME) {
        var Symbol2 = path2.Symbol || (path2.Symbol = {});
        if (!has(Symbol2, NAME))
          defineProperty(Symbol2, NAME, {
            value: wrappedWellKnownSymbolModule.f(NAME)
          });
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-to-string-tag.js
  var require_set_to_string_tag = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-t\
o-string-tag.js"(exports, module2) {
      var defineProperty = require_object_define_property().f;
      var has = require_has();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      module2.exports = function(it, TAG, STATIC) {
        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
          defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/a-function.js
  var require_a_function = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/a-fun\
ction.js"(exports, module2) {
      module2.exports = function(it) {
        if (typeof it != "function") {
          throw TypeError(String(it) + " is not a function");
        }
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/funct\
ion-bind-context.js"(exports, module2) {
      var aFunction = require_a_function();
      module2.exports = function(fn, that2, length) {
        aFunction(fn);
        if (that2 === void 0)
          return fn;
        switch (length) {
          case 0:
            return function() {
              return fn.call(that2);
            };
          case 1:
            return function(a) {
              return fn.call(that2, a);
            };
          case 2:
            return function(a, b) {
              return fn.call(that2, a, b);
            };
          case 3:
            return function(a, b, c) {
              return fn.call(that2, a, b, c);
            };
        }
        return function() {
          return fn.apply(that2, arguments);
        };
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-species-create.js"(exports, module2) {
      var isObject2 = require_is_object();
      var isArray = require_is_array();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      module2.exports = function(originalArray, length) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (typeof C == "function" && (C === Array || isArray(C.prototype)))
            C = void 0;
          else if (isObject2(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return new (C === void 0 ? Array : C)(length === 0 ? 0 : length);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-iteration.js
  var require_array_iteration = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-iteration.js"(exports, module2) {
      var bind = require_function_bind_context();
      var IndexedObject = require_indexed_object();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var arraySpeciesCreate = require_array_species_create();
      var push = [].push;
      var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that2, specificCreate) {
          var O = toObject($this);
          var self2 = IndexedObject(O);
          var boundFunction = bind(callbackfn, that2, 3);
          var length = toLength(self2.length);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this,
          0) : void 0;
          var value, result;
          for (; length > index; index++)
            if (NO_HOLES || index in self2) {
              value = self2[index];
              result = boundFunction(value, index, O);
              if (TYPE) {
                if (IS_MAP)
                  target[index] = result;
                else if (result)
                  switch (TYPE) {
                    case 3:
                      return true;
                    case 5:
                      return value;
                    case 6:
                      return index;
                    case 2:
                      push.call(target, value);
                  }
                else if (IS_EVERY)
                  return false;
              }
            }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      module2.exports = {
        // `Array.prototype.forEach` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.js
  var require_es_symbol = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.js"() {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors();
      var NATIVE_SYMBOL = require_native_symbol();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var fails = require_fails();
      var has = require_has();
      var isArray = require_is_array();
      var isObject2 = require_is_object();
      var anObject = require_an_object();
      var toObject = require_to_object();
      var toIndexedObject = require_to_indexed_object();
      var toPrimitive = require_to_primitive();
      var createPropertyDescriptor = require_create_property_descriptor();
      var nativeObjectCreate = require_object_create();
      var objectKeys = require_object_keys();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var shared = require_shared();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var uid = require_uid();
      var wellKnownSymbol = require_well_known_symbol();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      var setToStringTag = require_set_to_string_tag();
      var InternalStateModule = require_internal_state();
      var $forEach = require_array_iteration().forEach;
      var HIDDEN = sharedKey("hidden");
      var SYMBOL = "Symbol";
      var PROTOTYPE = "prototype";
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global2.Symbol;
      var $stringify = getBuiltIn("JSON", "stringify");
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var AllSymbols = shared("symbols");
      var ObjectPrototypeSymbols = shared("op-symbols");
      var StringToSymbolRegistry = shared("string-to-symbol-registry");
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      var WellKnownSymbolsStore = shared("wks");
      var QObject = global2.QObject;
      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDescriptor = DESCRIPTORS && fails(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
          get: function() {
            return nativeDefineProperty(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype,
        P);
        if (ObjectPrototypeDescriptor)
          delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;
      var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
          type: SYMBOL,
          tag,
          description
        });
        if (!DESCRIPTORS)
          symbol.description = description;
        return symbol;
      };
      var isSymbol = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        return Object(it) instanceof $Symbol;
      };
      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype)
          $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);
        if (has(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!has(O, HIDDEN))
              nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (has(O, HIDDEN) && O[HIDDEN][key])
              O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(
            0, false) });
          }
          return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
      };
      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
          if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
            $defineProperty(O, key, properties[key]);
        });
        return O;
      };
      var $create = function create(O, Properties) {
        return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(
        nativeObjectCreate(O), Properties);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols,
        P))
          return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) &&
        this[HIDDEN][P] ? enumerable : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols,
        key))
          return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }
        return descriptor;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (!has(AllSymbols, key) && !has(hiddenKeys, key))
            result.push(key);
        });
        return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols :
        toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype,
          key))) {
            result.push(AllSymbols[key]);
          }
        });
        return result;
      };
      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol2() {
          if (this instanceof $Symbol)
            throw TypeError("Symbol is not a constructor");
          var description = !arguments.length || arguments[0] === void 0 ? void 0 :
          String(arguments[0]);
          var tag = uid(description);
          var setter = function(value) {
            if (this === ObjectPrototype)
              setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };
          if (DESCRIPTORS && USE_SETTER)
            setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
          return wrap(tag, description);
        };
        redefine($Symbol[PROTOTYPE], "toString", function toString() {
          return getInternalState(this).tag;
        });
        redefine($Symbol, "withoutSetter", function(description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
          return wrap(wellKnownSymbol(name), name);
        };
        if (DESCRIPTORS) {
          nativeDefineProperty($Symbol[PROTOTYPE], "description", {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });
          if (!IS_PURE) {
            redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable,
            { unsafe: true });
          }
        }
      }
      $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL },
      {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol(name);
      });
      $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
        // `Symbol.for` method
        // https://tc39.github.io/ecma262/#sec-symbol.for
        "for": function(key) {
          var string = String(key);
          if (has(StringToSymbolRegistry, string))
            return StringToSymbolRegistry[string];
          var symbol = $Symbol(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError(sym + " is not a symbol");
          if (has(SymbolToStringRegistry, sym))
            return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
          USE_SETTER = true;
        },
        useSimple: function() {
          USE_SETTER = false;
        }
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS },
      {
        // `Object.create` method
        // https://tc39.github.io/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.github.io/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
      });
      $({ target: "Object", stat: true, forced: fails(function() {
        getOwnPropertySymbolsModule.f(1);
      }) }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        }
      });
      if ($stringify) {
        FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
          var symbol = $Symbol();
          return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) !=
          "{}" || $stringify(Object(symbol)) != "{}";
        });
        $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
          // eslint-disable-next-line no-unused-vars
          stringify: function stringify(it, replacer, space) {
            var args = [it];
            var index = 1;
            var $replacer;
            while (arguments.length > index)
              args.push(arguments[index++]);
            $replacer = replacer;
            if (!isObject2(replacer) && it === void 0 || isSymbol(it))
              return;
            if (!isArray(replacer))
              replacer = function(key, value) {
                if (typeof $replacer == "function")
                  value = $replacer.call(this, key, value);
                if (!isSymbol(value))
                  return value;
              };
            args[1] = replacer;
            return $stringify.apply(null, args);
          }
        });
      }
      var FORCED_JSON_STRINGIFY;
      if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].
        valueOf);
      }
      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.description.js
  var require_es_symbol_description = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.description.js"() {
      "use strict";
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var has = require_has();
      var isObject2 = require_is_object();
      var defineProperty = require_object_define_property().f;
      var copyConstructorProperties = require_copy_constructor_properties();
      var NativeSymbol = global2.Symbol;
      if (DESCRIPTORS && typeof NativeSymbol == "function" && (!("description" in
      NativeSymbol.prototype) || // Safari 12 bug
      NativeSymbol().description !== void 0)) {
        EmptyStringDescriptionStore = {};
        SymbolWrapper = function Symbol2() {
          var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 :
          String(arguments[0]);
          var result = this instanceof SymbolWrapper ? new NativeSymbol(description) :
          description === void 0 ? NativeSymbol() : NativeSymbol(description);
          if (description === "")
            EmptyStringDescriptionStore[result] = true;
          return result;
        };
        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;
        symbolToString = symbolPrototype.toString;
        native = String(NativeSymbol("test")) == "Symbol(test)";
        regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty(symbolPrototype, "description", {
          configurable: true,
          get: function description() {
            var symbol = isObject2(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol))
              return "";
            var desc = native ? string.slice(7, -1) : string.replace(regexp, "$1");
            return desc === "" ? void 0 : desc;
          }
        });
        $({ global: true, forced: true }, {
          Symbol: SymbolWrapper
        });
      }
      var EmptyStringDescriptionStore;
      var SymbolWrapper;
      var symbolPrototype;
      var symbolToString;
      var native;
      var regexp;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.async-iterator.js
  var require_es_symbol_async_iterator = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.async-iterator.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("asyncIterator");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.has-instance.js
  var require_es_symbol_has_instance = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.has-instance.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("hasInstance");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.is-concat-spreadable.js
  var require_es_symbol_is_concat_spreadable = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.is-concat-spreadable.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("isConcatSpreadable");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.match.js
  var require_es_symbol_match = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.match.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("match");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.match-all.js
  var require_es_symbol_match_all = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.match-all.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("matchAll");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.replace.js
  var require_es_symbol_replace = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.replace.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("replace");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.search.js
  var require_es_symbol_search = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.search.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("search");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.species.js
  var require_es_symbol_species = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.species.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("species");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.split.js
  var require_es_symbol_split = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.split.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("split");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.to-primitive.js
  var require_es_symbol_to_primitive = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.to-primitive.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("toPrimitive");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symbol.to-string-tag.js
  var require_es_symbol_to_string_tag = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.symb\
ol.to-string-tag.js"() {
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("toStringTag");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/create-property.js
  var require_create_property = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/creat\
e-property.js"(exports, module2) {
      "use strict";
      var toPrimitive = require_to_primitive();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module2.exports = function(object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object)
          definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0,
          value));
        else
          object[propertyKey] = value;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/engine-user-agent.js
  var require_engine_user_agent = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/engin\
e-user-agent.js"(exports, module2) {
      var getBuiltIn = require_get_built_in();
      module2.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/engine-v8-version.js
  var require_engine_v8_version = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/engin\
e-v8-version.js"(exports, module2) {
      var global2 = require_global();
      var userAgent = require_engine_user_agent();
      var process = global2.process;
      var versions = process && process.versions;
      var v8 = versions && versions.v8;
      var match;
      var version;
      if (v8) {
        match = v8.split(".");
        version = match[0] + match[1];
      } else if (userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version = match[1];
        }
      }
      module2.exports = version && +version;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-method-has-species-support.js
  var require_array_method_has_species_support = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-method-has-species-support.js"(exports, module2) {
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var SPECIES = wellKnownSymbol("species");
      module2.exports = function(METHOD_NAME) {
        return V8_VERSION >= 51 || !fails(function() {
          var array = [];
          var constructor = array.constructor = {};
          constructor[SPECIES] = function() {
            return { foo: 1 };
          };
          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.concat.js
  var require_es_array_concat = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.concat.js"() {
      "use strict";
      var $ = require_export();
      var fails = require_fails();
      var isArray = require_is_array();
      var isObject2 = require_is_object();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var createProperty = require_create_property();
      var arraySpeciesCreate = require_array_species_create();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
      var MAX_SAFE_INTEGER = 9007199254740991;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
      var isConcatSpreadable = function(O) {
        if (!isObject2(O))
          return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== void 0 ? !!spreadable : isArray(O);
      };
      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
      $({ target: "Array", proto: true, forced: FORCED }, {
        concat: function concat(arg) {
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;
          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
              len = toLength(E.length);
              if (n + len > MAX_SAFE_INTEGER)
                throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              for (k = 0; k < len; k++, n++)
                if (k in E)
                  createProperty(A, n, E[k]);
            } else {
              if (n >= MAX_SAFE_INTEGER)
                throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }
          A.length = n;
          return A;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-method-uses-to-length.js
  var require_array_method_uses_to_length = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-method-uses-to-length.js"(exports, module2) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var has = require_has();
      var defineProperty = Object.defineProperty;
      var cache = {};
      var thrower = function(it) {
        throw it;
      };
      module2.exports = function(METHOD_NAME, options) {
        if (has(cache, METHOD_NAME))
          return cache[METHOD_NAME];
        if (!options)
          options = {};
        var method = [][METHOD_NAME];
        var ACCESSORS = has(options, "ACCESSORS") ? options.ACCESSORS : false;
        var argument0 = has(options, 0) ? options[0] : thrower;
        var argument1 = has(options, 1) ? options[1] : void 0;
        return cache[METHOD_NAME] = !!method && !fails(function() {
          if (ACCESSORS && !DESCRIPTORS)
            return true;
          var O = { length: -1 };
          if (ACCESSORS)
            defineProperty(O, 1, { enumerable: true, get: thrower });
          else
            O[1] = 1;
          method.call(O, argument0, argument1);
        });
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.filter.js
  var require_es_array_filter = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.filter.js"() {
      "use strict";
      var $ = require_export();
      var $filter = require_array_iteration().filter;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
      var USES_TO_LENGTH = arrayMethodUsesToLength("filter");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH },
      {
        filter: function filter(callbackfn) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] :
          void 0);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/flatten-into-array.js
  var require_flatten_into_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/flatt\
en-into-array.js"(exports, module2) {
      "use strict";
      var isArray = require_is_array();
      var toLength = require_to_length();
      var bind = require_function_bind_context();
      var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
        var element;
        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) :
            source[sourceIndex];
            if (depth > 0 && isArray(element)) {
              targetIndex = flattenIntoArray(target, original, element, toLength(
              element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 9007199254740991)
                throw TypeError("Exceed the acceptable array length");
              target[targetIndex] = element;
            }
            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      };
      module2.exports = flattenIntoArray;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.flat.js
  var require_es_array_flat = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.flat.js"() {
      "use strict";
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var toInteger = require_to_integer();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flat: function flat() {
          var depthArg = arguments.length ? arguments[0] : void 0;
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === void 0 ?
          1 : toInteger(depthArg));
          return A;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.flat-map.js
  var require_es_array_flat_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.flat-map.js"() {
      "use strict";
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var aFunction = require_a_function();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flatMap: function flatMap(callbackfn) {
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A;
          aFunction(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.
          length > 1 ? arguments[1] : void 0);
          return A;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/add-t\
o-unscopables.js"(exports, module2) {
      var wellKnownSymbol = require_well_known_symbol();
      var create = require_object_create();
      var definePropertyModule = require_object_define_property();
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] == void 0) {
        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      }
      module2.exports = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.includes.js
  var require_es_array_includes = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.includes.js"() {
      "use strict";
      var $ = require_export();
      var $includes = require_array_includes().includes;
      var addToUnscopables = require_add_to_unscopables();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", { ACCESSORS: true,
      1: 0 });
      $({ target: "Array", proto: true, forced: !USES_TO_LENGTH }, {
        includes: function includes(el) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables("includes");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/iterators.js
  var require_iterators = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/itera\
tors.js"(exports, module2) {
      module2.exports = {};
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/correct-prototype-getter.js
  var require_correct_prototype_getter = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/corre\
ct-prototype-getter.js"(exports, module2) {
      var fails = require_fails();
      module2.exports = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-get-prototype-of.js
  var require_object_get_prototype_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-get-prototype-of.js"(exports, module2) {
      var has = require_has();
      var toObject = require_to_object();
      var sharedKey = require_shared_key();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var IE_PROTO = sharedKey("IE_PROTO");
      var ObjectPrototype = Object.prototype;
      module2.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
        O = toObject(O);
        if (has(O, IE_PROTO))
          return O[IE_PROTO];
        if (typeof O.constructor == "function" && O instanceof O.constructor) {
          return O.constructor.prototype;
        }
        return O instanceof Object ? ObjectPrototype : null;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/iterators-core.js
  var require_iterators_core = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/itera\
tors-core.js"(exports, module2) {
      "use strict";
      var getPrototypeOf = require_object_get_prototype_of();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var has = require_has();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var returnThis = function() {
        return this;
      };
      var IteratorPrototype;
      var PrototypeOfArrayIteratorPrototype;
      var arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator))
          BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      if (IteratorPrototype == void 0)
        IteratorPrototype = {};
      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
      }
      module2.exports = {
        IteratorPrototype,
        BUGGY_SAFARI_ITERATORS
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/create-iterator-constructor.js
  var require_create_iterator_constructor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/creat\
e-iterator-constructor.js"(exports, module2) {
      "use strict";
      var IteratorPrototype = require_iterators_core().IteratorPrototype;
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var setToStringTag = require_set_to_string_tag();
      var Iterators = require_iterators();
      var returnThis = function() {
        return this;
      };
      module2.exports = function(IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(
        1, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/a-possible-prototype.js
  var require_a_possible_prototype = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/a-pos\
sible-prototype.js"(exports, module2) {
      var isObject2 = require_is_object();
      module2.exports = function(it) {
        if (!isObject2(it) && it !== null) {
          throw TypeError("Can't set " + String(it) + " as a prototype");
        }
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-set-prototype-of.js
  var require_object_set_prototype_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-set-prototype-of.js"(exports, module2) {
      var anObject = require_an_object();
      var aPossiblePrototype = require_a_possible_prototype();
      module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
          setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").
          set;
          setter.call(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER)
            setter.call(O, proto);
          else
            O.__proto__ = proto;
          return O;
        };
      }() : void 0);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/define-iterator.js
  var require_define_iterator = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/defin\
e-iterator.js"(exports, module2) {
      "use strict";
      var $ = require_export();
      var createIteratorConstructor = require_create_iterator_constructor();
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var Iterators = require_iterators();
      var IteratorsCore = require_iterators_core();
      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis = function() {
        return this;
      };
      module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator)
            return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
            return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@\
@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(
        DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator :
        nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.
          next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE)
              Iterators[TO_STRING_TAG] = returnThis;
          }
        }
        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return nativeIterator.call(this);
          };
        }
        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
        }
        Iterators[NAME] = defaultIterator;
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED)
            for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                redefine(IterablePrototype, KEY, methods[KEY]);
              }
            }
          else
            $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME },
            methods);
        }
        return methods;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.iterator.js
  var require_es_array_iterator = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.iterator.js"(exports, module2) {
      "use strict";
      var toIndexedObject = require_to_indexed_object();
      var addToUnscopables = require_add_to_unscopables();
      var Iterators = require_iterators();
      var InternalStateModule = require_internal_state();
      var defineIterator = require_define_iterator();
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
      module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind
          // kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return { value: void 0, done: true };
        }
        if (kind == "keys")
          return { value: index, done: false };
        if (kind == "values")
          return { value: target[index], done: false };
        return { value: [index, target[index]], done: false };
      }, "values");
      Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.map.js
  var require_es_array_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.map.js"() {
      "use strict";
      var $ = require_export();
      var $map = require_array_iteration().map;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
      var USES_TO_LENGTH = arrayMethodUsesToLength("map");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH },
      {
        map: function map(callbackfn) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.reverse.js
  var require_es_array_reverse = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.reverse.js"() {
      "use strict";
      var $ = require_export();
      var isArray = require_is_array();
      var nativeReverse = [].reverse;
      var test = [1, 2];
      $({ target: "Array", proto: true, forced: String(test) === String(test.reverse()) },
      {
        reverse: function reverse() {
          if (isArray(this))
            this.length = this.length;
          return nativeReverse.call(this);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.slice.js
  var require_es_array_slice = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.slice.js"() {
      "use strict";
      var $ = require_export();
      var isObject2 = require_is_object();
      var isArray = require_is_array();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var toIndexedObject = require_to_indexed_object();
      var createProperty = require_create_property();
      var wellKnownSymbol = require_well_known_symbol();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
      var USES_TO_LENGTH = arrayMethodUsesToLength("slice", { ACCESSORS: true, 0: 0,
      1: 2 });
      var SPECIES = wellKnownSymbol("species");
      var nativeSlice = [].slice;
      var max = Math.max;
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH },
      {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = toLength(O.length);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var Constructor, result, n;
          if (isArray(O)) {
            Constructor = O.constructor;
            if (typeof Constructor == "function" && (Constructor === Array || isArray(
            Constructor.prototype))) {
              Constructor = void 0;
            } else if (isObject2(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null)
                Constructor = void 0;
            }
            if (Constructor === Array || Constructor === void 0) {
              return nativeSlice.call(O, k, fin);
            }
          }
          result = new (Constructor === void 0 ? Array : Constructor)(max(fin - k,
          0));
          for (n = 0; k < fin; k++, n++)
            if (k in O)
              createProperty(result, n, O[k]);
          result.length = n;
          return result;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-method-is-strict.js
  var require_array_method_is_strict = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-method-is-strict.js"(exports, module2) {
      "use strict";
      var fails = require_fails();
      module2.exports = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
          method.call(null, argument || function() {
            throw 1;
          }, 1);
        });
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.sort.js
  var require_es_array_sort = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.sort.js"() {
      "use strict";
      var $ = require_export();
      var aFunction = require_a_function();
      var toObject = require_to_object();
      var fails = require_fails();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var test = [];
      var nativeSort = test.sort;
      var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(void 0);
      });
      var FAILS_ON_NULL = fails(function() {
        test.sort(null);
      });
      var STRICT_METHOD = arrayMethodIsStrict("sort");
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;
      $({ target: "Array", proto: true, forced: FORCED }, {
        sort: function sort(comparefn) {
          return comparefn === void 0 ? nativeSort.call(toObject(this)) : nativeSort.
          call(toObject(this), aFunction(comparefn));
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-species.js
  var require_set_species = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/set-s\
pecies.js"(exports, module2) {
      "use strict";
      var getBuiltIn = require_get_built_in();
      var definePropertyModule = require_object_define_property();
      var wellKnownSymbol = require_well_known_symbol();
      var DESCRIPTORS = require_descriptors();
      var SPECIES = wellKnownSymbol("species");
      module2.exports = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function() {
              return this;
            }
          });
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.species.js
  var require_es_array_species = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.species.js"() {
      var setSpecies = require_set_species();
      setSpecies("Array");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.splice.js
  var require_es_array_splice = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.splice.js"() {
      "use strict";
      var $ = require_export();
      var toAbsoluteIndex = require_to_absolute_index();
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      var toObject = require_to_object();
      var arraySpeciesCreate = require_array_species_create();
      var createProperty = require_create_property();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
      var USES_TO_LENGTH = arrayMethodUsesToLength("splice", { ACCESSORS: true, 0: 0,
      1: 2 });
      var max = Math.max;
      var min = Math.min;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH },
      {
        splice: function splice(start, deleteCount) {
          var O = toObject(this);
          var len = toLength(O.length);
          var actualStart = toAbsoluteIndex(start, len);
          var argumentsLength = arguments.length;
          var insertCount, actualDeleteCount, A, k, from, to;
          if (argumentsLength === 0) {
            insertCount = actualDeleteCount = 0;
          } else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
          } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
          }
          if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
            throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
          }
          A = arraySpeciesCreate(O, actualDeleteCount);
          for (k = 0; k < actualDeleteCount; k++) {
            from = actualStart + k;
            if (from in O)
              createProperty(A, k, O[from]);
          }
          A.length = actualDeleteCount;
          if (insertCount < actualDeleteCount) {
            for (k = actualStart; k < len - actualDeleteCount; k++) {
              from = k + actualDeleteCount;
              to = k + insertCount;
              if (from in O)
                O[to] = O[from];
              else
                delete O[to];
            }
            for (k = len; k > len - actualDeleteCount + insertCount; k--)
              delete O[k - 1];
          } else if (insertCount > actualDeleteCount) {
            for (k = len - actualDeleteCount; k > actualStart; k--) {
              from = k + actualDeleteCount - 1;
              to = k + insertCount - 1;
              if (from in O)
                O[to] = O[from];
              else
                delete O[to];
            }
          }
          for (k = 0; k < insertCount; k++) {
            O[k + actualStart] = arguments[k + 2];
          }
          O.length = len - actualDeleteCount + insertCount;
          return A;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.unscopables.flat.js
  var require_es_array_unscopables_flat = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.unscopables.flat.js"() {
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flat");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array.unscopables.flat-map.js
  var require_es_array_unscopables_flat_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y.unscopables.flat-map.js"() {
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flatMap");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-buffer-native.js
  var require_array_buffer_native = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-buffer-native.js"(exports, module2) {
      module2.exports = typeof ArrayBuffer !== "undefined" && typeof DataView !==
      "undefined";
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/redefine-all.js
  var require_redefine_all = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/redef\
ine-all.js"(exports, module2) {
      var redefine = require_redefine();
      module2.exports = function(target, src, options) {
        for (var key in src)
          redefine(target, key, src[key], options);
        return target;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/an-instance.js
  var require_an_instance = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/an-in\
stance.js"(exports, module2) {
      module2.exports = function(it, Constructor, name) {
        if (!(it instanceof Constructor)) {
          throw TypeError("Incorrect " + (name ? name + " " : "") + "invocation");
        }
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-index.js
  var require_to_index = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-in\
dex.js"(exports, module2) {
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      module2.exports = function(it) {
        if (it === void 0)
          return 0;
        var number = toInteger(it);
        var length = toLength(number);
        if (number !== length)
          throw RangeError("Wrong length or index");
        return length;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/ieee754.js
  var require_ieee754 = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/ieee7\
54.js"(exports, module2) {
      var Infinity2 = 1 / 0;
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2;
      var pack = function(number, mantissaLength, bytes) {
        var buffer = new Array(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number);
        if (number != number || number === Infinity2) {
          mantissa = number != number ? 1 : 0;
          exponent = eMax;
        } else {
          exponent = floor(log(number) / LN2);
          if (number * (c = pow(2, -exponent)) < 1) {
            exponent--;
            c *= 2;
          }
          if (exponent + eBias >= 1) {
            number += rt / c;
          } else {
            number += rt * pow(2, 1 - eBias);
          }
          if (number * c >= 2) {
            exponent++;
            c /= 2;
          }
          if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
          } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
          } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
          }
        }
        for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /=
        256, mantissaLength -= 8)
          ;
        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;
        for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /=
        256, exponentLength -= 8)
          ;
        buffer[--index] |= sign * 128;
        return buffer;
      };
      var unpack = function(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;
        for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -=
        8)
          ;
        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;
        for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -=
        8)
          ;
        if (exponent === 0) {
          exponent = 1 - eBias;
        } else if (exponent === eMax) {
          return mantissa ? NaN : sign ? -Infinity2 : Infinity2;
        } else {
          mantissa = mantissa + pow(2, mantissaLength);
          exponent = exponent - eBias;
        }
        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
      };
      module2.exports = {
        pack,
        unpack
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-fill.js
  var require_array_fill = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-fill.js"(exports, module2) {
      "use strict";
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      module2.exports = function fill(value) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0,
        length);
        var end = argumentsLength > 2 ? arguments[2] : void 0;
        var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
        while (endPos > index)
          O[index++] = value;
        return O;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-buffer.js
  var require_array_buffer = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-buffer.js"(exports, module2) {
      "use strict";
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var NATIVE_ARRAY_BUFFER = require_array_buffer_native();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefineAll = require_redefine_all();
      var fails = require_fails();
      var anInstance = require_an_instance();
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      var toIndex = require_to_index();
      var IEEE754 = require_ieee754();
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var defineProperty = require_object_define_property().f;
      var arrayFill = require_array_fill();
      var setToStringTag = require_set_to_string_tag();
      var InternalStateModule = require_internal_state();
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var ARRAY_BUFFER = "ArrayBuffer";
      var DATA_VIEW = "DataView";
      var PROTOTYPE = "prototype";
      var WRONG_LENGTH = "Wrong length";
      var WRONG_INDEX = "Wrong index";
      var NativeArrayBuffer = global2[ARRAY_BUFFER];
      var $ArrayBuffer = NativeArrayBuffer;
      var $DataView = global2[DATA_VIEW];
      var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
      var ObjectPrototype = Object.prototype;
      var RangeError2 = global2.RangeError;
      var packIEEE754 = IEEE754.pack;
      var unpackIEEE754 = IEEE754.unpack;
      var packInt8 = function(number) {
        return [number & 255];
      };
      var packInt16 = function(number) {
        return [number & 255, number >> 8 & 255];
      };
      var packInt32 = function(number) {
        return [number & 255, number >> 8 & 255, number >> 16 & 255, number >> 24 &
        255];
      };
      var unpackInt32 = function(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
      };
      var packFloat32 = function(number) {
        return packIEEE754(number, 23, 4);
      };
      var packFloat64 = function(number) {
        return packIEEE754(number, 52, 8);
      };
      var addGetter = function(Constructor, key2) {
        defineProperty(Constructor[PROTOTYPE], key2, { get: function() {
          return getInternalState(this)[key2];
        } });
      };
      var get = function(view, count, index, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength)
          throw RangeError2(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = bytes.slice(start, start + count);
        return isLittleEndian ? pack : pack.reverse();
      };
      var set = function(view, count, index, conversion, value, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength)
          throw RangeError2(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);
        for (var i = 0; i < count; i++)
          bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
      };
      if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer2(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          setInternalState(this, {
            bytes: arrayFill.call(new Array(byteLength), 0),
            byteLength
          });
          if (!DESCRIPTORS)
            this.byteLength = byteLength;
        };
        $DataView = function DataView2(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = getInternalState(buffer).byteLength;
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength)
            throw RangeError2("Wrong offset");
          byteLength = byteLength === void 0 ? bufferLength - offset : toLength(
          byteLength);
          if (offset + byteLength > bufferLength)
            throw RangeError2(WRONG_LENGTH);
          setInternalState(this, {
            buffer,
            byteLength,
            byteOffset: offset
          });
          if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
          }
        };
        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, "byteLength");
          addGetter($DataView, "buffer");
          addGetter($DataView, "byteLength");
          addGetter($DataView, "byteOffset");
        }
        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] :
            void 0);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] :
            void 0);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] :
            void 0));
          },
          getUint32: function getUint32(byteOffset) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] :
            void 0)) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ?
            arguments[1] : void 0), 23);
          },
          getFloat64: function getFloat64(byteOffset) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ?
            arguments[1] : void 0), 52);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setInt16: function setInt16(byteOffset, value) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] :
            void 0);
          },
          setUint16: function setUint16(byteOffset, value) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] :
            void 0);
          },
          setInt32: function setInt32(byteOffset, value) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] :
            void 0);
          },
          setUint32: function setUint32(byteOffset, value) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] :
            void 0);
          },
          setFloat32: function setFloat32(byteOffset, value) {
            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] :
            void 0);
          },
          setFloat64: function setFloat64(byteOffset, value) {
            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] :
            void 0);
          }
        });
      } else {
        if (!fails(function() {
          NativeArrayBuffer(1);
        }) || !fails(function() {
          new NativeArrayBuffer(-1);
        }) || fails(function() {
          new NativeArrayBuffer();
          new NativeArrayBuffer(1.5);
          new NativeArrayBuffer(NaN);
          return NativeArrayBuffer.name != ARRAY_BUFFER;
        })) {
          $ArrayBuffer = function ArrayBuffer2(length) {
            anInstance(this, $ArrayBuffer);
            return new NativeArrayBuffer(toIndex(length));
          };
          ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
          for (keys = getOwnPropertyNames(NativeArrayBuffer), j = 0; keys.length >
          j; ) {
            if (!((key = keys[j++]) in $ArrayBuffer)) {
              createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
            }
          }
          ArrayBufferPrototype.constructor = $ArrayBuffer;
        }
        if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
          setPrototypeOf($DataViewPrototype, ObjectPrototype);
        }
        testView = new $DataView(new $ArrayBuffer(2));
        nativeSetInt8 = $DataViewPrototype.setInt8;
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1))
          redefineAll($DataViewPrototype, {
            setInt8: function setInt8(byteOffset, value) {
              nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
            },
            setUint8: function setUint8(byteOffset, value) {
              nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
            }
          }, { unsafe: true });
      }
      var ArrayBufferPrototype;
      var keys;
      var j;
      var key;
      var testView;
      var nativeSetInt8;
      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      module2.exports = {
        ArrayBuffer: $ArrayBuffer,
        DataView: $DataView
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array-buffer.constructor.js
  var require_es_array_buffer_constructor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y-buffer.constructor.js"() {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var arrayBufferModule = require_array_buffer();
      var setSpecies = require_set_species();
      var ARRAY_BUFFER = "ArrayBuffer";
      var ArrayBuffer2 = arrayBufferModule[ARRAY_BUFFER];
      var NativeArrayBuffer = global2[ARRAY_BUFFER];
      $({ global: true, forced: NativeArrayBuffer !== ArrayBuffer2 }, {
        ArrayBuffer: ArrayBuffer2
      });
      setSpecies(ARRAY_BUFFER);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/species-constructor.js
  var require_species_constructor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/speci\
es-constructor.js"(exports, module2) {
      var anObject = require_an_object();
      var aFunction = require_a_function();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      module2.exports = function(O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor :
        aFunction(S);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.array-buffer.slice.js
  var require_es_array_buffer_slice = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.arra\
y-buffer.slice.js"() {
      "use strict";
      var $ = require_export();
      var fails = require_fails();
      var ArrayBufferModule = require_array_buffer();
      var anObject = require_an_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var speciesConstructor = require_species_constructor();
      var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
      var DataView2 = ArrayBufferModule.DataView;
      var nativeArrayBufferSlice = ArrayBuffer2.prototype.slice;
      var INCORRECT_SLICE = fails(function() {
        return !new ArrayBuffer2(2).slice(1, void 0).byteLength;
      });
      $({ target: "ArrayBuffer", proto: true, unsafe: true, forced: INCORRECT_SLICE },
      {
        slice: function slice(start, end) {
          if (nativeArrayBufferSlice !== void 0 && end === void 0) {
            return nativeArrayBufferSlice.call(anObject(this), start);
          }
          var length = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var result = new (speciesConstructor(this, ArrayBuffer2))(toLength(fin -
          first));
          var viewSource = new DataView2(this);
          var viewTarget = new DataView2(result);
          var index = 0;
          while (first < fin) {
            viewTarget.setUint8(index++, viewSource.getUint8(first++));
          }
          return result;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.date.to-json.js
  var require_es_date_to_json = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.date\
.to-json.js"() {
      "use strict";
      var $ = require_export();
      var fails = require_fails();
      var toObject = require_to_object();
      var toPrimitive = require_to_primitive();
      var FORCED = fails(function() {
        return (/* @__PURE__ */ new Date(NaN)).toJSON() !== null || Date.prototype.
        toJSON.call({ toISOString: function() {
          return 1;
        } }) !== 1;
      });
      $({ target: "Date", proto: true, forced: FORCED }, {
        // eslint-disable-next-line no-unused-vars
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == "number" && !isFinite(pv) ? null : O.toISOString();
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/date-to-primitive.js
  var require_date_to_primitive = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/date-\
to-primitive.js"(exports, module2) {
      "use strict";
      var anObject = require_an_object();
      var toPrimitive = require_to_primitive();
      module2.exports = function(hint) {
        if (hint !== "string" && hint !== "number" && hint !== "default") {
          throw TypeError("Incorrect hint");
        }
        return toPrimitive(anObject(this), hint !== "number");
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.date.to-primitive.js
  var require_es_date_to_primitive = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.date\
.to-primitive.js"() {
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var dateToPrimitive = require_date_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      var DatePrototype = Date.prototype;
      if (!(TO_PRIMITIVE in DatePrototype)) {
        createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.function.has-instance.js
  var require_es_function_has_instance = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.func\
tion.has-instance.js"() {
      "use strict";
      var isObject2 = require_is_object();
      var definePropertyModule = require_object_define_property();
      var getPrototypeOf = require_object_get_prototype_of();
      var wellKnownSymbol = require_well_known_symbol();
      var HAS_INSTANCE = wellKnownSymbol("hasInstance");
      var FunctionPrototype = Function.prototype;
      if (!(HAS_INSTANCE in FunctionPrototype)) {
        definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function(O) {
          if (typeof this != "function" || !isObject2(O))
            return false;
          if (!isObject2(this.prototype))
            return O instanceof this;
          while (O = getPrototypeOf(O))
            if (this.prototype === O)
              return true;
          return false;
        } });
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.global-this.js
  var require_es_global_this = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.glob\
al-this.js"() {
      var $ = require_export();
      var global2 = require_global();
      $({ global: true }, {
        globalThis: global2
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.json.stringify.js
  var require_es_json_stringify = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.json\
.stringify.js"() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var fails = require_fails();
      var $stringify = getBuiltIn("JSON", "stringify");
      var re = /[\uD800-\uDFFF]/g;
      var low = /^[\uD800-\uDBFF]$/;
      var hi = /^[\uDC00-\uDFFF]$/;
      var fix = function(match, offset, string) {
        var prev = string.charAt(offset - 1);
        var next = string.charAt(offset + 1);
        if (low.test(match) && !hi.test(next) || hi.test(match) && !low.test(prev)) {
          return "\\u" + match.charCodeAt(0).toString(16);
        }
        return match;
      };
      var FORCED = fails(function() {
        return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\
\uDEAD") !== '"\\udead"';
      });
      if ($stringify) {
        $({ target: "JSON", stat: true, forced: FORCED }, {
          // eslint-disable-next-line no-unused-vars
          stringify: function stringify(it, replacer, space) {
            var result = $stringify.apply(null, arguments);
            return typeof result == "string" ? result.replace(re, fix) : result;
          }
        });
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.json.to-string-tag.js
  var require_es_json_to_string_tag = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.json\
.to-string-tag.js"() {
      var global2 = require_global();
      var setToStringTag = require_set_to_string_tag();
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/freezing.js
  var require_freezing = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/freez\
ing.js"(exports, module2) {
      var fails = require_fails();
      module2.exports = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/internal-metadata.js
  var require_internal_metadata = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inter\
nal-metadata.js"(exports, module2) {
      var hiddenKeys = require_hidden_keys();
      var isObject2 = require_is_object();
      var has = require_has();
      var defineProperty = require_object_define_property().f;
      var uid = require_uid();
      var FREEZING = require_freezing();
      var METADATA = uid("meta");
      var id = 0;
      var isExtensible = Object.isExtensible || function() {
        return true;
      };
      var setMetadata = function(it) {
        defineProperty(it, METADATA, { value: {
          objectID: "O" + ++id,
          // object ID
          weakData: {}
          // weak collections IDs
        } });
      };
      var fastKey = function(it, create) {
        if (!isObject2(it))
          return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") +
          it;
        if (!has(it, METADATA)) {
          if (!isExtensible(it))
            return "F";
          if (!create)
            return "E";
          setMetadata(it);
        }
        return it[METADATA].objectID;
      };
      var getWeakData = function(it, create) {
        if (!has(it, METADATA)) {
          if (!isExtensible(it))
            return true;
          if (!create)
            return false;
          setMetadata(it);
        }
        return it[METADATA].weakData;
      };
      var onFreeze = function(it) {
        if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA))
          setMetadata(it);
        return it;
      };
      var meta = module2.exports = {
        REQUIRED: false,
        fastKey,
        getWeakData,
        onFreeze
      };
      hiddenKeys[METADATA] = true;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-array-iterator-method.js
  var require_is_array_iterator_method = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-ar\
ray-iterator-method.js"(exports, module2) {
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators();
      var ITERATOR = wellKnownSymbol("iterator");
      var ArrayPrototype = Array.prototype;
      module2.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] ===
        it);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-st\
ring-tag-support.js"(exports, module2) {
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module2.exports = String(test) === "[object z]";
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/classof.js
  var require_classof = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/class\
of.js"(exports, module2) {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var CORRECT_ARGUMENTS = classofRaw(/* @__PURE__ */ function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag =
        tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ?
        classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee ==
        "function" ? "Arguments" : result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/get-iterator-method.js
  var require_get_iterator_method = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/get-i\
terator-method.js"(exports, module2) {
      var classof = require_classof();
      var Iterators = require_iterators();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      module2.exports = function(it) {
        if (it != void 0)
          return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/call-with-safe-iteration-closing.js
  var require_call_with_safe_iteration_closing = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/call-\
with-safe-iteration-closing.js"(exports, module2) {
      var anObject = require_an_object();
      module2.exports = function(iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (error) {
          var returnMethod = iterator["return"];
          if (returnMethod !== void 0)
            anObject(returnMethod.call(iterator));
          throw error;
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/iterate.js
  var require_iterate = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/itera\
te.js"(exports, module2) {
      var anObject = require_an_object();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var toLength = require_to_length();
      var bind = require_function_bind_context();
      var getIteratorMethod = require_get_iterator_method();
      var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
      var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };
      var iterate = module2.exports = function(iterable, fn, that2, AS_ENTRIES, IS_ITERATOR) {
        var boundFunction = bind(fn, that2, AS_ENTRIES ? 2 : 1);
        var iterator, iterFn, index, length, result, next, step;
        if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (typeof iterFn != "function")
            throw TypeError("Target is not iterable");
          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = toLength(iterable.length); length > index; index++) {
              result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0],
              step[1]) : boundFunction(iterable[index]);
              if (result && result instanceof Result)
                return result;
            }
            return new Result(false);
          }
          iterator = iterFn.call(iterable);
        }
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          result = callWithSafeIterationClosing(iterator, boundFunction, step.value,
          AS_ENTRIES);
          if (typeof result == "object" && result && result instanceof Result)
            return result;
        }
        return new Result(false);
      };
      iterate.stop = function(result) {
        return new Result(true, result);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/check-correctness-of-iteration.js
  var require_check_correctness_of_iteration = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/check\
-correctness-of-iteration.js"(exports, module2) {
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        called = 0;
        iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var called;
      var iteratorWithReturn;
      module2.exports = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING)
          return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inherit-if-required.js
  var require_inherit_if_required = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/inher\
it-if-required.js"(exports, module2) {
      var isObject2 = require_is_object();
      var setPrototypeOf = require_object_set_prototype_of();
      module2.exports = function($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if (
          // it can work only with native `setPrototypeOf`
          setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
          typeof (NewTarget = dummy.constructor) == "function" && NewTarget !== Wrapper &&
          isObject2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !==
          Wrapper.prototype
        )
          setPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/collection.js
  var require_collection = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/colle\
ction.js"(exports, module2) {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var isForced = require_is_forced();
      var redefine = require_redefine();
      var InternalMetadataModule = require_internal_metadata();
      var iterate = require_iterate();
      var anInstance = require_an_instance();
      var isObject2 = require_is_object();
      var fails = require_fails();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var setToStringTag = require_set_to_string_tag();
      var inheritIfRequired = require_inherit_if_required();
      module2.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global2[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var exported = {};
        var fixMethod = function(KEY) {
          var nativeMethod = NativePrototype[KEY];
          redefine(
            NativePrototype,
            KEY,
            KEY == "add" ? function add(value) {
              nativeMethod.call(this, value === 0 ? 0 : value);
              return this;
            } : KEY == "delete" ? function(key) {
              return IS_WEAK && !isObject2(key) ? false : nativeMethod.call(this,
              key === 0 ? 0 : key);
            } : KEY == "get" ? function get(key) {
              return IS_WEAK && !isObject2(key) ? void 0 : nativeMethod.call(this,
              key === 0 ? 0 : key);
            } : KEY == "has" ? function has(key) {
              return IS_WEAK && !isObject2(key) ? false : nativeMethod.call(this,
              key === 0 ? 0 : key);
            } : function set(key, value) {
              nativeMethod.call(this, key === 0 ? 0 : key, value);
              return this;
            }
          );
        };
        if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != "function" ||
        !(IS_WEAK || NativePrototype.forEach && !fails(function() {
          new NativeConstructor().entries().next();
        })))) {
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP,
          ADDER);
          InternalMetadataModule.REQUIRED = true;
        } else if (isForced(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor();
          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
          var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
          });
          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
            new NativeConstructor(iterable);
          });
          var BUGGY_ZERO = !IS_WEAK && fails(function() {
            var $instance = new NativeConstructor();
            var index = 5;
            while (index--)
              $instance[ADDER](index, index);
            return !$instance.has(-0);
          });
          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function(dummy, iterable) {
              anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
              var that2 = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
              if (iterable != void 0)
                iterate(iterable, that2[ADDER], that2, IS_MAP);
              return that2;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod("delete");
            fixMethod("has");
            IS_MAP && fixMethod("get");
          }
          if (BUGGY_ZERO || HASNT_CHAINING)
            fixMethod(ADDER);
          if (IS_WEAK && NativePrototype.clear)
            delete NativePrototype.clear;
        }
        exported[CONSTRUCTOR_NAME] = Constructor;
        $({ global: true, forced: Constructor != NativeConstructor }, exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK)
          common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/collection-strong.js
  var require_collection_strong = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/colle\
ction-strong.js"(exports, module2) {
      "use strict";
      var defineProperty = require_object_define_property().f;
      var create = require_object_create();
      var redefineAll = require_redefine_all();
      var bind = require_function_bind_context();
      var anInstance = require_an_instance();
      var iterate = require_iterate();
      var defineIterator = require_define_iterator();
      var setSpecies = require_set_species();
      var DESCRIPTORS = require_descriptors();
      var fastKey = require_internal_metadata().fastKey;
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module2.exports = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function(that2, iterable) {
            anInstance(that2, C, CONSTRUCTOR_NAME);
            setInternalState(that2, {
              type: CONSTRUCTOR_NAME,
              index: create(null),
              first: void 0,
              last: void 0,
              size: 0
            });
            if (!DESCRIPTORS)
              that2.size = 0;
            if (iterable != void 0)
              iterate(iterable, that2[ADDER], that2, IS_MAP);
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define = function(that2, key, value) {
            var state = getInternalState(that2);
            var entry = getEntry(that2, key);
            var previous, index;
            if (entry) {
              entry.value = value;
            } else {
              state.last = entry = {
                index: index = fastKey(key, true),
                key,
                value,
                previous: previous = state.last,
                next: void 0,
                removed: false
              };
              if (!state.first)
                state.first = entry;
              if (previous)
                previous.next = entry;
              if (DESCRIPTORS)
                state.size++;
              else
                that2.size++;
              if (index !== "F")
                state.index[index] = entry;
            }
            return that2;
          };
          var getEntry = function(that2, key) {
            var state = getInternalState(that2);
            var index = fastKey(key);
            var entry;
            if (index !== "F")
              return state.index[index];
            for (entry = state.first; entry; entry = entry.next) {
              if (entry.key == key)
                return entry;
            }
          };
          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              var that2 = this;
              var state = getInternalState(that2);
              var data = state.index;
              var entry = state.first;
              while (entry) {
                entry.removed = true;
                if (entry.previous)
                  entry.previous = entry.previous.next = void 0;
                delete data[entry.index];
                entry = entry.next;
              }
              state.first = state.last = void 0;
              if (DESCRIPTORS)
                state.size = 0;
              else
                that2.size = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            "delete": function(key) {
              var that2 = this;
              var state = getInternalState(that2);
              var entry = getEntry(that2, key);
              if (entry) {
                var next = entry.next;
                var prev = entry.previous;
                delete state.index[entry.index];
                entry.removed = true;
                if (prev)
                  prev.next = next;
                if (next)
                  next.previous = prev;
                if (state.first == entry)
                  state.first = next;
                if (state.last == entry)
                  state.last = prev;
                if (DESCRIPTORS)
                  state.size--;
                else
                  that2.size--;
              }
              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn) {
              var state = getInternalState(this);
              var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] :
              void 0, 3);
              var entry;
              while (entry = entry ? entry.next : state.first) {
                boundFunction(entry.value, entry.key, this);
                while (entry && entry.removed)
                  entry = entry.previous;
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(this, key);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // 23.1.3.6 Map.prototype.get(key)
            get: function get(key) {
              var entry = getEntry(this, key);
              return entry && entry.value;
            },
            // 23.1.3.9 Map.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key === 0 ? 0 : key, value);
            }
          } : {
            // 23.2.3.1 Set.prototype.add(value)
            add: function add(value) {
              return define(this, value = value === 0 ? 0 : value, value);
            }
          });
          if (DESCRIPTORS)
            defineProperty(C.prototype, "size", {
              get: function() {
                return getInternalState(this).size;
              }
            });
          return C;
        },
        setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
          var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
          var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
          defineIterator(C, CONSTRUCTOR_NAME, function(iterated, kind) {
            setInternalState(this, {
              type: ITERATOR_NAME,
              target: iterated,
              state: getInternalCollectionState(iterated),
              kind,
              last: void 0
            });
          }, function() {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last;
            while (entry && entry.removed)
              entry = entry.previous;
            if (!state.target || !(state.last = entry = entry ? entry.next : state.
            state.first)) {
              state.target = void 0;
              return { value: void 0, done: true };
            }
            if (kind == "keys")
              return { value: entry.key, done: false };
            if (kind == "values")
              return { value: entry.value, done: false };
            return { value: [entry.key, entry.value], done: false };
          }, IS_MAP ? "entries" : "values", !IS_MAP, true);
          setSpecies(CONSTRUCTOR_NAME);
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.map.js
  var require_es_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.map.\
js"(exports, module2) {
      "use strict";
      var collection = require_collection();
      var collectionStrong = require_collection_strong();
      module2.exports = collection("Map", function(init) {
        return function Map2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionStrong);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.math.to-string-tag.js
  var require_es_math_to_string_tag = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.math\
.to-string-tag.js"() {
      var setToStringTag = require_set_to_string_tag();
      setToStringTag(Math, "Math", true);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/whitespaces.js
  var require_whitespaces = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/white\
spaces.js"(exports, module2) {
      module2.exports = "	\n\v\f\r                　\u2028\u2029\uFEFF";
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-trim.js
  var require_string_trim = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-trim.js"(exports, module2) {
      var requireObjectCoercible = require_require_object_coercible();
      var whitespaces = require_whitespaces();
      var whitespace = "[" + whitespaces + "]";
      var ltrim = RegExp("^" + whitespace + whitespace + "*");
      var rtrim = RegExp(whitespace + whitespace + "*$");
      var createMethod = function(TYPE) {
        return function($this) {
          var string = String(requireObjectCoercible($this));
          if (TYPE & 1)
            string = string.replace(ltrim, "");
          if (TYPE & 2)
            string = string.replace(rtrim, "");
          return string;
        };
      };
      module2.exports = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/number-parse-float.js
  var require_number_parse_float = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/numbe\
r-parse-float.js"(exports, module2) {
      var global2 = require_global();
      var trim = require_string_trim().trim;
      var whitespaces = require_whitespaces();
      var $parseFloat = global2.parseFloat;
      var FORCED = 1 / $parseFloat(whitespaces + "-0") !== -Infinity;
      module2.exports = FORCED ? function parseFloat(string) {
        var trimmedString = trim(String(string));
        var result = $parseFloat(trimmedString);
        return result === 0 && trimmedString.charAt(0) == "-" ? -0 : result;
      } : $parseFloat;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.number.parse-float.js
  var require_es_number_parse_float = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.numb\
er.parse-float.js"() {
      var $ = require_export();
      var parseFloat = require_number_parse_float();
      $({ target: "Number", stat: true, forced: Number.parseFloat != parseFloat },
      {
        parseFloat
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-to-array.js
  var require_object_to_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-to-array.js"(exports, module2) {
      var DESCRIPTORS = require_descriptors();
      var objectKeys = require_object_keys();
      var toIndexedObject = require_to_indexed_object();
      var propertyIsEnumerable = require_object_property_is_enumerable().f;
      var createMethod = function(TO_ENTRIES) {
        return function(it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;
          while (length > i) {
            key = keys[i++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
              result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }
          return result;
        };
      };
      module2.exports = {
        // `Object.entries` method
        // https://tc39.github.io/ecma262/#sec-object.entries
        entries: createMethod(true),
        // `Object.values` method
        // https://tc39.github.io/ecma262/#sec-object.values
        values: createMethod(false)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.object.entries.js
  var require_es_object_entries = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.obje\
ct.entries.js"() {
      var $ = require_export();
      var $entries = require_object_to_array().entries;
      $({ target: "Object", stat: true }, {
        entries: function entries(O) {
          return $entries(O);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.object.from-entries.js
  var require_es_object_from_entries = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.obje\
ct.from-entries.js"() {
      var $ = require_export();
      var iterate = require_iterate();
      var createProperty = require_create_property();
      $({ target: "Object", stat: true }, {
        fromEntries: function fromEntries(iterable) {
          var obj = {};
          iterate(iterable, function(k, v) {
            createProperty(obj, k, v);
          }, void 0, true);
          return obj;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.object.get-own-property-descriptors.js
  var require_es_object_get_own_property_descriptors = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.obje\
ct.get-own-property-descriptors.js"() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var ownKeys = require_own_keys();
      var toIndexedObject = require_to_indexed_object();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var createProperty = require_create_property();
      $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var index = 0;
          var key, descriptor;
          while (keys.length > index) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== void 0)
              createProperty(result, key, descriptor);
          }
          return result;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/object-to-string.js
  var require_object_to_string = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/objec\
t-to-string.js"(exports, module2) {
      "use strict";
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var classof = require_classof();
      module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return "[object " + classof(this) + "]";
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.object.to-string.js
  var require_es_object_to_string = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.obje\
ct.to-string.js"() {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var redefine = require_redefine();
      var toString = require_object_to_string();
      if (!TO_STRING_TAG_SUPPORT) {
        redefine(Object.prototype, "toString", toString, { unsafe: true });
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.object.values.js
  var require_es_object_values = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.obje\
ct.values.js"() {
      var $ = require_export();
      var $values = require_object_to_array().values;
      $({ target: "Object", stat: true }, {
        values: function values(O) {
          return $values(O);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.apply.js
  var require_es_reflect_apply = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.apply.js"() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var aFunction = require_a_function();
      var anObject = require_an_object();
      var fails = require_fails();
      var nativeApply = getBuiltIn("Reflect", "apply");
      var functionApply = Function.apply;
      var OPTIONAL_ARGUMENTS_LIST = !fails(function() {
        nativeApply(function() {
        });
      });
      $({ target: "Reflect", stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
        apply: function apply(target, thisArgument, argumentsList) {
          aFunction(target);
          anObject(argumentsList);
          return nativeApply ? nativeApply(target, thisArgument, argumentsList) :
          functionApply.call(target, thisArgument, argumentsList);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/function-bind.js
  var require_function_bind = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/funct\
ion-bind.js"(exports, module2) {
      "use strict";
      var aFunction = require_a_function();
      var isObject2 = require_is_object();
      var slice = [].slice;
      var factories = {};
      var construct = function(C, argsLength, args) {
        if (!(argsLength in factories)) {
          for (var list = [], i = 0; i < argsLength; i++)
            list[i] = "a[" + i + "]";
          factories[argsLength] = Function("C,a", "return new C(" + list.join(",") +
          ")");
        }
        return factories[argsLength](C, args);
      };
      module2.exports = Function.bind || function bind(that2) {
        var fn = aFunction(this);
        var partArgs = slice.call(arguments, 1);
        var boundFunction = function bound() {
          var args = partArgs.concat(slice.call(arguments));
          return this instanceof boundFunction ? construct(fn, args.length, args) :
          fn.apply(that2, args);
        };
        if (isObject2(fn.prototype))
          boundFunction.prototype = fn.prototype;
        return boundFunction;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.construct.js
  var require_es_reflect_construct = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.construct.js"() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var aFunction = require_a_function();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var create = require_object_create();
      var bind = require_function_bind();
      var fails = require_fails();
      var nativeConstruct = getBuiltIn("Reflect", "construct");
      var NEW_TARGET_BUG = fails(function() {
        function F() {
        }
        return !(nativeConstruct(function() {
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function() {
        nativeConstruct(function() {
        });
      });
      var FORCED = NEW_TARGET_BUG || ARGS_BUG;
      $({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
        construct: function construct(Target, args) {
          aFunction(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG)
            return nativeConstruct(Target, args, newTarget);
          if (Target == newTarget) {
            switch (args.length) {
              case 0:
                return new Target();
              case 1:
                return new Target(args[0]);
              case 2:
                return new Target(args[0], args[1]);
              case 3:
                return new Target(args[0], args[1], args[2]);
              case 4:
                return new Target(args[0], args[1], args[2], args[3]);
            }
            var $args = [null];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
          }
          var proto = newTarget.prototype;
          var instance = create(isObject2(proto) ? proto : Object.prototype);
          var result = Function.apply.call(Target, instance, args);
          return isObject2(result) ? result : instance;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.define-property.js
  var require_es_reflect_define_property = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.define-property.js"() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var anObject = require_an_object();
      var toPrimitive = require_to_primitive();
      var definePropertyModule = require_object_define_property();
      var fails = require_fails();
      var ERROR_INSTEAD_OF_FALSE = fails(function() {
        Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, {
        value: 2 });
      });
      $({ target: "Reflect", stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS },
      {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          var key = toPrimitive(propertyKey, true);
          anObject(attributes);
          try {
            definePropertyModule.f(target, key, attributes);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.delete-property.js
  var require_es_reflect_delete_property = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.delete-property.js"() {
      var $ = require_export();
      var anObject = require_an_object();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().
      f;
      $({ target: "Reflect", stat: true }, {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
          return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.get.js
  var require_es_reflect_get = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.get.js"() {
      var $ = require_export();
      var isObject2 = require_is_object();
      var anObject = require_an_object();
      var has = require_has();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var getPrototypeOf = require_object_get_prototype_of();
      function get(target, propertyKey) {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var descriptor, prototype;
        if (anObject(target) === receiver)
          return target[propertyKey];
        if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey))
          return has(descriptor, "value") ? descriptor.value : descriptor.get ===
          void 0 ? void 0 : descriptor.get.call(receiver);
        if (isObject2(prototype = getPrototypeOf(target)))
          return get(prototype, propertyKey, receiver);
      }
      $({ target: "Reflect", stat: true }, {
        get
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js
  var require_es_reflect_get_own_property_descriptor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.get-own-property-descriptor.js"() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var anObject = require_an_object();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      $({ target: "Reflect", stat: true, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.get-prototype-of.js
  var require_es_reflect_get_prototype_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.get-prototype-of.js"() {
      var $ = require_export();
      var anObject = require_an_object();
      var objectGetPrototypeOf = require_object_get_prototype_of();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      $({ target: "Reflect", stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
        getPrototypeOf: function getPrototypeOf(target) {
          return objectGetPrototypeOf(anObject(target));
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.has.js
  var require_es_reflect_has = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.has.js"() {
      var $ = require_export();
      $({ target: "Reflect", stat: true }, {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.is-extensible.js
  var require_es_reflect_is_extensible = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.is-extensible.js"() {
      var $ = require_export();
      var anObject = require_an_object();
      var objectIsExtensible = Object.isExtensible;
      $({ target: "Reflect", stat: true }, {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return objectIsExtensible ? objectIsExtensible(target) : true;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.own-keys.js
  var require_es_reflect_own_keys = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.own-keys.js"() {
      var $ = require_export();
      var ownKeys = require_own_keys();
      $({ target: "Reflect", stat: true }, {
        ownKeys
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.prevent-extensions.js
  var require_es_reflect_prevent_extensions = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.prevent-extensions.js"() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var anObject = require_an_object();
      var FREEZING = require_freezing();
      $({ target: "Reflect", stat: true, sham: !FREEZING }, {
        preventExtensions: function preventExtensions(target) {
          anObject(target);
          try {
            var objectPreventExtensions = getBuiltIn("Object", "preventExtension\
s");
            if (objectPreventExtensions)
              objectPreventExtensions(target);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.set.js
  var require_es_reflect_set = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.set.js"() {
      var $ = require_export();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var has = require_has();
      var fails = require_fails();
      var definePropertyModule = require_object_define_property();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var getPrototypeOf = require_object_get_prototype_of();
      var createPropertyDescriptor = require_create_property_descriptor();
      function set(target, propertyKey, V) {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        var existingDescriptor, prototype;
        if (!ownDescriptor) {
          if (isObject2(prototype = getPrototypeOf(target))) {
            return set(prototype, propertyKey, V, receiver);
          }
          ownDescriptor = createPropertyDescriptor(0);
        }
        if (has(ownDescriptor, "value")) {
          if (ownDescriptor.writable === false || !isObject2(receiver))
            return false;
          if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.
            writable === false)
              return false;
            existingDescriptor.value = V;
            definePropertyModule.f(receiver, propertyKey, existingDescriptor);
          } else
            definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(
            0, V));
          return true;
        }
        return ownDescriptor.set === void 0 ? false : (ownDescriptor.set.call(receiver,
        V), true);
      }
      var MS_EDGE_BUG = fails(function() {
        var object = definePropertyModule.f({}, "a", { configurable: true });
        return Reflect.set(getPrototypeOf(object), "a", 1, object) !== false;
      });
      $({ target: "Reflect", stat: true, forced: MS_EDGE_BUG }, {
        set
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.reflect.set-prototype-of.js
  var require_es_reflect_set_prototype_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.refl\
ect.set-prototype-of.js"() {
      var $ = require_export();
      var anObject = require_an_object();
      var aPossiblePrototype = require_a_possible_prototype();
      var objectSetPrototypeOf = require_object_set_prototype_of();
      if (objectSetPrototypeOf)
        $({ target: "Reflect", stat: true }, {
          setPrototypeOf: function setPrototypeOf(target, proto) {
            anObject(target);
            aPossiblePrototype(proto);
            try {
              objectSetPrototypeOf(target, proto);
              return true;
            } catch (error) {
              return false;
            }
          }
        });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-regexp.js
  var require_is_regexp = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/is-re\
gexp.js"(exports, module2) {
      var isObject2 = require_is_object();
      var classof = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module2.exports = function(it) {
        var isRegExp;
        return isObject2(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp :
        classof(it) == "RegExp");
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regexp-flags.js
  var require_regexp_flags = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regex\
p-flags.js"(exports, module2) {
      "use strict";
      var anObject = require_an_object();
      module2.exports = function() {
        var that2 = anObject(this);
        var result = "";
        if (that2.global)
          result += "g";
        if (that2.ignoreCase)
          result += "i";
        if (that2.multiline)
          result += "m";
        if (that2.dotAll)
          result += "s";
        if (that2.unicode)
          result += "u";
        if (that2.sticky)
          result += "y";
        return result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regexp-sticky-helpers.js
  var require_regexp_sticky_helpers = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regex\
p-sticky-helpers.js"(exports) {
      "use strict";
      var fails = require_fails();
      function RE(s, f) {
        return RegExp(s, f);
      }
      exports.UNSUPPORTED_Y = fails(function() {
        var re = RE("a", "y");
        re.lastIndex = 2;
        return re.exec("abcd") != null;
      });
      exports.BROKEN_CARET = fails(function() {
        var re = RE("^r", "gy");
        re.lastIndex = 2;
        return re.exec("str") != null;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.regexp.constructor.js
  var require_es_regexp_constructor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.rege\
xp.constructor.js"() {
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var isForced = require_is_forced();
      var inheritIfRequired = require_inherit_if_required();
      var defineProperty = require_object_define_property().f;
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var isRegExp = require_is_regexp();
      var getFlags = require_regexp_flags();
      var stickyHelpers = require_regexp_sticky_helpers();
      var redefine = require_redefine();
      var fails = require_fails();
      var setInternalState = require_internal_state().set;
      var setSpecies = require_set_species();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      var NativeRegExp = global2.RegExp;
      var RegExpPrototype = NativeRegExp.prototype;
      var re1 = /a/g;
      var re2 = /a/g;
      var CORRECT_NEW = new NativeRegExp(re1) !== re1;
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var FORCED = DESCRIPTORS && isForced("RegExp", !CORRECT_NEW || UNSUPPORTED_Y ||
      fails(function() {
        re2[MATCH] = false;
        return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(
        re1, "i") != "/a/i";
      }));
      if (FORCED) {
        RegExpWrapper = function RegExp2(pattern, flags) {
          var thisIsRegExp = this instanceof RegExpWrapper;
          var patternIsRegExp = isRegExp(pattern);
          var flagsAreUndefined = flags === void 0;
          var sticky;
          if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper &&
          flagsAreUndefined) {
            return pattern;
          }
          if (CORRECT_NEW) {
            if (patternIsRegExp && !flagsAreUndefined)
              pattern = pattern.source;
          } else if (pattern instanceof RegExpWrapper) {
            if (flagsAreUndefined)
              flags = getFlags.call(pattern);
            pattern = pattern.source;
          }
          if (UNSUPPORTED_Y) {
            sticky = !!flags && flags.indexOf("y") > -1;
            if (sticky)
              flags = flags.replace(/y/g, "");
          }
          var result = inheritIfRequired(
            CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern,
            flags),
            thisIsRegExp ? this : RegExpPrototype,
            RegExpWrapper
          );
          if (UNSUPPORTED_Y && sticky)
            setInternalState(result, { sticky });
          return result;
        };
        proxy = function(key) {
          key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function() {
              return NativeRegExp[key];
            },
            set: function(it) {
              NativeRegExp[key] = it;
            }
          });
        };
        keys = getOwnPropertyNames(NativeRegExp);
        index = 0;
        while (keys.length > index)
          proxy(keys[index++]);
        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine(global2, "RegExp", RegExpWrapper);
      }
      var RegExpWrapper;
      var proxy;
      var keys;
      var index;
      setSpecies("RegExp");
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regexp-exec.js
  var require_regexp_exec = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regex\
p-exec.js"(exports, module2) {
      "use strict";
      var regexpFlags = require_regexp_flags();
      var stickyHelpers = require_regexp_sticky_helpers();
      var nativeExec = RegExp.prototype.exec;
      var nativeReplace = String.prototype.replace;
      var patchedExec = nativeExec;
      var UPDATES_LAST_INDEX_WRONG = function() {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, "a");
        nativeExec.call(re2, "a");
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
      var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
      if (PATCH) {
        patchedExec = function exec(str) {
          var re = this;
          var lastIndex, reCopy, match, i;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = regexpFlags.call(re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;
          if (sticky) {
            flags = flags.replace("y", "");
            if (flags.indexOf("g") === -1) {
              flags += "g";
            }
            strCopy = String(str).slice(re.lastIndex);
            if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex -
            1] !== "\n")) {
              source = "(?: " + source + ")";
              strCopy = " " + strCopy;
              charsAdded++;
            }
            reCopy = new RegExp("^(?:" + source + ")", flags);
          }
          if (NPCG_INCLUDED) {
            reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
          }
          if (UPDATES_LAST_INDEX_WRONG)
            lastIndex = re.lastIndex;
          match = nativeExec.call(sticky ? reCopy : re, strCopy);
          if (sticky) {
            if (match) {
              match.input = match.input.slice(charsAdded);
              match[0] = match[0].slice(charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else
              re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }
          if (NPCG_INCLUDED && match && match.length > 1) {
            nativeReplace.call(match[0], reCopy, function() {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0)
                  match[i] = void 0;
              }
            });
          }
          return match;
        };
      }
      module2.exports = patchedExec;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.regexp.exec.js
  var require_es_regexp_exec = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.rege\
xp.exec.js"() {
      "use strict";
      var $ = require_export();
      var exec = require_regexp_exec();
      $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
        exec
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.regexp.sticky.js
  var require_es_regexp_sticky = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.rege\
xp.sticky.js"() {
      var DESCRIPTORS = require_descriptors();
      var UNSUPPORTED_Y = require_regexp_sticky_helpers().UNSUPPORTED_Y;
      var defineProperty = require_object_define_property().f;
      var getInternalState = require_internal_state().get;
      var RegExpPrototype = RegExp.prototype;
      if (DESCRIPTORS && UNSUPPORTED_Y) {
        defineProperty(RegExp.prototype, "sticky", {
          configurable: true,
          get: function() {
            if (this === RegExpPrototype)
              return void 0;
            if (this instanceof RegExp) {
              return !!getInternalState(this).sticky;
            }
            throw TypeError("Incompatible receiver, RegExp required");
          }
        });
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.regexp.test.js
  var require_es_regexp_test = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.rege\
xp.test.js"() {
      "use strict";
      require_es_regexp_exec();
      var $ = require_export();
      var isObject2 = require_is_object();
      var DELEGATES_TO_EXEC = function() {
        var execCalled = false;
        var re = /[ac]/;
        re.exec = function() {
          execCalled = true;
          return /./.exec.apply(this, arguments);
        };
        return re.test("abc") === true && execCalled;
      }();
      var nativeTest = /./.test;
      $({ target: "RegExp", proto: true, forced: !DELEGATES_TO_EXEC }, {
        test: function(str) {
          if (typeof this.exec !== "function") {
            return nativeTest.call(this, str);
          }
          var result = this.exec(str);
          if (result !== null && !isObject2(result)) {
            throw new Error("RegExp exec method returned something other than an\
 Object or null");
          }
          return !!result;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.regexp.to-string.js
  var require_es_regexp_to_string = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.rege\
xp.to-string.js"() {
      "use strict";
      var redefine = require_redefine();
      var anObject = require_an_object();
      var fails = require_fails();
      var flags = require_regexp_flags();
      var TO_STRING = "toString";
      var RegExpPrototype = RegExp.prototype;
      var nativeToString = RegExpPrototype[TO_STRING];
      var NOT_GENERIC = fails(function() {
        return nativeToString.call({ source: "a", flags: "b" }) != "/a/b";
      });
      var INCORRECT_NAME = nativeToString.name != TO_STRING;
      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = String(R.source);
          var rf = R.flags;
          var f = String(rf === void 0 && R instanceof RegExp && !("flags" in RegExpPrototype) ?
          flags.call(R) : rf);
          return "/" + p + "/" + f;
        }, { unsafe: true });
      }
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.set.js
  var require_es_set = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.set.\
js"(exports, module2) {
      "use strict";
      var collection = require_collection();
      var collectionStrong = require_collection_strong();
      module2.exports = collection("Set", function(init) {
        return function Set2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionStrong);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/not-a-regexp.js
  var require_not_a_regexp = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/not-a\
-regexp.js"(exports, module2) {
      var isRegExp = require_is_regexp();
      module2.exports = function(it) {
        if (isRegExp(it)) {
          throw TypeError("The method doesn't accept regular expressions");
        }
        return it;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/correct-is-regexp-logic.js
  var require_correct_is_regexp_logic = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/corre\
ct-is-regexp-logic.js"(exports, module2) {
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module2.exports = function(METHOD_NAME) {
        var regexp = /./;
        try {
          "/./"[METHOD_NAME](regexp);
        } catch (e) {
          try {
            regexp[MATCH] = false;
            return "/./"[METHOD_NAME](regexp);
          } catch (f) {
          }
        }
        return false;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.ends-with.js
  var require_es_string_ends_with = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.ends-with.js"() {
      "use strict";
      var $ = require_export();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().
      f;
      var toLength = require_to_length();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var IS_PURE = require_is_pure();
      var nativeEndsWith = "".endsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
        var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
        return descriptor && !descriptor.writable;
      }();
      $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC },
      {
        endsWith: function endsWith(searchString) {
          var that2 = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var endPosition = arguments.length > 1 ? arguments[1] : void 0;
          var len = toLength(that2.length);
          var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
          var search = String(searchString);
          return nativeEndsWith ? nativeEndsWith.call(that2, search, end) : that2.
          slice(end - search.length, end) === search;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.includes.js
  var require_es_string_includes = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.includes.js"() {
      "use strict";
      var $ = require_export();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") },
      {
        includes: function includes(searchString) {
          return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString),
          arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js
  var require_fix_regexp_well_known_symbol_logic = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/fix-r\
egexp-well-known-symbol-logic.js"(exports, module2) {
      "use strict";
      require_es_regexp_exec();
      var redefine = require_redefine();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var regexpExec = require_regexp_exec();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var SPECIES = wellKnownSymbol("species");
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
        var re = /./;
        re.exec = function() {
          var result = [];
          result.groups = { a: "7" };
          return result;
        };
        return "".replace(re, "$<a>") !== "7";
      });
      var REPLACE_KEEPS_$0 = function() {
        return "a".replace(/./, "$0") === "$0";
      }();
      var REPLACE = wellKnownSymbol("replace");
      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
        if (/./[REPLACE]) {
          return /./[REPLACE]("a", "$0") === "";
        }
        return false;
      }();
      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
        var re = /(?:)/;
        var originalExec = re.exec;
        re.exec = function() {
          return originalExec.apply(this, arguments);
        };
        var result = "ab".split(re);
        return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
      });
      module2.exports = function(KEY, length, exec, sham) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function() {
          var O = {};
          O[SYMBOL] = function() {
            return 7;
          };
          return ""[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
          var execCalled = false;
          var re = /a/;
          if (KEY === "split") {
            re = {};
            re.constructor = {};
            re.constructor[SPECIES] = function() {
              return re;
            };
            re.flags = "";
            re[SYMBOL] = /./[SYMBOL];
          }
          re.exec = function() {
            execCalled = true;
            return null;
          };
          re[SYMBOL]("");
          return !execCalled;
        });
        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !(REPLACE_SUPPORTS_NAMED_GROUPS &&
        REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY ===
        "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                return { done: true, value: nativeRegExpMethod.call(regexp, str,
                arg2) };
              }
              return { done: true, value: nativeMethod.call(str, regexp, arg2) };
            }
            return { done: false };
          }, {
            REPLACE_KEEPS_$0,
            REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
          });
          var stringMethod = methods[0];
          var regexMethod = methods[1];
          redefine(String.prototype, KEY, stringMethod);
          redefine(
            RegExp.prototype,
            SYMBOL,
            length == 2 ? function(string, arg) {
              return regexMethod.call(string, this, arg);
            } : function(string) {
              return regexMethod.call(string, this);
            }
          );
        }
        if (sham)
          createNonEnumerableProperty(RegExp.prototype[SYMBOL], "sham", true);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-multibyte.js
  var require_string_multibyte = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-multibyte.js"(exports, module2) {
      var toInteger = require_to_integer();
      var requireObjectCoercible = require_require_object_coercible();
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = String(requireObjectCoercible($this));
          var position = toInteger(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size)
            return CONVERT_TO_STRING ? "" : void 0;
          first = S.charCodeAt(position);
          return first < 55296 || first > 56319 || position + 1 === size || (second =
          S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ?
          S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position +
          2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module2.exports = {
        // `String.prototype.codePointAt` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod(true)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/advance-string-index.js
  var require_advance_string_index = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/advan\
ce-string-index.js"(exports, module2) {
      "use strict";
      var charAt = require_string_multibyte().charAt;
      module2.exports = function(S, index, unicode) {
        return index + (unicode ? charAt(S, index).length : 1);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regexp-exec-abstract.js
  var require_regexp_exec_abstract = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/regex\
p-exec-abstract.js"(exports, module2) {
      var classof = require_classof_raw();
      var regexpExec = require_regexp_exec();
      module2.exports = function(R, S) {
        var exec = R.exec;
        if (typeof exec === "function") {
          var result = exec.call(R, S);
          if (typeof result !== "object") {
            throw TypeError("RegExp exec method returned something other than an\
 Object or null");
          }
          return result;
        }
        if (classof(R) !== "RegExp") {
          throw TypeError("RegExp#exec called on incompatible receiver");
        }
        return regexpExec.call(R, S);
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.match.js
  var require_es_string_match = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.match.js"() {
      "use strict";
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var anObject = require_an_object();
      var toLength = require_to_length();
      var requireObjectCoercible = require_require_object_coercible();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      fixRegExpWellKnownSymbolLogic("match", 1, function(MATCH, nativeMatch, maybeCallNative) {
        return [
          // `String.prototype.match` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.match
          function match(regexp) {
            var O = requireObjectCoercible(this);
            var matcher = regexp == void 0 ? void 0 : regexp[MATCH];
            return matcher !== void 0 ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](
            String(O));
          },
          // `RegExp.prototype[@@match]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
          function(regexp) {
            var res = maybeCallNative(nativeMatch, regexp, this);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            if (!rx.global)
              return regExpExec(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while ((result = regExpExec(rx, S)) !== null) {
              var matchStr = String(result[0]);
              A[n] = matchStr;
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              n++;
            }
            return n === 0 ? null : A;
          }
        ];
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.match-all.js
  var require_es_string_match_all = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.match-all.js"() {
      "use strict";
      var $ = require_export();
      var createIteratorConstructor = require_create_iterator_constructor();
      var requireObjectCoercible = require_require_object_coercible();
      var toLength = require_to_length();
      var aFunction = require_a_function();
      var anObject = require_an_object();
      var classof = require_classof_raw();
      var isRegExp = require_is_regexp();
      var getRegExpFlags = require_regexp_flags();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var speciesConstructor = require_species_constructor();
      var advanceStringIndex = require_advance_string_index();
      var InternalStateModule = require_internal_state();
      var IS_PURE = require_is_pure();
      var MATCH_ALL = wellKnownSymbol("matchAll");
      var REGEXP_STRING = "RegExp String";
      var REGEXP_STRING_ITERATOR = REGEXP_STRING + " Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
      var RegExpPrototype = RegExp.prototype;
      var regExpBuiltinExec = RegExpPrototype.exec;
      var nativeMatchAll = "".matchAll;
      var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function() {
        "a".matchAll(/./);
      });
      var regExpExec = function(R, S) {
        var exec = R.exec;
        var result;
        if (typeof exec == "function") {
          result = exec.call(R, S);
          if (typeof result != "object")
            throw TypeError("Incorrect exec result");
          return result;
        }
        return regExpBuiltinExec.call(R, S);
      };
      var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global2, fullUnicode) {
        setInternalState(this, {
          type: REGEXP_STRING_ITERATOR,
          regexp,
          string,
          global: global2,
          unicode: fullUnicode,
          done: false
        });
      }, REGEXP_STRING, function next() {
        var state = getInternalState(this);
        if (state.done)
          return { value: void 0, done: true };
        var R = state.regexp;
        var S = state.string;
        var match = regExpExec(R, S);
        if (match === null)
          return { value: void 0, done: state.done = true };
        if (state.global) {
          if (String(match[0]) == "")
            R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
          return { value: match, done: false };
        }
        state.done = true;
        return { value: match, done: false };
      });
      var $matchAll = function(string) {
        var R = anObject(this);
        var S = String(string);
        var C, flagsValue, flags, matcher, global2, fullUnicode;
        C = speciesConstructor(R, RegExp);
        flagsValue = R.flags;
        if (flagsValue === void 0 && R instanceof RegExp && !("flags" in RegExpPrototype)) {
          flagsValue = getRegExpFlags.call(R);
        }
        flags = flagsValue === void 0 ? "" : String(flagsValue);
        matcher = new C(C === RegExp ? R.source : R, flags);
        global2 = !!~flags.indexOf("g");
        fullUnicode = !!~flags.indexOf("u");
        matcher.lastIndex = toLength(R.lastIndex);
        return new $RegExpStringIterator(matcher, S, global2, fullUnicode);
      };
      $({ target: "String", proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
        matchAll: function matchAll(regexp) {
          var O = requireObjectCoercible(this);
          var flags, S, matcher, rx;
          if (regexp != null) {
            if (isRegExp(regexp)) {
              flags = String(requireObjectCoercible(
                "flags" in RegExpPrototype ? regexp.flags : getRegExpFlags.call(
                regexp)
              ));
              if (!~flags.indexOf("g"))
                throw TypeError("`.matchAll` does not allow non-global regexes");
            }
            if (WORKS_WITH_NON_GLOBAL_REGEX)
              return nativeMatchAll.apply(O, arguments);
            matcher = regexp[MATCH_ALL];
            if (matcher === void 0 && IS_PURE && classof(regexp) == "RegExp")
              matcher = $matchAll;
            if (matcher != null)
              return aFunction(matcher).call(regexp, O);
          } else if (WORKS_WITH_NON_GLOBAL_REGEX)
            return nativeMatchAll.apply(O, arguments);
          S = String(O);
          rx = new RegExp(regexp, "g");
          return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
        }
      });
      IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype,
      MATCH_ALL, $matchAll);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-repeat.js
  var require_string_repeat = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-repeat.js"(exports, module2) {
      "use strict";
      var toInteger = require_to_integer();
      var requireObjectCoercible = require_require_object_coercible();
      module2.exports = "".repeat || function repeat(count) {
        var str = String(requireObjectCoercible(this));
        var result = "";
        var n = toInteger(count);
        if (n < 0 || n == Infinity)
          throw RangeError("Wrong number of repetitions");
        for (; n > 0; (n >>>= 1) && (str += str))
          if (n & 1)
            result += str;
        return result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-pad.js
  var require_string_pad = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-pad.js"(exports, module2) {
      var toLength = require_to_length();
      var repeat = require_string_repeat();
      var requireObjectCoercible = require_require_object_coercible();
      var ceil = Math.ceil;
      var createMethod = function(IS_END) {
        return function($this, maxLength, fillString) {
          var S = String(requireObjectCoercible($this));
          var stringLength = S.length;
          var fillStr = fillString === void 0 ? " " : String(fillString);
          var intMaxLength = toLength(maxLength);
          var fillLen, stringFiller;
          if (intMaxLength <= stringLength || fillStr == "")
            return S;
          fillLen = intMaxLength - stringLength;
          stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
          if (stringFiller.length > fillLen)
            stringFiller = stringFiller.slice(0, fillLen);
          return IS_END ? S + stringFiller : stringFiller + S;
        };
      };
      module2.exports = {
        // `String.prototype.padStart` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
        start: createMethod(false),
        // `String.prototype.padEnd` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.padend
        end: createMethod(true)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-pad-webkit-bug.js
  var require_string_pad_webkit_bug = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-pad-webkit-bug.js"(exports, module2) {
      var userAgent = require_engine_user_agent();
      module2.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(
      userAgent);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.pad-end.js
  var require_es_string_pad_end = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.pad-end.js"() {
      "use strict";
      var $ = require_export();
      var $padEnd = require_string_pad().end;
      var WEBKIT_BUG = require_string_pad_webkit_bug();
      $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
        padEnd: function padEnd(maxLength) {
          return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.pad-start.js
  var require_es_string_pad_start = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.pad-start.js"() {
      "use strict";
      var $ = require_export();
      var $padStart = require_string_pad().start;
      var WEBKIT_BUG = require_string_pad_webkit_bug();
      $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
        padStart: function padStart(maxLength) {
          return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] :
          void 0);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.replace.js
  var require_es_string_replace = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.replace.js"() {
      "use strict";
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var anObject = require_an_object();
      var toObject = require_to_object();
      var toLength = require_to_length();
      var toInteger = require_to_integer();
      var requireObjectCoercible = require_require_object_coercible();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      var max = Math.max;
      var min = Math.min;
      var floor = Math.floor;
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;
      var maybeToString = function(it) {
        return it === void 0 ? it : String(it);
      };
      fixRegExpWellKnownSymbolLogic("replace", 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
        var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "\
$" : "$0";
        return [
          // `String.prototype.replace` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.replace
          function replace(searchValue, replaceValue) {
            var O = requireObjectCoercible(this);
            var replacer = searchValue == void 0 ? void 0 : searchValue[REPLACE];
            return replacer !== void 0 ? replacer.call(searchValue, O, replaceValue) :
            nativeReplace.call(String(O), searchValue, replaceValue);
          },
          // `RegExp.prototype[@@replace]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
          function(regexp, replaceValue) {
            if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 ||
            typeof replaceValue === "string" && replaceValue.indexOf(UNSAFE_SUBSTITUTE) ===
            -1) {
              var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
              if (res.done)
                return res.value;
            }
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === "function";
            if (!functionalReplace)
              replaceValue = String(replaceValue);
            var global2 = rx.global;
            if (global2) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }
            var results = [];
            while (true) {
              var result = regExpExec(rx, S);
              if (result === null)
                break;
              results.push(result);
              if (!global2)
                break;
              var matchStr = String(result[0]);
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = "";
            var nextSourcePosition = 0;
            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = String(result[0]);
              var position = max(min(toInteger(result.index), S.length), 0);
              var captures = [];
              for (var j = 1; j < result.length; j++)
                captures.push(maybeToString(result[j]));
              var namedCaptures = result.groups;
              if (functionalReplace) {
                var replacerArgs = [matched].concat(captures, position, S);
                if (namedCaptures !== void 0)
                  replacerArgs.push(namedCaptures);
                var replacement = String(replaceValue.apply(void 0, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position, captures, namedCaptures,
                replaceValue);
              }
              if (position >= nextSourcePosition) {
                accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                nextSourcePosition = position + matched.length;
              }
            }
            return accumulatedResult + S.slice(nextSourcePosition);
          }
        ];
        function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
          var tailPos = position + matched.length;
          var m = captures.length;
          var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
          if (namedCaptures !== void 0) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
          }
          return nativeReplace.call(replacement, symbols, function(match, ch) {
            var capture;
            switch (ch.charAt(0)) {
              case "$":
                return "$";
              case "&":
                return matched;
              case "`":
                return str.slice(0, position);
              case "'":
                return str.slice(tailPos);
              case "<":
                capture = namedCaptures[ch.slice(1, -1)];
                break;
              default:
                var n = +ch;
                if (n === 0)
                  return match;
                if (n > m) {
                  var f = floor(n / 10);
                  if (f === 0)
                    return match;
                  if (f <= m)
                    return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f -
                    1] + ch.charAt(1);
                  return match;
                }
                capture = captures[n - 1];
            }
            return capture === void 0 ? "" : capture;
          });
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/same-value.js
  var require_same_value = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/same-\
value.js"(exports, module2) {
      module2.exports = Object.is || function is(x, y) {
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.search.js
  var require_es_string_search = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.search.js"() {
      "use strict";
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var anObject = require_an_object();
      var requireObjectCoercible = require_require_object_coercible();
      var sameValue = require_same_value();
      var regExpExec = require_regexp_exec_abstract();
      fixRegExpWellKnownSymbolLogic("search", 1, function(SEARCH, nativeSearch, maybeCallNative) {
        return [
          // `String.prototype.search` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.search
          function search(regexp) {
            var O = requireObjectCoercible(this);
            var searcher = regexp == void 0 ? void 0 : regexp[SEARCH];
            return searcher !== void 0 ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](
            String(O));
          },
          // `RegExp.prototype[@@search]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
          function(regexp) {
            var res = maybeCallNative(nativeSearch, regexp, this);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var previousLastIndex = rx.lastIndex;
            if (!sameValue(previousLastIndex, 0))
              rx.lastIndex = 0;
            var result = regExpExec(rx, S);
            if (!sameValue(rx.lastIndex, previousLastIndex))
              rx.lastIndex = previousLastIndex;
            return result === null ? -1 : result.index;
          }
        ];
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.split.js
  var require_es_string_split = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.split.js"() {
      "use strict";
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var isRegExp = require_is_regexp();
      var anObject = require_an_object();
      var requireObjectCoercible = require_require_object_coercible();
      var speciesConstructor = require_species_constructor();
      var advanceStringIndex = require_advance_string_index();
      var toLength = require_to_length();
      var callRegExpExec = require_regexp_exec_abstract();
      var regexpExec = require_regexp_exec();
      var fails = require_fails();
      var arrayPush = [].push;
      var min = Math.min;
      var MAX_UINT32 = 4294967295;
      var SUPPORTS_Y = !fails(function() {
        return !RegExp(MAX_UINT32, "y");
      });
      fixRegExpWellKnownSymbolLogic("split", 2, function(SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;
        if ("abbc".split(/(b)*/)[1] == "c" || "test".split(/(?:)/, -1).length !=
        4 || "ab".split(/(?:ab)*/).length != 2 || ".".split(/(.?)(.?)/).length !=
        4 || ".".split(/()()/).length > 1 || "".split(/.?/).length) {
          internalSplit = function(separator, limit) {
            var string = String(requireObjectCoercible(this));
            var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0)
              return [];
            if (separator === void 0)
              return [string];
            if (!isRegExp(separator)) {
              return nativeSplit.call(string, separator, lim);
            }
            var output = [];
            var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ?
            "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" :
            "");
            var lastLastIndex = 0;
            var separatorCopy = new RegExp(separator.source, flags + "g");
            var match, lastIndex, lastLength;
            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;
              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length)
                  arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim)
                  break;
              }
              if (separatorCopy.lastIndex === match.index)
                separatorCopy.lastIndex++;
            }
            if (lastLastIndex === string.length) {
              if (lastLength || !separatorCopy.test(""))
                output.push("");
            } else
              output.push(string.slice(lastLastIndex));
            return output.length > lim ? output.slice(0, lim) : output;
          };
        } else if ("0".split(void 0, 0).length) {
          internalSplit = function(separator, limit) {
            return separator === void 0 && limit === 0 ? [] : nativeSplit.call(this,
            separator, limit);
          };
        } else
          internalSplit = nativeSplit;
        return [
          // `String.prototype.split` method
          // https://tc39.github.io/ecma262/#sec-string.prototype.split
          function split(separator, limit) {
            var O = requireObjectCoercible(this);
            var splitter = separator == void 0 ? void 0 : separator[SPLIT];
            return splitter !== void 0 ? splitter.call(separator, O, limit) : internalSplit.
            call(String(O), separator, limit);
          },
          // `RegExp.prototype[@@split]` method
          // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
          //
          // NOTE: This cannot be properly polyfilled in engines that don't support
          // the 'y' flag.
          function(regexp, limit) {
            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !==
            nativeSplit);
            if (res.done)
              return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var C = speciesConstructor(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") +
            (rx.unicode ? "u" : "") + (SUPPORTS_Y ? "y" : "g");
            var splitter = new C(SUPPORTS_Y ? rx : "^(?:" + rx.source + ")", flags);
            var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0)
              return [];
            if (S.length === 0)
              return callRegExpExec(splitter, S) === null ? [S] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while (q < S.length) {
              splitter.lastIndex = SUPPORTS_Y ? q : 0;
              var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
              var e;
              if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ?
              0 : q)), S.length)) === p) {
                q = advanceStringIndex(S, q, unicodeMatching);
              } else {
                A.push(S.slice(p, q));
                if (A.length === lim)
                  return A;
                for (var i = 1; i <= z.length - 1; i++) {
                  A.push(z[i]);
                  if (A.length === lim)
                    return A;
                }
                q = p = e;
              }
            }
            A.push(S.slice(p));
            return A;
          }
        ];
      }, !SUPPORTS_Y);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.starts-with.js
  var require_es_string_starts_with = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.starts-with.js"() {
      "use strict";
      var $ = require_export();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().
      f;
      var toLength = require_to_length();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var IS_PURE = require_is_pure();
      var nativeStartsWith = "".startsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
        var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
        return descriptor && !descriptor.writable;
      }();
      $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC },
      {
        startsWith: function startsWith(searchString) {
          var that2 = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0,
          that2.length));
          var search = String(searchString);
          return nativeStartsWith ? nativeStartsWith.call(that2, search, index) :
          that2.slice(index, index + search.length) === search;
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/string-trim-forced.js
  var require_string_trim_forced = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/strin\
g-trim-forced.js"(exports, module2) {
      var fails = require_fails();
      var whitespaces = require_whitespaces();
      var non = "​᠎";
      module2.exports = function(METHOD_NAME) {
        return fails(function() {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].
          name !== METHOD_NAME;
        });
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.trim.js
  var require_es_string_trim = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.trim.js"() {
      "use strict";
      var $ = require_export();
      var $trim = require_string_trim().trim;
      var forcedStringTrimMethod = require_string_trim_forced();
      $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") },
      {
        trim: function trim() {
          return $trim(this);
        }
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.trim-end.js
  var require_es_string_trim_end = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.trim-end.js"() {
      "use strict";
      var $ = require_export();
      var $trimEnd = require_string_trim().end;
      var forcedStringTrimMethod = require_string_trim_forced();
      var FORCED = forcedStringTrimMethod("trimEnd");
      var trimEnd = FORCED ? function trimEnd2() {
        return $trimEnd(this);
      } : "".trimEnd;
      $({ target: "String", proto: true, forced: FORCED }, {
        trimEnd,
        trimRight: trimEnd
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.string.trim-start.js
  var require_es_string_trim_start = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.stri\
ng.trim-start.js"() {
      "use strict";
      var $ = require_export();
      var $trimStart = require_string_trim().start;
      var forcedStringTrimMethod = require_string_trim_forced();
      var FORCED = forcedStringTrimMethod("trimStart");
      var trimStart = FORCED ? function trimStart2() {
        return $trimStart(this);
      } : "".trimStart;
      $({ target: "String", proto: true, forced: FORCED }, {
        trimStart,
        trimLeft: trimStart
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-buffer-view-core.js
  var require_array_buffer_view_core = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-buffer-view-core.js"(exports, module2) {
      "use strict";
      var NATIVE_ARRAY_BUFFER = require_array_buffer_native();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var isObject2 = require_is_object();
      var has = require_has();
      var classof = require_classof();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var defineProperty = require_object_define_property().f;
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var wellKnownSymbol = require_well_known_symbol();
      var uid = require_uid();
      var Int8Array2 = global2.Int8Array;
      var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
      var Uint8ClampedArray = global2.Uint8ClampedArray;
      var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
      var TypedArray = Int8Array2 && getPrototypeOf(Int8Array2);
      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
      var ObjectPrototype = Object.prototype;
      var isPrototypeOf = ObjectPrototype.isPrototypeOf;
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf &&
      classof(global2.opera) !== "Opera";
      var TYPED_ARRAY_TAG_REQIRED = false;
      var NAME;
      var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
      };
      var isView = function isView2(it) {
        var klass = classof(it);
        return klass === "DataView" || has(TypedArrayConstructorsList, klass);
      };
      var isTypedArray = function(it) {
        return isObject2(it) && has(TypedArrayConstructorsList, classof(it));
      };
      var aTypedArray = function(it) {
        if (isTypedArray(it))
          return it;
        throw TypeError("Target is not a typed array");
      };
      var aTypedArrayConstructor = function(C) {
        if (setPrototypeOf) {
          if (isPrototypeOf.call(TypedArray, C))
            return C;
        } else
          for (var ARRAY in TypedArrayConstructorsList)
            if (has(TypedArrayConstructorsList, NAME)) {
              var TypedArrayConstructor = global2[ARRAY];
              if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.
              call(TypedArrayConstructor, C))) {
                return C;
              }
            }
        throw TypeError("Target is not a typed array constructor");
      };
      var exportTypedArrayMethod = function(KEY, property, forced) {
        if (!DESCRIPTORS)
          return;
        if (forced)
          for (var ARRAY in TypedArrayConstructorsList) {
            var TypedArrayConstructor = global2[ARRAY];
            if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
              delete TypedArrayConstructor.prototype[KEY];
            }
          }
        if (!TypedArrayPrototype[KEY] || forced) {
          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS &&
          Int8ArrayPrototype[KEY] || property);
        }
      };
      var exportTypedArrayStaticMethod = function(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS)
          return;
        if (setPrototypeOf) {
          if (forced)
            for (ARRAY in TypedArrayConstructorsList) {
              TypedArrayConstructor = global2[ARRAY];
              if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
                delete TypedArrayConstructor[KEY];
              }
            }
          if (!TypedArray[KEY] || forced) {
            try {
              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS &&
              Int8Array2[KEY] || property);
            } catch (error) {
            }
          } else
            return;
        }
        for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global2[ARRAY];
          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
            redefine(TypedArrayConstructor, KEY, property);
          }
        }
      };
      for (NAME in TypedArrayConstructorsList) {
        if (!global2[NAME])
          NATIVE_ARRAY_BUFFER_VIEWS = false;
      }
      if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != "function" || TypedArray ===
      Function.prototype) {
        TypedArray = function TypedArray2() {
          throw TypeError("Incorrect invocation");
        };
        if (NATIVE_ARRAY_BUFFER_VIEWS)
          for (NAME in TypedArrayConstructorsList) {
            if (global2[NAME])
              setPrototypeOf(global2[NAME], TypedArray);
          }
      }
      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype ===
      ObjectPrototype) {
        TypedArrayPrototype = TypedArray.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS)
          for (NAME in TypedArrayConstructorsList) {
            if (global2[NAME])
              setPrototypeOf(global2[NAME].prototype, TypedArrayPrototype);
          }
      }
      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !==
      TypedArrayPrototype) {
        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
      }
      if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQIRED = true;
        defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function() {
          return isObject2(this) ? this[TYPED_ARRAY_TAG] : void 0;
        } });
        for (NAME in TypedArrayConstructorsList)
          if (global2[NAME]) {
            createNonEnumerableProperty(global2[NAME], TYPED_ARRAY_TAG, NAME);
          }
      }
      module2.exports = {
        NATIVE_ARRAY_BUFFER_VIEWS,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
        aTypedArray,
        aTypedArrayConstructor,
        exportTypedArrayMethod,
        exportTypedArrayStaticMethod,
        isView,
        isTypedArray,
        TypedArray,
        TypedArrayPrototype
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed-array-constructors-require-wrappers.js
  var require_typed_array_constructors_require_wrappers = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed\
-array-constructors-require-wrappers.js"(exports, module2) {
      var global2 = require_global();
      var fails = require_fails();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var NATIVE_ARRAY_BUFFER_VIEWS = require_array_buffer_view_core().NATIVE_ARRAY_BUFFER_VIEWS;
      var ArrayBuffer2 = global2.ArrayBuffer;
      var Int8Array2 = global2.Int8Array;
      module2.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
        Int8Array2(1);
      }) || !fails(function() {
        new Int8Array2(-1);
      }) || !checkCorrectnessOfIteration(function(iterable) {
        new Int8Array2();
        new Int8Array2(null);
        new Int8Array2(1.5);
        new Int8Array2(iterable);
      }, true) || fails(function() {
        return new Int8Array2(new ArrayBuffer2(2), 1, void 0).length !== 1;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-positive-integer.js
  var require_to_positive_integer = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-po\
sitive-integer.js"(exports, module2) {
      var toInteger = require_to_integer();
      module2.exports = function(it) {
        var result = toInteger(it);
        if (result < 0)
          throw RangeError("The argument can't be less than 0");
        return result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-offset.js
  var require_to_offset = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/to-of\
fset.js"(exports, module2) {
      var toPositiveInteger = require_to_positive_integer();
      module2.exports = function(it, BYTES) {
        var offset = toPositiveInteger(it);
        if (offset % BYTES)
          throw RangeError("Wrong offset");
        return offset;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed-array-from.js
  var require_typed_array_from = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed\
-array-from.js"(exports, module2) {
      var toObject = require_to_object();
      var toLength = require_to_length();
      var getIteratorMethod = require_get_iterator_method();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var bind = require_function_bind_context();
      var aTypedArrayConstructor = require_array_buffer_view_core().aTypedArrayConstructor;
      module2.exports = function from(source) {
        var O = toObject(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
        var mapping = mapfn !== void 0;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator, next;
        if (iteratorMethod != void 0 && !isArrayIteratorMethod(iteratorMethod)) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          O = [];
          while (!(step = next.call(iterator)).done) {
            O.push(step.value);
          }
        }
        if (mapping && argumentsLength > 2) {
          mapfn = bind(mapfn, arguments[2], 2);
        }
        length = toLength(O.length);
        result = new (aTypedArrayConstructor(this))(length);
        for (i = 0; length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed-array-constructor.js
  var require_typed_array_constructor = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/typed\
-array-constructor.js"(exports, module2) {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var ArrayBufferModule = require_array_buffer();
      var anInstance = require_an_instance();
      var createPropertyDescriptor = require_create_property_descriptor();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var toLength = require_to_length();
      var toIndex = require_to_index();
      var toOffset = require_to_offset();
      var toPrimitive = require_to_primitive();
      var has = require_has();
      var classof = require_classof();
      var isObject2 = require_is_object();
      var create = require_object_create();
      var setPrototypeOf = require_object_set_prototype_of();
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var typedArrayFrom = require_typed_array_from();
      var forEach = require_array_iteration().forEach;
      var setSpecies = require_set_species();
      var definePropertyModule = require_object_define_property();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var InternalStateModule = require_internal_state();
      var inheritIfRequired = require_inherit_if_required();
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var round = Math.round;
      var RangeError2 = global2.RangeError;
      var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
      var DataView2 = ArrayBufferModule.DataView;
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
      var TypedArray = ArrayBufferViewCore.TypedArray;
      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var isTypedArray = ArrayBufferViewCore.isTypedArray;
      var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
      var WRONG_LENGTH = "Wrong length";
      var fromList = function(C, list) {
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      };
      var addGetter = function(it, key) {
        nativeDefineProperty(it, key, { get: function() {
          return getInternalState(this)[key];
        } });
      };
      var isArrayBuffer = function(it) {
        var klass;
        return it instanceof ArrayBuffer2 || (klass = classof(it)) == "ArrayBuff\
er" || klass == "SharedArrayBuffer";
      };
      var isTypedArrayIndex = function(target, key) {
        return isTypedArray(target) && typeof key != "symbol" && key in target &&
        String(+key) == String(key);
      };
      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(
        2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
      };
      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject2(
        descriptor) && has(descriptor, "value") && !has(descriptor, "get") && !has(
        descriptor, "set") && !descriptor.configurable && (!has(descriptor, "wri\
table") || descriptor.writable) && (!has(descriptor, "enumerable") || descriptor.
        enumerable)) {
          target[key] = descriptor.value;
          return target;
        }
        return nativeDefineProperty(target, key, descriptor);
      };
      if (DESCRIPTORS) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
          definePropertyModule.f = wrappedDefineProperty;
          addGetter(TypedArrayPrototype, "buffer");
          addGetter(TypedArrayPrototype, "byteOffset");
          addGetter(TypedArrayPrototype, "byteLength");
          addGetter(TypedArrayPrototype, "length");
        }
        $({ target: "Object", stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
          defineProperty: wrappedDefineProperty
        });
        module2.exports = function(TYPE, wrapper, CLAMPED) {
          var BYTES = TYPE.match(/\d+$/)[0] / 8;
          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? "Clamped" : "") + "Array";
          var GETTER = "get" + TYPE;
          var SETTER = "set" + TYPE;
          var NativeTypedArrayConstructor = global2[CONSTRUCTOR_NAME];
          var TypedArrayConstructor = NativeTypedArrayConstructor;
          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.
          prototype;
          var exported = {};
          var getter = function(that2, index) {
            var data = getInternalState(that2);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
          };
          var setter = function(that2, index, value) {
            var data = getInternalState(that2);
            if (CLAMPED)
              value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value &
              255;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
          };
          var addElement = function(that2, index) {
            nativeDefineProperty(that2, index, {
              get: function() {
                return getter(this, index);
              },
              set: function(value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };
          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function(that2, data, offset, $length) {
              anInstance(that2, TypedArrayConstructor, CONSTRUCTOR_NAME);
              var index = 0;
              var byteOffset = 0;
              var buffer, byteLength, length;
              if (!isObject2(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new ArrayBuffer2(byteLength);
              } else if (isArrayBuffer(data)) {
                buffer = data;
                byteOffset = toOffset(offset, BYTES);
                var $len = data.byteLength;
                if ($length === void 0) {
                  if ($len % BYTES)
                    throw RangeError2(WRONG_LENGTH);
                  byteLength = $len - byteOffset;
                  if (byteLength < 0)
                    throw RangeError2(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + byteOffset > $len)
                    throw RangeError2(WRONG_LENGTH);
                }
                length = byteLength / BYTES;
              } else if (isTypedArray(data)) {
                return fromList(TypedArrayConstructor, data);
              } else {
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }
              setInternalState(that2, {
                buffer,
                byteOffset,
                byteLength,
                length,
                view: new DataView2(buffer)
              });
              while (index < length)
                addElement(that2, index++);
            });
            if (setPrototypeOf)
              setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(
            TypedArrayPrototype);
          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
              anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
              return inheritIfRequired(function() {
                if (!isObject2(data))
                  return new NativeTypedArrayConstructor(toIndex(data));
                if (isArrayBuffer(data))
                  return $length !== void 0 ? new NativeTypedArrayConstructor(data,
                  toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !==
                  void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset,
                  BYTES)) : new NativeTypedArrayConstructor(data);
                if (isTypedArray(data))
                  return fromList(TypedArrayConstructor, data);
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }(), dummy, TypedArrayConstructor);
            });
            if (setPrototypeOf)
              setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {
              if (!(key in TypedArrayConstructor)) {
                createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
              }
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
          }
          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, "constru\
ctor", TypedArrayConstructor);
          }
          if (TYPED_ARRAY_TAG) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG,
            CONSTRUCTOR_NAME);
          }
          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
          $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS
          }, exported);
          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
            createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT,
            BYTES);
          }
          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT,
            BYTES);
          }
          setSpecies(CONSTRUCTOR_NAME);
        };
      } else
        module2.exports = function() {
        };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.float32-array.js
  var require_es_typed_array_float32_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.float32-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Float32", function(init) {
        return function Float32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.float64-array.js
  var require_es_typed_array_float64_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.float64-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Float64", function(init) {
        return function Float64Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.int8-array.js
  var require_es_typed_array_int8_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.int8-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int8", function(init) {
        return function Int8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.int16-array.js
  var require_es_typed_array_int16_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.int16-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int16", function(init) {
        return function Int16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.int32-array.js
  var require_es_typed_array_int32_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.int32-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int32", function(init) {
        return function Int32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.uint8-array.js
  var require_es_typed_array_uint8_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.uint8-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint8", function(init) {
        return function Uint8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js
  var require_es_typed_array_uint8_clamped_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.uint8-clamped-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint8", function(init) {
        return function Uint8ClampedArray(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.uint16-array.js
  var require_es_typed_array_uint16_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.uint16-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint16", function(init) {
        return function Uint16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.uint32-array.js
  var require_es_typed_array_uint32_array = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.uint32-array.js"() {
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint32", function(init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-copy-within.js
  var require_array_copy_within = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-copy-within.js"(exports, module2) {
      "use strict";
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var min = Math.min;
      module2.exports = [].copyWithin || function copyWithin(target, start) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : void 0;
        var count = min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from,
        len - to);
        var inc = 1;
        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }
        while (count-- > 0) {
          if (from in O)
            O[to] = O[from];
          else
            delete O[to];
          to += inc;
          from += inc;
        }
        return O;
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.copy-within.js
  var require_es_typed_array_copy_within = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.copy-within.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $copyWithin = require_array_copy_within();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("copyWithin", function copyWithin(target, start) {
        return $copyWithin.call(aTypedArray(this), target, start, arguments.length >
        2 ? arguments[2] : void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.every.js
  var require_es_typed_array_every = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.every.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $every = require_array_iteration().every;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("every", function every(callbackfn) {
        return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] :
        void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.fill.js
  var require_es_typed_array_fill = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.fill.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $fill = require_array_fill();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("fill", function fill(value) {
        return $fill.apply(aTypedArray(this), arguments);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.filter.js
  var require_es_typed_array_filter = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.filter.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $filter = require_array_iteration().filter;
      var speciesConstructor = require_species_constructor();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("filter", function filter(callbackfn) {
        var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ?
        arguments[1] : void 0);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.find.js
  var require_es_typed_array_find = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.find.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $find = require_array_iteration().find;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("find", function find(predicate) {
        return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] :
        void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.find-index.js
  var require_es_typed_array_find_index = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.find-index.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $findIndex = require_array_iteration().findIndex;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("findIndex", function findIndex(predicate) {
        return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] :
        void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.for-each.js
  var require_es_typed_array_for_each = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.for-each.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $forEach = require_array_iteration().forEach;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("forEach", function forEach(callbackfn) {
        $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] :
        void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.from.js
  var require_es_typed_array_from = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.from.js"() {
      "use strict";
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var exportTypedArrayStaticMethod = require_array_buffer_view_core().exportTypedArrayStaticMethod;
      var typedArrayFrom = require_typed_array_from();
      exportTypedArrayStaticMethod("from", typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.includes.js
  var require_es_typed_array_includes = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.includes.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $includes = require_array_includes().includes;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("includes", function includes(searchElement) {
        return $includes(aTypedArray(this), searchElement, arguments.length > 1 ?
        arguments[1] : void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.index-of.js
  var require_es_typed_array_index_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.index-of.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $indexOf = require_array_includes().indexOf;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("indexOf", function indexOf(searchElement) {
        return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ?
        arguments[1] : void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.iterator.js
  var require_es_typed_array_iterator = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.iterator.js"() {
      "use strict";
      var global2 = require_global();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var ArrayIterators = require_es_array_iterator();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var Uint8Array2 = global2.Uint8Array;
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var nativeTypedArrayIterator = Uint8Array2 && Uint8Array2.prototype[ITERATOR];
      var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.
      name == "values" || nativeTypedArrayIterator.name == void 0);
      var typedArrayValues = function values() {
        return arrayValues.call(aTypedArray(this));
      };
      exportTypedArrayMethod("entries", function entries() {
        return arrayEntries.call(aTypedArray(this));
      });
      exportTypedArrayMethod("keys", function keys() {
        return arrayKeys.call(aTypedArray(this));
      });
      exportTypedArrayMethod("values", typedArrayValues, !CORRECT_ITER_NAME);
      exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.join.js
  var require_es_typed_array_join = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.join.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $join = [].join;
      exportTypedArrayMethod("join", function join(separator) {
        return $join.apply(aTypedArray(this), arguments);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-last-index-of.js
  var require_array_last_index_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-last-index-of.js"(exports, module2) {
      "use strict";
      var toIndexedObject = require_to_indexed_object();
      var toInteger = require_to_integer();
      var toLength = require_to_length();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var arrayMethodUsesToLength = require_array_method_uses_to_length();
      var min = Math.min;
      var nativeLastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict("lastIndexOf");
      var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", { ACCESSORS: true,
      1: 0 });
      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;
      module2.exports = FORCED ? function lastIndexOf(searchElement) {
        if (NEGATIVE_ZERO)
          return nativeLastIndexOf.apply(this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1)
          index = min(index, toInteger(arguments[1]));
        if (index < 0)
          index = length + index;
        for (; index >= 0; index--)
          if (index in O && O[index] === searchElement)
            return index || 0;
        return -1;
      } : nativeLastIndexOf;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.last-index-of.js
  var require_es_typed_array_last_index_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.last-index-of.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $lastIndexOf = require_array_last_index_of();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("lastIndexOf", function lastIndexOf(searchElement) {
        return $lastIndexOf.apply(aTypedArray(this), arguments);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.map.js
  var require_es_typed_array_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.map.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $map = require_array_iteration().map;
      var speciesConstructor = require_species_constructor();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("map", function map(mapfn) {
        return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] :
        void 0, function(O, length) {
          return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(
          length);
        });
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.of.js
  var require_es_typed_array_of = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.of.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;
      exportTypedArrayStaticMethod("of", function of() {
        var index = 0;
        var length = arguments.length;
        var result = new (aTypedArrayConstructor(this))(length);
        while (length > index)
          result[index] = arguments[index++];
        return result;
      }, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array-reduce.js
  var require_array_reduce = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/array\
-reduce.js"(exports, module2) {
      var aFunction = require_a_function();
      var toObject = require_to_object();
      var IndexedObject = require_indexed_object();
      var toLength = require_to_length();
      var createMethod = function(IS_RIGHT) {
        return function(that2, callbackfn, argumentsLength, memo) {
          aFunction(callbackfn);
          var O = toObject(that2);
          var self2 = IndexedObject(O);
          var length = toLength(O.length);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2)
            while (true) {
              if (index in self2) {
                memo = self2[index];
                index += i;
                break;
              }
              index += i;
              if (IS_RIGHT ? index < 0 : length <= index) {
                throw TypeError("Reduce of empty array with no initial value");
              }
            }
          for (; IS_RIGHT ? index >= 0 : length > index; index += i)
            if (index in self2) {
              memo = callbackfn(memo, self2[index], index, O);
            }
          return memo;
        };
      };
      module2.exports = {
        // `Array.prototype.reduce` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
        left: createMethod(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
        right: createMethod(true)
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.reduce.js
  var require_es_typed_array_reduce = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.reduce.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $reduce = require_array_reduce().left;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("reduce", function reduce(callbackfn) {
        return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.
        length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.reduce-right.js
  var require_es_typed_array_reduce_right = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.reduce-right.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $reduceRight = require_array_reduce().right;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("reduceRight", function reduceRight(callbackfn) {
        return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.
        length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.reverse.js
  var require_es_typed_array_reverse = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.reverse.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var floor = Math.floor;
      exportTypedArrayMethod("reverse", function reverse() {
        var that2 = this;
        var length = aTypedArray(that2).length;
        var middle = floor(length / 2);
        var index = 0;
        var value;
        while (index < middle) {
          value = that2[index];
          that2[index++] = that2[--length];
          that2[length] = value;
        }
        return that2;
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.slice.js
  var require_es_typed_array_slice = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.slice.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var speciesConstructor = require_species_constructor();
      var fails = require_fails();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $slice = [].slice;
      var FORCED = fails(function() {
        new Int8Array(1).slice();
      });
      exportTypedArrayMethod("slice", function slice(start, end) {
        var list = $slice.call(aTypedArray(this), start, end);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      }, FORCED);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.some.js
  var require_es_typed_array_some = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.some.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $some = require_array_iteration().some;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("some", function some(callbackfn) {
        return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] :
        void 0);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.sort.js
  var require_es_typed_array_sort = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.sort.js"() {
      "use strict";
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $sort = [].sort;
      exportTypedArrayMethod("sort", function sort(comparefn) {
        return $sort.call(aTypedArray(this), comparefn);
      });
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.typed-array.to-string.js
  var require_es_typed_array_to_string = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.type\
d-array.to-string.js"() {
      "use strict";
      var exportTypedArrayMethod = require_array_buffer_view_core().exportTypedArrayMethod;
      var fails = require_fails();
      var global2 = require_global();
      var Uint8Array2 = global2.Uint8Array;
      var Uint8ArrayPrototype = Uint8Array2 && Uint8Array2.prototype || {};
      var arrayToString = [].toString;
      var arrayJoin = [].join;
      if (fails(function() {
        arrayToString.call({});
      })) {
        arrayToString = function toString() {
          return arrayJoin.call(this);
        };
      }
      var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;
      exportTypedArrayMethod("toString", arrayToString, IS_NOT_ARRAY_METHOD);
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/collection-weak.js
  var require_collection_weak = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/internals/colle\
ction-weak.js"(exports, module2) {
      "use strict";
      var redefineAll = require_redefine_all();
      var getWeakData = require_internal_metadata().getWeakData;
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var anInstance = require_an_instance();
      var iterate = require_iterate();
      var ArrayIterationModule = require_array_iteration();
      var $has = require_has();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var find = ArrayIterationModule.find;
      var findIndex = ArrayIterationModule.findIndex;
      var id = 0;
      var uncaughtFrozenStore = function(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function() {
        this.entries = [];
      };
      var findUncaughtFrozen = function(store, key) {
        return find(store.entries, function(it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            return entry[1];
        },
        has: function(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            entry[1] = value;
          else
            this.entries.push([key, value]);
        },
        "delete": function(key) {
          var index = findIndex(this.entries, function(it) {
            return it[0] === key;
          });
          if (~index)
            this.entries.splice(index, 1);
          return !!~index;
        }
      };
      module2.exports = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function(that2, iterable) {
            anInstance(that2, C, CONSTRUCTOR_NAME);
            setInternalState(that2, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: void 0
            });
            if (iterable != void 0)
              iterate(iterable, that2[ADDER], that2, IS_MAP);
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define = function(that2, key, value) {
            var state = getInternalState(that2);
            var data = getWeakData(anObject(key), true);
            if (data === true)
              uncaughtFrozenStore(state).set(key, value);
            else
              data[state.id] = value;
            return that2;
          };
          redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            "delete": function(key) {
              var state = getInternalState(this);
              if (!isObject2(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state)["delete"](key);
              return data && $has(data, state.id) && delete data[state.id];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject2(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state).has(key);
              return data && $has(data, state.id);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // 23.3.3.3 WeakMap.prototype.get(key)
            get: function get(key) {
              var state = getInternalState(this);
              if (isObject2(key)) {
                var data = getWeakData(key);
                if (data === true)
                  return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : void 0;
              }
            },
            // 23.3.3.5 WeakMap.prototype.set(key, value)
            set: function set(key, value) {
              return define(this, key, value);
            }
          } : {
            // 23.4.3.1 WeakSet.prototype.add(value)
            add: function add(value) {
              return define(this, value, true);
            }
          });
          return C;
        }
      };
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.weak-map.js
  var require_es_weak_map = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.weak\
-map.js"(exports, module2) {
      "use strict";
      var global2 = require_global();
      var redefineAll = require_redefine_all();
      var InternalMetadataModule = require_internal_metadata();
      var collection = require_collection();
      var collectionWeak = require_collection_weak();
      var isObject2 = require_is_object();
      var enforceIternalState = require_internal_state().enforce;
      var NATIVE_WEAK_MAP = require_native_weak_map();
      var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
      var isExtensible = Object.isExtensible;
      var InternalWeakMap;
      var wrapper = function(init) {
        return function WeakMap() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      };
      var $WeakMap = module2.exports = collection("WeakMap", wrapper, collectionWeak);
      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
        InternalMetadataModule.REQUIRED = true;
        WeakMapPrototype = $WeakMap.prototype;
        nativeDelete = WeakMapPrototype["delete"];
        nativeHas = WeakMapPrototype.has;
        nativeGet = WeakMapPrototype.get;
        nativeSet = WeakMapPrototype.set;
        redefineAll(WeakMapPrototype, {
          "delete": function(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeDelete.call(this, key) || state.frozen["delete"](key);
            }
            return nativeDelete.call(this, key);
          },
          has: function has(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) || state.frozen.has(key);
            }
            return nativeHas.call(this, key);
          },
          get: function get(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.
              frozen.get(key);
            }
            return nativeGet.call(this, key);
          },
          set: function set(key, value) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.
              frozen.set(key, value);
            } else
              nativeSet.call(this, key, value);
            return this;
          }
        });
      }
      var WeakMapPrototype;
      var nativeDelete;
      var nativeHas;
      var nativeGet;
      var nativeSet;
    }
  });

  // ../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.weak-set.js
  var require_es_weak_set = __commonJS({
    "../../node_modules/.pnpm/core-js@3.6.4/node_modules/core-js/modules/es.weak\
-set.js"() {
      "use strict";
      var collection = require_collection();
      var collectionWeak = require_collection_weak();
      collection("WeakSet", function(init) {
        return function WeakSet2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionWeak);
    }
  });

  // ../lynx-promise/src/core.js
  var require_core = __commonJS({
    "../lynx-promise/src/core.js"(exports, module2) {
      "use strict";
      function noop2() {
      }
      var LAST_ERROR = null;
      var IS_ERROR = {};
      function getThen(obj) {
        try {
          return obj.then;
        } catch (ex) {
          LAST_ERROR = ex;
          return IS_ERROR;
        }
      }
      function tryCallOne(fn, a) {
        try {
          return fn(a);
        } catch (ex) {
          LAST_ERROR = ex;
          return IS_ERROR;
        }
      }
      function tryCallTwo(fn, a, b) {
        try {
          fn(a, b);
        } catch (ex) {
          LAST_ERROR = ex;
          return IS_ERROR;
        }
      }
      function trimStack(stack) {
        if (!stack) {
          return "";
        }
        const index = stack.indexOf("\n");
        if (index === -1) {
          return stack;
        }
        return stack.substring(index + 1);
      }
      module2.exports = (opt) => {
        var nextTick = opt.nextTick;
        function Promise2(fn) {
          this.__createStack = trimStack(new Error("Promise creation stack").stack);
          if (typeof this !== "object") {
            throw new TypeError("Promises must be constructed via new");
          }
          if (typeof fn !== "function") {
            throw new TypeError("Promise constructor's argument is not a functio\
n");
          }
          this._deferredState = 0;
          this._state = 0;
          this._value = null;
          this._deferreds = null;
          if (fn === noop2)
            return;
          doResolve(fn, this);
        }
        Promise2._onHandle = null;
        Promise2._onReject = null;
        Promise2._noop = noop2;
        Promise2.prototype.then = function(onFulfilled, onRejected) {
          if (this.constructor !== Promise2) {
            return safeThen(this, onFulfilled, onRejected);
          }
          var res = new Promise2(noop2);
          handle(this, new Handler(onFulfilled, onRejected, res));
          return res;
        };
        function safeThen(self2, onFulfilled, onRejected) {
          return new self2.constructor(function(resolve2, reject2) {
            var res = new Promise2(noop2);
            res.then(resolve2, reject2);
            handle(self2, new Handler(onFulfilled, onRejected, res));
          });
        }
        function handle(self2, deferred) {
          while (self2._state === 3) {
            self2 = self2._value;
          }
          if (Promise2._onHandle) {
            Promise2._onHandle(self2);
          }
          if (self2._state === 0) {
            if (self2._deferredState === 0) {
              self2._deferredState = 1;
              self2._deferreds = deferred;
              return;
            }
            if (self2._deferredState === 1) {
              self2._deferredState = 2;
              self2._deferreds = [self2._deferreds, deferred];
              return;
            }
            self2._deferreds.push(deferred);
            return;
          }
          handleResolved(self2, deferred);
        }
        function handleResolved(self2, deferred) {
          nextTick(function() {
            var cb = self2._state === 1 ? deferred.onFulfilled : deferred.onRejected;
            if (cb === null) {
              if (self2._state === 1) {
                resolve(deferred.promise, self2._value);
              } else {
                reject(deferred.promise, self2._value);
              }
              return;
            }
            var ret = tryCallOne(cb, self2._value);
            if (ret === IS_ERROR) {
              reject(deferred.promise, LAST_ERROR);
            } else {
              resolve(deferred.promise, ret);
            }
          });
        }
        function resolve(self2, newValue) {
          if (newValue === self2) {
            return reject(self2, new TypeError("A promise cannot be resolved wit\
h itself."));
          }
          if (newValue && (typeof newValue === "object" || typeof newValue === "\
function")) {
            var then = getThen(newValue);
            if (then === IS_ERROR) {
              return reject(self2, LAST_ERROR);
            }
            if (then === self2.then && newValue instanceof Promise2) {
              self2._state = 3;
              self2._value = newValue;
              finale(self2);
              return;
            } else if (typeof then === "function") {
              doResolve(then.bind(newValue), self2);
              return;
            }
          }
          self2._state = 1;
          self2._value = newValue;
          finale(self2);
        }
        function reject(self2, newValue) {
          self2._state = 2;
          self2._value = newValue;
          if (Promise2._onReject) {
            Promise2._onReject(self2, newValue);
          }
          finale(self2);
        }
        function finale(self2) {
          if (self2._deferredState === 1) {
            handle(self2, self2._deferreds);
            self2._deferreds = null;
          }
          if (self2._deferredState === 2) {
            for (var i = 0; i < self2._deferreds.length; i++) {
              handle(self2, self2._deferreds[i]);
            }
            self2._deferreds = null;
          }
        }
        function Handler(onFulfilled, onRejected, promise) {
          this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
          this.onRejected = typeof onRejected === "function" ? onRejected : null;
          this.promise = promise;
        }
        function doResolve(fn, promise) {
          var done = false;
          var res = tryCallTwo(
            fn,
            function(value) {
              if (done)
                return;
              done = true;
              resolve(promise, value);
            },
            function(reason) {
              if (done)
                return;
              done = true;
              reject(promise, reason);
            }
          );
          if (!done && res === IS_ERROR) {
            done = true;
            reject(promise, LAST_ERROR);
          }
        }
        return Promise2;
      };
    }
  });

  // ../lynx-promise/src/es6-extensions.js
  var require_es6_extensions = __commonJS({
    "../lynx-promise/src/es6-extensions.js"(exports, module2) {
      "use strict";
      module2.exports = (Promise2) => {
        var TRUE = valuePromise(true);
        var FALSE = valuePromise(false);
        var NULL = valuePromise(null);
        var UNDEFINED = valuePromise(void 0);
        var ZERO = valuePromise(0);
        var EMPTYSTRING = valuePromise("");
        function valuePromise(value) {
          var p = new Promise2(Promise2._noop);
          p._state = 1;
          p._value = value;
          return p;
        }
        Promise2.resolve = function(value) {
          if (value instanceof Promise2)
            return value;
          if (value === null)
            return NULL;
          if (value === void 0)
            return UNDEFINED;
          if (value === true)
            return TRUE;
          if (value === false)
            return FALSE;
          if (value === 0)
            return ZERO;
          if (value === "")
            return EMPTYSTRING;
          if (typeof value === "object" || typeof value === "function") {
            try {
              var then = value.then;
              if (typeof then === "function") {
                return new Promise2(then.bind(value));
              }
            } catch (ex) {
              return new Promise2(function(resolve, reject) {
                reject(ex);
              });
            }
          }
          return valuePromise(value);
        };
        var iterableToArray = function(iterable) {
          if (typeof Array.from === "function") {
            iterableToArray = Array.from;
            return Array.from(iterable);
          }
          iterableToArray = function(x) {
            return Array.prototype.slice.call(x);
          };
          return Array.prototype.slice.call(iterable);
        };
        Promise2.all = function(arr) {
          var args = iterableToArray(arr);
          return new Promise2(function(resolve, reject) {
            if (args.length === 0)
              return resolve([]);
            var remaining = args.length;
            function res(i2, val) {
              if (val && (typeof val === "object" || typeof val === "function")) {
                if (val instanceof Promise2 && val.then === Promise2.prototype.then) {
                  while (val._state === 3) {
                    val = val._value;
                  }
                  if (val._state === 1)
                    return res(i2, val._value);
                  if (val._state === 2)
                    reject(val._value);
                  val.then(function(val2) {
                    res(i2, val2);
                  }, reject);
                  return;
                } else {
                  var then = val.then;
                  if (typeof then === "function") {
                    var p = new Promise2(then.bind(val));
                    p.then(function(val2) {
                      res(i2, val2);
                    }, reject);
                    return;
                  }
                }
              }
              args[i2] = val;
              if (--remaining === 0) {
                resolve(args);
              }
            }
            for (var i = 0; i < args.length; i++) {
              res(i, args[i]);
            }
          });
        };
        Promise2.reject = function(value) {
          return new Promise2(function(resolve, reject) {
            reject(value);
          });
        };
        Promise2.race = function(values) {
          return new Promise2(function(resolve, reject) {
            iterableToArray(values).forEach(function(value) {
              Promise2.resolve(value).then(resolve, reject);
            });
          });
        };
        Promise2.prototype["catch"] = function(onRejected) {
          return this.then(null, onRejected);
        };
        Promise2.prototype.done = function(onFulfilled, onRejected) {
          var self2 = arguments.length ? this.then.apply(this, arguments) : this;
          self2.then(null, function(err) {
            setTimeout(function() {
              throw err;
            }, 0);
          });
        };
        Promise2.prototype.finally = function(f) {
          return this.then(
            function(value) {
              return Promise2.resolve(f()).then(function() {
                return value;
              });
            },
            function(err) {
              return Promise2.resolve(f()).then(function() {
                throw err;
              });
            }
          );
        };
        return Promise2;
      };
    }
  });

  // ../lynx-promise/src/rejection-tracking.js
  var require_rejection_tracking = __commonJS({
    "../lynx-promise/src/rejection-tracking.js"(exports, module2) {
      "use strict";
      module2.exports = (Promise2, setTimeout2, clearTimeout) => {
        var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
        var enabled = false;
        function disable() {
          enabled = false;
          Promise2._onHandle = null;
          Promise2._onReject = null;
        }
        function enable(options) {
          options = options || {};
          if (enabled)
            disable();
          enabled = true;
          var id = 0;
          var displayId = 0;
          var rejections = {};
          Promise2._onHandle = function(promise) {
            if (promise._state === 2 && // IS REJECTED
            rejections[promise._rejectionId]) {
              if (rejections[promise._rejectionId].logged) {
                onHandled(promise._rejectionId);
              } else {
                clearTimeout && clearTimeout(rejections[promise._rejectionId].timeout);
              }
              delete rejections[promise._rejectionId];
            }
          };
          Promise2._onReject = function(promise, err) {
            if (promise._deferredState === 0) {
              promise._rejectionId = id++;
              rejections[promise._rejectionId] = {
                displayId: null,
                error: err,
                timeout: setTimeout2(
                  onUnhandled.bind(null, promise),
                  0
                ),
                logged: false
              };
            }
          };
          function onUnhandled(promise) {
            const id2 = promise._rejectionId;
            if (options.allRejections || matchWhitelist(rejections[id2].error, options.
            whitelist || DEFAULT_WHITELIST)) {
              rejections[id2].displayId = displayId++;
              if (options.onUnhandled) {
                rejections[id2].logged = true;
                if (rejections[id2].error && !(rejections[id2].error instanceof Error)) {
                  const error = new Error(JSON.stringify(rejections[id2].error));
                  error.stack = promise.__createStack;
                  rejections[id2].error = error;
                }
                options.onUnhandled(rejections[id2].displayId, rejections[id2].error);
              } else {
                rejections[id2].logged = true;
                logError(rejections[id2].displayId, rejections[id2].error);
              }
            }
          }
          function onHandled(id2) {
            if (rejections[id2].logged) {
              if (options.onHandled) {
                options.onHandled(rejections[id2].displayId, rejections[id2].error);
              } else if (!rejections[id2].onUnhandled) {
                console.warn("Promise Rejection Handled (id: " + rejections[id2].
                displayId + "):");
                console.warn(
                  '  This means you can ignore any previous messages of the form\
 "Possible Unhandled Promise Rejection" with id ' + rejections[id2].displayId + "\
."
                );
              }
            }
          }
          return Promise2;
        }
        function logError(id, error) {
          console.warn("Possible Unhandled Promise Rejection (id: " + id + "):");
          var errStr = (error && (error.stack || error)) + "";
          errStr.split("\n").forEach(function(line) {
            console.warn("  " + line);
          });
        }
        function matchWhitelist(error, list) {
          return list.some(function(cls) {
            return error instanceof cls;
          });
        }
        return {
          enable,
          disable
        };
      };
    }
  });

  // ../lynx-promise/src/index.js
  var require_src = __commonJS({
    "../lynx-promise/src/index.js"(exports, module2) {
      "use strict";
      var promiseFactor = require_core();
      var es6 = require_es6_extensions();
      var rejectionHandle = require_rejection_tracking();
      var gg = new Function("return this")();
      gg.getPromise = module2.exports.getPromise = (opt) => {
        var setTimeout2 = opt.setTimeout;
        var onUnhandled = opt.onUnhandled;
        var clearTimeout = opt.clearTimeout;
        var nextTick = opt.nextTick || ((fn) => {
          setTimeout2(fn, 0);
        });
        var Promise2 = promiseFactor({ nextTick });
        Promise2 = es6(Promise2);
        Promise2 = rejectionHandle(Promise2, setTimeout2, clearTimeout).enable({
          allRejections: true,
          onUnhandled
        });
        return Promise2;
      };
    }
  });

  // ../../node_modules/.pnpm/regenerator-runtime@0.13.7/node_modules/regenerator-runtime/runtime.js
  var require_runtime = __commonJS({
    "../../node_modules/.pnpm/regenerator-runtime@0.13.7/node_modules/regenerato\
r-runtime/runtime.js"(exports, module2) {
      var runtime = function(exports2) {
        "use strict";
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined2;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define(obj, key, value) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }
        try {
          define({}, "");
        } catch (err) {
          define = function(obj, key, value) {
            return obj[key] = value;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ?
          outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context);
          return generator;
        }
        exports2.wrap = wrap;
        function tryCatch(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        IteratorPrototype[iteratorSymbol] = function() {
          return this;
        };
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.
        call(NativeIteratorPrototype, iteratorSymbol)) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.
        create(IteratorPrototype);
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunction.displayName = define(
          GeneratorFunctionPrototype,
          toStringTagSymbol,
          "GeneratorFunction"
        );
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports2.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };
        exports2.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports2.awrap = function(arg) {
          return { __await: arg };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;
              if (value && typeof value === "object" && hasOwn.call(value, "__aw\
ait")) {
                return PromiseImpl.resolve(value.__await).then(function(value2) {
                  invoke("next", value2, resolve, reject);
                }, function(err) {
                  invoke("throw", err, resolve, reject);
                });
              }
              return PromiseImpl.resolve(value).then(function(unwrapped) {
                result.value = unwrapped;
                resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        AsyncIterator.prototype[asyncIteratorSymbol] = function() {
          return this;
        };
        exports2.AsyncIterator = AsyncIterator;
        exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0)
            PromiseImpl = Promise;
          var iter = new AsyncIterator(
            wrap(innerFn, outerFn, self2, tryLocsList),
            PromiseImpl
          );
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(
          function(result) {
            return result.done ? result.value : iter.next();
          });
        };
        function makeInvokeMethod(innerFn, self2, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if (context.method === "next") {
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }
                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }
              state = GenStateExecuting;
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted;
                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];
          if (method === undefined2) {
            context.delegate = null;
            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                context.method = "return";
                context.arg = undefined2;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context.method = "throw";
              context.arg = new TypeError(
                "The iterator does not provide a 'throw' method"
              );
            }
            return ContinueSentinel;
          }
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined2;
            }
          } else {
            return info;
          }
          context.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define(Gp, toStringTagSymbol, "Generator");
        Gp[iteratorSymbol] = function() {
          return this;
        };
        Gp.toString = function() {
          return "[object Generator]";
        };
        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports2.keys = function(object) {
          var keys = [];
          for (var key in object) {
            keys.push(key);
          }
          keys.reverse();
          return function next() {
            while (keys.length) {
              var key2 = keys.pop();
              if (key2 in object) {
                next.value = key2;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next2.value = iterable[i];
                    next2.done = false;
                    return next2;
                  }
                }
                next2.value = undefined2;
                next2.done = true;
                return next2;
              };
              return next.next = next;
            }
          }
          return { next: doneResult };
        }
        exports2.values = values;
        function doneResult() {
          return { value: undefined2, done: true };
        }
        Context.prototype = {
          constructor: Context,
          reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined2;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined2;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name in this) {
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(
                +name.slice(1))) {
                  this[name] = undefined2;
                }
              }
            }
          },
          stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function(exception) {
            if (this.done) {
              throw exception;
            }
            var context = this;
            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              if (caught) {
                context.method = "next";
                context.arg = undefined2;
              }
              return !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.
            tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc
            };
            if (this.method === "next") {
              this.arg = undefined2;
            }
            return ContinueSentinel;
          }
        };
        return exports2;
      }(
        // If this script is executing as a CommonJS module, use module.exports
        // as the regeneratorRuntime namespace. Otherwise create a new empty
        // object. Either way, the resulting object will be used to initialize
        // the regeneratorRuntime variable at the top of this file.
        typeof module2 === "object" ? module2.exports : {}
      );
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  });

  // ../lynx-polyfill/src/index.js
  require_es_symbol();
  require_es_symbol_description();
  require_es_symbol_async_iterator();
  require_es_symbol_has_instance();
  require_es_symbol_is_concat_spreadable();
  require_es_symbol_match();
  require_es_symbol_match_all();
  require_es_symbol_replace();
  require_es_symbol_search();
  require_es_symbol_species();
  require_es_symbol_split();
  require_es_symbol_to_primitive();
  require_es_symbol_to_string_tag();
  require_es_array_concat();
  require_es_array_filter();
  require_es_array_flat();
  require_es_array_flat_map();
  require_es_array_includes();
  require_es_array_iterator();
  require_es_array_map();
  require_es_array_reverse();
  require_es_array_slice();
  require_es_array_sort();
  require_es_array_species();
  require_es_array_splice();
  require_es_array_unscopables_flat();
  require_es_array_unscopables_flat_map();
  require_es_array_buffer_constructor();
  require_es_array_buffer_slice();
  require_es_date_to_json();
  require_es_date_to_primitive();
  require_es_function_has_instance();
  require_es_global_this();
  require_es_json_stringify();
  require_es_json_to_string_tag();
  require_es_map();
  require_es_math_to_string_tag();
  require_es_number_parse_float();
  require_es_object_entries();
  require_es_object_from_entries();
  require_es_object_get_own_property_descriptors();
  require_es_object_to_string();
  require_es_object_values();
  require_es_reflect_apply();
  require_es_reflect_construct();
  require_es_reflect_define_property();
  require_es_reflect_delete_property();
  require_es_reflect_get();
  require_es_reflect_get_own_property_descriptor();
  require_es_reflect_get_prototype_of();
  require_es_reflect_has();
  require_es_reflect_is_extensible();
  require_es_reflect_own_keys();
  require_es_reflect_prevent_extensions();
  require_es_reflect_set();
  require_es_reflect_set_prototype_of();
  require_es_regexp_constructor();
  require_es_regexp_exec();
  require_es_regexp_sticky();
  require_es_regexp_test();
  require_es_regexp_to_string();
  require_es_set();
  require_es_string_ends_with();
  require_es_string_includes();
  require_es_string_match();
  require_es_string_match_all();
  require_es_string_pad_end();
  require_es_string_pad_start();
  require_es_string_replace();
  require_es_string_search();
  require_es_string_split();
  require_es_string_starts_with();
  require_es_string_trim();
  require_es_string_trim_end();
  require_es_string_trim_start();
  require_es_typed_array_float32_array();
  require_es_typed_array_float64_array();
  require_es_typed_array_int8_array();
  require_es_typed_array_int16_array();
  require_es_typed_array_int32_array();
  require_es_typed_array_uint8_array();
  require_es_typed_array_uint8_clamped_array();
  require_es_typed_array_uint16_array();
  require_es_typed_array_uint32_array();
  require_es_typed_array_copy_within();
  require_es_typed_array_every();
  require_es_typed_array_fill();
  require_es_typed_array_filter();
  require_es_typed_array_find();
  require_es_typed_array_find_index();
  require_es_typed_array_for_each();
  require_es_typed_array_from();
  require_es_typed_array_includes();
  require_es_typed_array_index_of();
  require_es_typed_array_iterator();
  require_es_typed_array_join();
  require_es_typed_array_last_index_of();
  require_es_typed_array_map();
  require_es_typed_array_of();
  require_es_typed_array_reduce();
  require_es_typed_array_reduce_right();
  require_es_typed_array_reverse();
  require_es_typed_array_slice();
  require_es_typed_array_some();
  require_es_typed_array_sort();
  require_es_typed_array_to_string();
  require_es_weak_map();
  require_es_weak_set();

  // src/index.build.ts
  var import_ios_polyfill_promise = __toESM(require_src(), 1);
  var import_runtime6 = __toESM(require_runtime(), 1);

  // ../lynx-runtime-shared/dist/nativeGlobal.js
  var _global = function() {
    return this || (0, eval)("this");
  }();
  var nativeGlobal_default = _global;

  // ../lynx-runtime-shared/dist/ttConsole.js
  function createSharedConsole(runtimeId) {
    return nativeConsole;
  }
  var _global2 = function() {
    return this || (0, eval)("this");
  }();
  var groupConsole = createSharedConsole("groupId:".concat(_global2.groupId || "\
-1"));
  var ttConsole_default = true ? groupConsole : nativeConsole;

  // ../lynx-runtime-shared/dist/utils.js
  function getDataType(data) {
    const type = typeof data;
    if (type !== "object")
      return type;
    if (Array.isArray(data))
      return "array";
    if (data == null)
      return "null";
    if (data instanceof Date)
      return "date";
    if (data instanceof RegExp)
      return "regExp";
    return "object";
  }
  function isString(val) {
    return typeof val === "string";
  }
  function isObject(val) {
    return getDataType(val) === "object";
  }
  function isFunction(obj) {
    const dataType = getDataType(obj);
    return dataType === "function";
  }
  function isError(o) {
    switch (Object.prototype.toString.call(o)) {
      case "[object Error]":
        return true;
      case "[object Exception]":
        return true;
      case "[object DOMException]":
        return true;
      default:
        return isInstanceOf(o, Error);
    }
  }
  function isInstanceOf(o, base) {
    try {
      return o instanceof base;
    } catch (_e) {
      return false;
    }
  }
  function noop() {
  }

  // src/common/ttConsole.ts
  var ttConsole_default2 = ttConsole_default;

  // src/modules/report/errors.ts
  var BaseError = class extends Error {
    constructor(message, stack) {
      super(message);
      if (stack) {
        this.stack = stack;
      }
    }
  };
  var InternalError = class extends BaseError {
    constructor() {
      super(...arguments);
      this.kind = "INTERNAL_ERROR";
    }
  };
  var UserError = class extends BaseError {
    constructor() {
      super(...arguments);
      this.kind = "USER_ERROR";
    }
  };
  var UserRuntimeError = class extends UserError {
    constructor() {
      super(...arguments);
      this.name = "USER_RUNTIME_ERROR";
    }
  };
  var InternalRuntimeError = class extends InternalError {
    constructor() {
      super(...arguments);
      this.name = "INTERNAL_RUNTIME_ERROR";
    }
  };
  var InvokeError = class extends InternalError {
    constructor() {
      super(...arguments);
      this.name = "INVOKE_ERROR";
    }
  };

  // src/common/constants.ts
  var DEFAULT_ENTRY = "__Card__";
  var APP_SERVICE_NAME = "app-service.js";
  var SOURCE_MAP_RELEASE_ERROR_NAME = "LynxGetSourceMapReleaseError";
  var LYNX_CORE = {
    filename: "lynx_core",
    slot: "ad973fcbe989fb72d0caeb85984eaa7d2105388e",
    release: "unknown_version"
  };

  // src/modules/sharedData/ShareDataSubject.ts
  var ShareDataSubject = class {
    constructor() {
      /**
       * @type {Observer[]} List of subscribers.
       *
       */
      this.observersFunc = [];
    }
    /**
     * The subscription management methods.
     */
    registerObserver(observer) {
      const isExist = this.observersFunc.includes(observer);
      if (isExist) {
        return ttConsole_default2.log("Subject: Observer has been attached alrea\
dy.");
      }
      this.observersFunc.push(observer);
    }
    removeObserver(observer) {
      const observerIndex = this.observersFunc.indexOf(observer);
      if (observerIndex === -1) {
        return ttConsole_default2.log("Subject: Nonexistent observer.");
      }
      this.observersFunc.splice(observerIndex, 1);
    }
    notifyDataChange(value) {
      this.observersFunc.forEach((toObserver) => {
        if (typeof toObserver === "function") {
          try {
            toObserver(value);
          } catch (error) {
            ttConsole_default2.log(
              "SharedData change and notifyDataChange error info:" + error
            );
          }
        }
      });
    }
  };

  // src/common/nativeGlobal.ts
  nativeGlobal_default.multiApps = {};
  nativeGlobal_default.currentAppId = "";
  nativeGlobal_default.globComponentRegistPath = "";
  nativeGlobal_default.sharedData = {};
  nativeGlobal_default.globDynamicComponentEntry = DEFAULT_ENTRY;
  nativeGlobal_default.shareDataSubject = new ShareDataSubject();
  nativeGlobal_default.TaroLynx = {};
  nativeGlobal_default.bundleSupportLoadScript = true;
  var { loadScript } = nativeGlobal_default;
  var nativeGlobal_default2 = nativeGlobal_default;

  // src/common/log.ts
  var isNativeConsoleHasALog;
  function alog(str) {
    if (true) {
      return;
    }
    if (isNativeConsoleHasALog === void 0) {
      isNativeConsoleHasALog = typeof ttConsole_default2.alog === "function";
    }
    if (isNativeConsoleHasALog) {
      ttConsole_default2.alog("[LynxJSSDK]" + str);
    }
  }

  // src/common/version.ts
  var numberRegExp = /\d+/;
  var Version = class _Version {
    // version: major.minor.revision.build
    constructor(version) {
      this.major = 0;
      this.minor = 0;
      this.revision = 0;
      this.build = 0;
      version = String(version);
      [
        this.major = 0,
        this.minor = 0,
        this.revision = 0,
        this.build = 0
      ] = version.split(".").map((v) => {
        const result = numberRegExp.exec(v);
        if (result && result.length > 0) {
          return +result[0];
        }
        return 0;
      });
    }
    /**
     * Greater Than
     * @param version the version to be compared
     * @returns this > version
     */
    gt(version) {
      if (typeof version === "string") {
        version = new _Version(version);
      }
      if (this.major > version.major) {
        return true;
      } else if (this.major < version.major) {
        return false;
      }
      if (this.minor > version.minor) {
        return true;
      } else if (this.minor < version.minor) {
        return false;
      }
      if (this.revision > version.revision) {
        return true;
      } else if (this.revision < version.revision) {
        return false;
      }
      if (this.build > version.build) {
        return true;
      } else if (this.build < version.build) {
        return false;
      }
      return false;
    }
    /**
     * EQual
     * @param version the version to be compared
     * @returns this == version
     */
    eq(version) {
      if (typeof version === "string") {
        version = new _Version(version);
      }
      return this.major === version.major && this.minor === version.minor && this.
      revision === version.revision && this.build === version.build;
    }
    /**
     * Less Than
     * @param version the version to be compared
     * @returns this < version
     */
    lt(version) {
      if (this.eq(version)) {
        return false;
      }
      return !this.gt(version);
    }
    /**
     * Greater Than or Equal
     * @param version the version to be compared
     * @returns this >= version
     */
    gte(version) {
      return this.eq(version) || this.gt(version);
    }
    /**
     * Less Than or Equal
     * @param version the version to be compared
     * @returns this <= version
     */
    lte(version) {
      return this.eq(version) || this.lt(version);
    }
  };
  var version2_4 = new Version("2.4");
  var version2_7 = new Version("2.7");
  var version2_9 = new Version("2.9");
  var version2_12 = new Version("2.12");
  var version2_14 = new Version("2.14");

  // src/modules/report/report-error.ts
  function reportError(error, nativeApp, options) {
    const { originError, errorCode, errorLevel, runType = LYNX_CORE } = options !=
    null ? options : {};
    ttConsole_default2.error("The following error occurred in the JSRuntime:");
    ttConsole_default2.error("".concat(error == null ? void 0 : error.message, "\
\n").concat(error == null ? void 0 : error.stack));
    error.cause = isObject(error.cause) ? JSON.stringify(error.cause) : error.cause;
    try {
      nativeApp.reportException(error, __spreadProps(__spreadValues({}, runType),
      {
        buildVersion: "unknown_version",
        versionCode: "unknown_version",
        errorCode,
        errorLevel
      }));
    } catch (error2) {
      ttConsole_default2.error("reportError err:\n", error2);
    }
  }
  function legacyReportError(error, nativeApp, runType = LYNX_CORE, originError, proxy) {
    return reportError(error, nativeApp, {
      runType,
      originError,
      __sourcemap__release__: proxy.__sourcemap__release__
    });
  }

  // src/modules/report/wrapper.ts
  function wrapUserFunction(desc, instance, callback, runType = LYNX_CORE) {
    if (!isFunction(callback))
      return noop;
    return wrapFunction("USER_ERROR", desc, callback, instance, runType);
  }
  function wrapFunction(errorKind = "INTERNAL_ERROR", desc, callback, instance, runType) {
    return function wrapFunctionInner(...args) {
      try {
        return callback.apply(this, args);
      } catch (error) {
        const message = "".concat(desc, " \n").concat(error.message);
        if (callback.name !== "onError" && typeof instance.onError === "function") {
          instance.onError(
            "Card ".concat(callback.name, " exec error:").concat(message, "\n").
            concat(error.stack),
            error
          );
        }
        const err = errorKind === "INTERNAL_ERROR" ? new InternalRuntimeError(message,
        error.stack) : new UserRuntimeError(message, error.stack);
        ttConsole_default2.log("wrapError-".concat(desc), err);
        reportError(err, instance._nativeApp, {
          runType,
          __sourcemap__release__: instance.__sourcemap__release__,
          getSourceMapRelease: instance.getSourceMapRelease
        });
      }
    };
  }
  function wrapInnerFunction(desc, instance, callback, runType = LYNX_CORE) {
    if (!isFunction(callback))
      return noop;
    return wrapFunction("INTERNAL_ERROR", desc, callback, instance, runType);
  }

  // src/modules/report/reporter.ts
  var Reporter = class {
    constructor(getApp, getNativeApp) {
      this.getApp = getApp;
      this.getNativeApp = getNativeApp;
      // /**
      //  * key url -> value sourcemap
      //  * support different sourcemap for external js
      //  */
      // sourcemaps: Record<string, string> = {};
      /**
       * Set sourcemap release with a newly thrown error
       * @param {Error} error
       * The error thrown from the file that wants to set sourcemap release.
       * The top frame of `error.stack` **must be** the filename.
       * The `error.name` **must be** `'LynxGetSourceMapReleaseError'`.
       * The `error.message` **must be** the sourcemap release.
       *
       * @example
       * (function () {
       *   try {
       *     throw new Error(sourcemapRelease);
       *   } catch (e) {
       *     e.name = 'LynxGetSourceMapReleaseError';
       *     tt.setSourceMapRelease(e);
       *   }
       * })()
       */
      this.setSourceMapRelease = (error) => {
        if (isError(error) && error.name === BaseApp.kGetSourceMapReleaseErrorName &&
        isString(error.message) && isString(error.stack)) {
          this.getNativeApp().__SetSourceMapRelease({
            name: error.name,
            message: error.message,
            stack: error.stack
          });
          return;
        }
        alog("setSourceMapRelease failed with error: ".concat(JSON.stringify(error)));
      };
      this.getSourceMapRelease = (url) => {
        let ret = this.getNativeApp().__GetSourceMapRelease(url);
        if (!ret) {
          ret = this.getNativeApp().__GetSourceMapRelease(
            BaseApp.kDefaultSourceMapURL
          );
        }
        return ret;
      };
      this.getApp = getApp;
      this.getNativeApp = getNativeApp;
    }
    rebind(getApp) {
      this.getApp = getApp;
    }
  };

  // src/modules/animation/animation.ts
  var _Animation = class _Animation {
    constructor(effect) {
      this.effect = effect;
      this.id = "__lynx-inner-js-animation-" + _Animation.count++;
    }
    cancel() {
      this.effect.target.cancelAnimate(this);
    }
    pause() {
      this.effect.target.pauseAnimate(this);
    }
    play() {
      this.effect.target.playAnimate(this);
    }
  };
  _Animation.count = 0;
  var Animation = _Animation;

  // src/modules/animation/effect.ts
  var KeyframeEffect = class {
    constructor(target, keyframes, options) {
      this.target = target;
      this.keyframes = keyframes;
      this.options = options;
    }
  };
  var KeyframeEffectV2 = class {
    constructor(keyframes, options) {
      this.keyframes = keyframes;
      this.options = options;
    }
  };

  // src/modules/animation/animationV2.ts
  var AnimationV2 = class {
    constructor(id, keyframes, options) {
      this.id = id;
      this.effect = new KeyframeEffectV2(keyframes, options);
    }
  };

  // src/modules/element/element.ts
  var Element = class {
    constructor(root, id, lynxProxy) {
      this._root = root;
      this._idSelector = "#" + id;
      this._lynx = lynxProxy;
      this._element = void 0;
    }
    ensureElement() {
      if (!this._element) {
        this._element = this._lynx.createElement(this._root, this._idSelector);
      }
    }
    // keyframes: see https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Keyframe_Formats
    //  Either an array of keyframe objects, or a keyframe object whose property are arrays of values to iterate over. See Keyframe Formats for more details.
    //
    // timingOptions: see https://developer.mozilla.org/en-US/docs/Web/API/Element/animate
    //  id Optional: A property unique to animate(): a DOMString with which to reference the animation.
    //  delay Optional: The number of milliseconds to delay the start of the animation. Defaults to 0.
    //  direction Optional: Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to "normal".
    //  duration Optional: The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.
    //  easing Optional: The rate of the animation's change over time. Accepts the pre-defined values "linear", "ease", "ease-in", "ease-out", and "ease-in-out", or a custom "cubic-bezier" value like "cubic-bezier(0.42, 0, 0.58, 1)". Defaults to "linear".
    //  endDelay Optional: The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0.
    //  fill Optional: Dictates whether the animation's effects should be reflected by the element(s) prior to playing ("backwards"), retained after the animation has completed playing ("forwards"), or both. Defaults to "none".
    //  iterationStart Optional: Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.
    // iterations Optional: The number of times the animation should repeat. Defaults to 1, and can also take a value of Infinity to make it repeat for as long as the element exists.
    animate(keyframes, timingOptions) {
      this.ensureElement();
      let ani = new Animation(new KeyframeEffect(this, keyframes, timingOptions));
      this._element.animate(0, ani.id, keyframes, timingOptions);
      return ani;
    }
    playAnimate(ani) {
      this._element.animate(1, ani.id, void 0, void 0);
    }
    pauseAnimate(ani) {
      this._element.animate(2, ani.id, void 0, void 0);
    }
    cancelAnimate(ani) {
      this._element.animate(3, ani.id, void 0, void 0);
    }
    finishAnimate(ani) {
      this._element.animate(4, ani.id, void 0, void 0);
    }
    setProperty(propsObj, propsVal) {
      this.ensureElement();
      if (typeof propsObj === "string" && typeof propsVal === "string") {
        this._element.setProperty({
          [propsObj]: propsVal
        });
      } else if (typeof propsObj === "object") {
        this._element.setProperty(propsObj);
      } else {
        throw new Error(
          "setProperty's param must be string or object. While current type is ".
          concat(typeof propsObj, " and ").concat(typeof propsVal, ".")
        );
      }
    }
  };

  // src/modules/element/index.ts
  var element_default = Element;

  // src/modules/selectorQuery/SelectorQuery.ts
  var SelectorQuery = class _SelectorQuery {
    constructor(component, taskQueue, proxy) {
      this._component = component;
      this._taskQueue = taskQueue;
      this._native_proxy = proxy;
      this._fire_immediately = false;
      this._root_unique_id = void 0;
    }
    static fromQuery(prevQuery, component) {
      return new _SelectorQuery(
        component != null ? component : prevQuery._component,
        prevQuery._taskQueue.slice(),
        prevQuery._native_proxy
      );
    }
    static newEmptyQuery(proxy, component) {
      return new _SelectorQuery(component != null ? component : "", [], proxy);
    }
    /**
     * According to `this._fire_immediately`,
     * either execute the query immediately or add it to the task queue of the SelectorQuery.
     * In the latter case, a new query is returned, and `this` is not modified.
     * @param task the task to commit
     */
    commitTask(task) {
      let new_query = _SelectorQuery.fromQuery(this, this._component);
      new_query._taskQueue.push(task);
      if (this._fire_immediately) {
        new_query.exec();
        return void 0;
      }
      return new_query;
    }
    in(component) {
      return component.createSelectorQuery(this);
    }
    /**
     * Selects a single node by CSS selector.
     * @param selector CSS selector
     */
    select(selector) {
      return new NodesRef(this, {
        type: 0 /* ID_SELECTOR */,
        identifier: selector,
        component_id: this._component,
        root_unique_id: this._root_unique_id,
        first_only: true
      });
    }
    /**
     * Selects all nodes satisfying CSS selector.
     * @param selector CSS selector
     */
    selectAll(selector) {
      return new NodesRef(this, {
        type: 0 /* ID_SELECTOR */,
        identifier: selector,
        component_id: this._component,
        root_unique_id: this._root_unique_id,
        first_only: false
      });
    }
    /**
     * Selects a single node as React ref.
     * When works as ReactRef, SelectorQuery should act like getNodeRef, which means:
     * 1. cascade query is disabled.
     * 2. tasks are executed immediately without calling exec().
     */
    selectReactRef(ref_string) {
      if (this._taskQueue.length) {
        const errorMessage = "selectReactRef() should be called before any other\
 selector query methods";
        nativeConsole.warn(errorMessage);
        const error = new Error(errorMessage);
        reportError(
          new InvokeError(errorMessage, error.stack),
          this._native_proxy.nativeApp
        );
        return;
      }
      this._fire_immediately = true;
      return new NodesRef(this, {
        type: 1 /* REF_ID */,
        identifier: ref_string,
        component_id: this._component,
        root_unique_id: this._root_unique_id,
        first_only: true
      });
    }
    /**
     * Select root node of the component.
     */
    selectRoot() {
      return this.select("");
    }
    /**
     * Selects a single node by element id.
     * When a touch event is triggered, the element id of the node is passed to the event handler as 'uid',
     * by which can a node be selected in its event handler.
     */
    selectUniqueID(uniqueId) {
      return new NodesRef(this, {
        type: 2 /* UNIQUE_ID */,
        identifier: uniqueId.toString(),
        component_id: this._component,
        root_unique_id: this._root_unique_id,
        first_only: true
      });
    }
    /**
     * Execute all tasks in the task queue.
     * When `this._fire_immediately` is set to true, this method is called automatically.
     */
    exec() {
      for (let i = 0; i < this._taskQueue.length; ++i) {
        this._taskQueue[i](this._native_proxy);
      }
    }
    setRoot(uniqueId) {
      this._root_unique_id = Number(uniqueId);
      return this;
    }
  };
  var NodesRef = class {
    constructor(selectorQuery, nodeSelectToken) {
      this._nodeSelectToken = nodeSelectToken;
      this._selectorQuery = selectorQuery;
    }
    invoke(options) {
      let errorStack;
      if (true) {
        errorStack = new Error("");
      }
      let task = (proxy) => {
        var _a3;
        let callback = (res) => {
          if (res.code === 0 /* SUCCESS */) {
            options.success && options.success(res.data);
          } else {
            if (options.fail) {
              options.fail(res);
            } else {
              if (true) {
                if (!proxy.lynx._switches.disableSelectorQueryWarningWhenFailed) {
                  const errorMessage = "Failed to exec createSelectorQuery().inv\
oke() on NodesRef ".concat(JSON.stringify(
                    this._nodeSelectToken
                  ), ". Add a fail callback to suppress this warning. Msg: ").concat(
                  JSON.stringify(
                    res
                  ));
                  nativeConsole.warn(errorMessage);
                  reportError(
                    new InvokeError(errorMessage, errorStack.stack),
                    proxy.nativeApp
                  );
                }
              }
            }
          }
        };
        if (!this._nodeSelectToken.first_only) {
          callback({
            code: 5 /* SELECTOR_NOT_SUPPORTED */,
            data: "selectAll not supported for invoke method"
          });
          return;
        }
        proxy.nativeApp.invokeUIMethod(
          this._nodeSelectToken.type,
          this._nodeSelectToken.identifier,
          this._nodeSelectToken.component_id,
          options.method,
          (_a3 = options.params) != null ? _a3 : {},
          callback,
          this._nodeSelectToken.root_unique_id
        );
      };
      return this._selectorQuery.commitTask(task);
    }
    path(cb) {
      let task = (proxy) => {
        let callback = (res) => {
          cb && cb(res.data, res.status);
        };
        proxy.nativeApp.getPathInfo(
          this._nodeSelectToken.type,
          this._nodeSelectToken.identifier,
          this._nodeSelectToken.component_id,
          this._nodeSelectToken.first_only,
          callback,
          this._nodeSelectToken.root_unique_id
        );
      };
      return this._selectorQuery.commitTask(task);
    }
    fields(fields, cb) {
      let task = (proxy) => {
        let callback = (res) => {
          if (fields.query) {
            const addQueryObject = (result) => {
              result.query = SelectorQuery.newEmptyQuery(proxy);
              result.query.setRoot(result.unique_id.toString());
              if (!fields.unique_id) {
                delete result.unique_id;
              }
            };
            if (this._nodeSelectToken.first_only) {
              let result = res.data;
              if (result) {
                addQueryObject(result);
              }
            } else {
              for (let result of res.data) {
                addQueryObject(result);
              }
            }
          }
          cb && cb(res.data, res.status);
        };
        let fields_array = [];
        for (let key in fields) {
          if (key == "query" && fields[key] == true && !fields.unique_id) {
            fields_array.push("unique_id");
            continue;
          }
          if (fields[key]) {
            fields_array.push(key);
          }
        }
        proxy.nativeApp.getFields(
          this._nodeSelectToken.type,
          this._nodeSelectToken.identifier,
          this._nodeSelectToken.component_id,
          this._nodeSelectToken.first_only,
          fields_array,
          callback,
          this._nodeSelectToken.root_unique_id
        );
      };
      return this._selectorQuery.commitTask(task);
    }
    animate(animations) {
      let animationsArray = [];
      if (Array.isArray(animations)) {
        animationsArray = animations;
      } else {
        animationsArray.push(animations);
      }
      let task = (proxy) => {
        animationsArray.forEach((animation) => {
          var _a3, _b2;
          proxy.nativeApp.animate(
            this._nodeSelectToken.type,
            this._nodeSelectToken.identifier,
            this._nodeSelectToken.component_id,
            0 /* START */,
            animation == null ? void 0 : animation.id,
            (_a3 = animation == null ? void 0 : animation.effect) == null ? void 0 :
            _a3.keyframes,
            (_b2 = animation == null ? void 0 : animation.effect) == null ? void 0 :
            _b2.options
          );
        });
      };
      return this._selectorQuery.commitTask(task);
    }
    animationOperate(operation, ids) {
      let idArray = [];
      if (Array.isArray(ids)) {
        idArray = ids;
      } else {
        idArray.push(ids);
      }
      let task = (proxy) => {
        idArray.forEach((id) => {
          proxy.nativeApp.animate(
            this._nodeSelectToken.type,
            this._nodeSelectToken.identifier,
            this._nodeSelectToken.component_id,
            operation,
            id,
            null,
            null
          );
        });
      };
      return this._selectorQuery.commitTask(task);
    }
    playAnimation(ids) {
      return this.animationOperate(1 /* PLAY */, ids);
    }
    pauseAnimation(ids) {
      return this.animationOperate(2 /* PAUSE */, ids);
    }
    cancelAnimation(ids) {
      return this.animationOperate(3 /* CANCEL */, ids);
    }
    finishAnimation(ids) {
      return this.animationOperate(4 /* FINISH */, ids);
    }
    setNativeProps(nativeProps) {
      let task = (proxy) => {
        proxy.nativeApp.setNativeProps(
          this._nodeSelectToken.type,
          this._nodeSelectToken.identifier,
          this._nodeSelectToken.component_id,
          this._nodeSelectToken.first_only,
          nativeProps,
          this._nodeSelectToken.root_unique_id
        );
      };
      return this._selectorQuery.commitTask(task);
    }
  };
  NodesRef.nodePool = {};

  // src/lynx/lynx.ts
  var _a, _b, _c;
  var _Lynx = class _Lynx {
    constructor(getNativeApp, getApp, Promise2, getNativeLynx) {
      this.getNativeApp = getNativeApp;
      this.getApp = getApp;
      this.Promise = Promise2;
      this.getNativeLynx = getNativeLynx;
      this.setTimeout = this.getApp().wrapReport(
        this.getNativeApp().setTimeout,
        "setTimeout Error"
      );
      this.setInterval = this.getApp().wrapReport(
        this.getNativeApp().setInterval,
        "setInterval Error"
      );
      this.clearInterval = this.getNativeApp().clearInterval;
      this.clearTimeout = this.getNativeApp().clearTimeout;
      this.resumeExposure = this.getApp()._apiList["resumeExposure"];
      this.requireModule = (path2, entryName2, options) => {
        if (this.requireModule.cache[path2]) {
          return this.requireModule.cache[path2];
        }
        const exports = this.getApp().requireModule(path2, entryName2, options);
        this.requireModule.cache[path2] = exports;
        return exports;
      };
      this.requireModuleAsync = (path2, callback) => {
        callback != null ? callback : callback = (error) => {
          if (!error) {
            return;
          }
          this.getApp().handleUserError(error);
        };
        if (this.requireModuleAsync.cache[path2]) {
          callback(null, this.requireModuleAsync.cache[path2]);
          return;
        }
        this.getApp().requireModuleAsync(path2, (error, exports) => {
          if (!error) {
            this.requireModuleAsync.cache[path2] = exports;
          }
          callback(error, exports);
        });
      };
      this.createElement = (rootId, id) => this.getNativeLynx().createElement(rootId,
      id);
      this.getElementById = (id) => {
        return new element_default("", id, this);
      };
      this.reportError = (error, options) => {
        let errorObj;
        if (isError(error)) {
          errorObj = error;
        } else {
          let message;
          if (typeof error !== "string") {
            message = JSON.stringify(error);
          } else {
            message = error;
          }
          errorObj = new Error(message);
        }
        const { level = "error" } = options || {};
        let errorLevel;
        switch (level) {
          case "error":
            errorLevel = 1 /* Error */;
            break;
          case "warning":
            errorLevel = 2 /* Warn */;
            break;
          case "fatal":
            errorLevel = 0 /* Fatal */;
            break;
          default:
            errorLevel = 1 /* Error */;
        }
        this.getApp().handleUserError(errorObj, void 0, errorLevel);
      };
      this.registerModule = (name, module2) => this.getApp().registerModule(name,
      module2);
      this.getJSModule = (name) => {
        return this.getApp().getJSModule(name);
      };
      this.getTextInfo = this.getApp()._apiList["getTextInfo"];
      this.addFont = (font, callback) => {
        if (!isObject(font)) {
          throw new Error("The first argument must be object type");
        }
        if (!isString(font["font-family"]) || !isString(font["src"])) {
          throw new Error("The font value must have font-family and src");
        }
        if (!isFunction(callback)) {
          throw new Error("The second argument must be function type");
        }
        this.getNativeLynx().addFont(font, callback);
      };
      this.stopExposure = this.getApp()._apiList["stopExposure"];
      this.setObserverFrameRate = this.getApp()._apiList["setObserverFrameRate"];
      this.performance = this.getApp().performance;
      this.beforePublishEvent = this.getApp()._aopManager._beforePublishEvent;
      // sessionStorage Api
      this.setSessionStorageItem = (key, value) => {
        this.dispatchSessionStorageEvent({
          type: "__SetSessionStorageItem" /* EVENT_SET_SESSION_STORAGE */,
          data: {
            key,
            value
          }
        });
      };
      this.getSessionStorageItem = (key, callback) => {
        this.getNativeApp().getSessionStorageItem(key, callback);
      };
      this.subscribeSessionStorage = (key, callback) => {
        let listenerId = _Lynx.__registerSharedDataCounter++;
        this.getNativeApp().subscribeSessionStorage(key, listenerId, callback);
        return listenerId;
      };
      this.unsubscribeSessionStorage = (key, listenerId) => {
        this.dispatchSessionStorageEvent({
          type: "__UnSubscribeSessionStorage" /* EVENT_UNSUBSCRIBE_SESSION_STORAGE */,
          data: {
            key,
            listenerId
          }
        });
      };
      this.getDevtool = this.getNativeLynx().getDevtool;
      this.getCoreContext = this.getNativeLynx().getCoreContext;
      this.getJSContext = this.getNativeLynx().getJSContext;
      this.getUIContext = this.getNativeLynx().getUIContext;
      this.getNative = this.getNativeLynx().getNative;
      this.getEngine = this.getNativeLynx().getEngine;
      this.getCustomSectionSync = this.getNativeLynx().getCustomSectionSync;
      this.accessibilityAnnounce = (_a = this.getNativeApp().nativeModuleProxy.LynxAccessibilityModule) ==
      null ? void 0 : _a.accessibilityAnnounce;
      this.requestResourcePrefetch = (_b = this.getNativeApp().nativeModuleProxy.
      LynxResourceModule) == null ? void 0 : _b.requestResourcePrefetch;
      this.cancelResourcePrefetch = (_c = this.getNativeApp().nativeModuleProxy.
      LynxResourceModule) == null ? void 0 : _c.cancelResourcePrefetch;
      this.setSharedData = (dataKey, dataVal) => {
        nativeGlobal_default2.sharedData[dataKey] = dataVal;
        let variable = {};
        variable[dataKey] = dataVal;
        nativeGlobal_default2.shareDataSubject.notifyDataChange(variable);
      };
      this.getSharedData = (dataKey) => nativeGlobal_default2.sharedData[dataKey];
      this.registerSharedDataObserver = (callback) => nativeGlobal_default2.shareDataSubject.
      registerObserver(callback);
      this.removeSharedDataObserver = (callback) => nativeGlobal_default2.shareDataSubject.
      removeObserver(callback);
      this.triggerLepusGlobalEvent = (event, params2) => this.getNativeApp().triggerLepusGlobalEvent(
      event, params2);
      // for reload
      this.reload = (value, callback) => {
        this.getNativeLynx().reload(value, callback);
      };
      this.fetchDynamicComponent = (url, options, callback, id) => this.getNativeLynx().
      fetchDynamicComponent(url, options, callback, id);
      // Wrapper QueryComponent to decide if component has loaded.
      this.QueryComponent = (source, callback) => {
        const innerInvokeCallback = () => {
          callback({
            code: 0,
            data: { url: source, sync: true, error_message: "", mode: "cache" },
            detail: { schema: source, cache: false, errMsg: "" }
          });
        };
        if (this.getApp().loadedDynamicComponentsSet.has(source)) {
          innerInvokeCallback();
          return;
        }
        const innerCallback = (result) => {
          if (result.__hasReady === true) {
            nativeGlobal_default2.loadDynamicComponent(this.getApp(), source);
            innerInvokeCallback();
          } else {
            callback(result);
          }
        };
        this.getNativeLynx().QueryComponent(source, innerCallback);
      };
      this.loadDynamicComponent = (idOrUrl, urlOrOptions, options = {}) => {
        return new this.Promise((resolve, reject) => {
          let ids = [];
          let url;
          if (Array.isArray(idOrUrl)) {
            ids = idOrUrl;
            url = urlOrOptions;
          } else if (typeof urlOrOptions === "string") {
            ids = [idOrUrl];
            url = urlOrOptions;
          } else {
            url = idOrUrl;
            options = urlOrOptions;
          }
          if (this.getApp().loadedDynamicComponentsSet.has(url)) {
            resolve({
              code: 0,
              data: { url, sync: false, error_message: "", mode: "normal" },
              detail: { schema: url, cache: false, errMsg: "" }
            });
            return;
          }
          this.getNativeLynx().fetchDynamicComponent(
            url,
            options,
            (res) => {
              if (res && res.code == 0) {
                resolve(res);
              } else {
                reject(res);
              }
            },
            ids
          );
        });
      };
      this.fetch = (input, init) => {
        return new this.Promise((resolve, reject) => {
          const request = new (this.getApp())._RequestClass(input, init);
          const signal = request.signal;
          if (signal.aborted) {
            return reject(signal.reason);
          }
          signal.addEventListener("abort", (event) => {
            reject(signal.reason);
          });
          const fetchArg = {
            method: request.method,
            url: request.url,
            origin: this.getNativeApp().__pageUrl,
            headers: Object.fromEntries(request.headers.entries()),
            body: request._arrayBuffer,
            lynxExtension: request.lynxExtension
          };
          const useStreaming = request.lynxExtension["useStreaming"];
          this.getApp().NativeModules.LynxFetchModule.fetch(
            fetchArg,
            (response) => {
              if (signal.aborted) {
                return;
              }
              try {
                const streamingBodyReceiver = new (this.getApp())._ReadableStreamClass();
                const resp = new (this.getApp())._ResponseClass(
                  useStreaming ? streamingBodyReceiver : response.body,
                  response
                );
                if (useStreaming) {
                  const id = resp.lynxExtension["streamingId"];
                  this.getApp().GlobalEventEmitter.addListener(
                    id,
                    (result) => {
                      const event = result.event;
                      if (event === "onData") {
                        streamingBodyReceiver.onData(result.data);
                      } else if (event === "onEnd") {
                        streamingBodyReceiver.onEnd();
                      } else if (event === "onError") {
                        streamingBodyReceiver.onError(result.error);
                      }
                    }
                  );
                }
                resolve(resp);
              } catch (_) {
                reject(new TypeError(response.statusText));
              }
            },
            (error) => {
              if (signal.aborted) {
                return;
              }
              reject(new TypeError(error.message));
            }
          );
        });
      };
      this.createSelectorQuery = (component) => {
        return SelectorQuery.newEmptyQuery(
          {
            nativeApp: this.getNativeApp(),
            lynx: this
          },
          component
        );
      };
      this.requestAnimationFrame = (callback) => this.getNativeApp().requestAnimationFrame(
      callback);
      this.cancelAnimationFrame = (animationId) => this.getNativeApp().cancelAnimationFrame(
      animationId);
      this.loadScript = this.getNativeLynx().loadScript;
      this.fetchBundle = this.getNativeLynx().fetchBundle;
      this.__addReporterCustomInfo = (info) => {
        this.getNativeApp().__addReporterCustomInfo(info);
      };
      this.getModuleLoader = () => {
        return nativeGlobal_default2["napiRestrictedLoader" + this.getApp().nativeAppId];
      };
      this.createAnimation = (id, keyframes, options) => {
        return new AnimationV2(id, keyframes, options);
      };
      this.init(void 0);
    }
    rebind(getApp) {
      this.init(getApp);
    }
    init(getApp) {
      if (getApp) {
        this.getApp = getApp;
        this.__globalProps = this.getNativeLynx().__globalProps || {};
        this.__presetData = this.getNativeLynx().__presetData || {};
      } else {
        const cache = {};
        this.requireModule.cache = cache;
        this.requireModuleAsync.cache = cache;
        this.__globalProps = this.getNativeLynx().__globalProps || {};
        this.__presetData = this.getNativeLynx().__presetData || {};
        this._switches = {};
      }
    }
    dispatchSessionStorageEvent(event) {
      var eventResult = this.getCoreContext().dispatchEvent(event);
      if (eventResult == 0) {
        return;
      }
      this.getJSContext().dispatchEvent(event);
    }
    queueMicrotask(callback) {
      this.getNativeLynx().queueMicrotask(callback);
    }
  };
  _Lynx.__registerSharedDataCounter = 0;
  var Lynx = _Lynx;

  // src/modules/event/eventEmitter.ts
  var EventEmitter = class {
    constructor(callLynxSetModule) {
      this._internal_callLynxSetModule = callLynxSetModule;
      this._events = /* @__PURE__ */ new Map();
    }
    getEventsSize(eventType) {
      var _a3;
      return (_a3 = this._events.get(eventType)) == null ? void 0 : _a3.length;
    }
    setCallLynxSetModule(callLynxSetModule) {
      this._internal_callLynxSetModule = callLynxSetModule;
    }
    addListener(eventName, listener, context) {
      const event = this._events.get(eventName);
      if (eventName == "keyboardstatuschanged") {
        if (this._internal_callLynxSetModule) {
          this._internal_callLynxSetModule("switchKeyBoardDetect", [true]);
        }
      }
      if (event) {
        event.push({
          listener,
          context
        });
      } else {
        this._events.set(eventName, [
          {
            listener,
            context
          }
        ]);
      }
    }
    removeListener(eventName, listener) {
      if (typeof listener !== "function") {
        throw new Error("removeListener only takes instances of Function");
      }
      const events = this._events.get(eventName);
      let index = 0;
      if (Array.isArray(events)) {
        const flag = events.some((item) => {
          if (listener === item.listener) {
            return true;
          }
          index++;
        });
        flag && events.splice(index, 1);
      }
      if (eventName == "keyboardstatuschanged") {
        if (this._internal_callLynxSetModule) {
          this._internal_callLynxSetModule("switchKeyBoardDetect", [false]);
        }
      }
    }
    emit(eventName, data) {
      const events = this._events.get(eventName);
      if (Array.isArray(events)) {
        events.forEach((item) => {
          const { listener, context } = item;
          if (typeof listener === "function") {
            listener.apply(context || this, data);
          }
        });
      }
    }
    removeAllListeners(eventName) {
      if (typeof eventName === "string") {
        this._events.delete(eventName);
        return;
      }
      this._events = /* @__PURE__ */ new Map();
    }
    trigger(eventName, params2) {
      const events = this._events.get(eventName);
      if (Array.isArray(events)) {
        if (typeof params2 === "string") {
          params2 = JSON.parse(params2);
        }
        events.forEach((item) => {
          const { listener, context } = item;
          if (typeof listener === "function") {
            listener.call(context || this, params2);
          }
        });
      }
    }
    toggle(eventName, ...data) {
      this.emit(eventName, data);
    }
  };
  function createEventEmitter() {
    return new EventEmitter();
  }

  // src/modules/event/aop.ts
  var AopManager = class {
    constructor() {
      this._beforePublishEvent = new BeforePublishEvent();
    }
  };
  var BeforePublishEvent = class extends EventEmitter {
    add(eventName, callback, context) {
      super.addListener(eventName, callback, context);
      return this;
    }
    remove(eventName, callback) {
      super.removeListener(eventName, callback);
      return this;
    }
  };

  // src/modules/event/index.ts
  var event_default = EventEmitter;

  // src/modules/nativeModules/textInfo.ts
  var TextInfoManager = class {
    constructor(nativeModules) {
      this._textInfoModule = void 0;
      this.getTextInfo = (param, options) => {
        if (this._textInfoModule === void 0) {
          this._textInfoModule = this._nativeModules.LynxTextInfoModule;
        }
        if (this._textInfoModule && this._textInfoModule.getTextInfo) {
          return this._textInfoModule.getTextInfo(param, options);
        } else {
          return {
            width: param.length
          };
        }
      };
      this._nativeModules = nativeModules;
    }
  };

  // src/modules/nativeModules/exposure.ts
  var ExposureManager = class {
    constructor(nativeModules) {
      this.resumeExposure = () => {
        this._exposureModule.resumeExposure();
      };
      this.stopExposure = (options) => {
        this._exposureModule.stopExposure(options);
      };
      this.setObserverFrameRate = (options) => {
        this._exposureModule.setObserverFrameRate(options);
      };
      this._nativeModules = nativeModules;
      this._exposureModule = this._nativeModules.LynxExposureModule;
    }
  };

  // src/modules/nativeModules/intersectionObserver.ts
  var IntersectionObservationTarget = class {
    constructor(selector, callback) {
      this._selector = selector;
      this._callback = callback;
    }
    invokeCallback(data) {
      this._callback(data);
    }
  };
  var IntersectionObserver = class {
    constructor(id, intersectionObserverModule, manager) {
      this._id = id;
      this._intersectionObserverModule = intersectionObserverModule;
      this._manager = manager;
      this._observationTargets = [];
      this._defaultMargins = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };
    }
    relativeTo(selector, margins) {
      this._intersectionObserverModule.relativeTo(
        this._id,
        selector,
        margins || this._defaultMargins
      );
      return this;
    }
    relativeToViewport(margins) {
      this._intersectionObserverModule.relativeToViewport(
        this._id,
        margins || this._defaultMargins
      );
      return this;
    }
    relativeToScreen(margins) {
      this._intersectionObserverModule.relativeToScreen(
        this._id,
        margins || this._defaultMargins
      );
      return this;
    }
    observe(selector, callback) {
      this._observationTargets.push(
        new IntersectionObservationTarget(selector, callback)
      );
      this._intersectionObserverModule.observe(
        this._id,
        selector,
        this._observationTargets.length - 1
      );
    }
    disconnect() {
      this._intersectionObserverModule.disconnect(this._id);
      this._manager.removeObserver(this._id);
    }
    invokeCallback(callbackId, data) {
      if (callbackId < this._observationTargets.length) {
        this._observationTargets[callbackId].invokeCallback(data);
      }
    }
  };
  var IntersectionObserverManager = class {
    constructor(nativeModules) {
      this._nativeModules = nativeModules;
      this._observerId = 0;
      this._observers = {};
      this._defaultOptions = {
        thresholds: [0],
        initialRatio: 0,
        observeAll: false
      };
    }
    createIntersectionObserver(componentId, options) {
      let intersectionObserverModule = this._nativeModules["IntersectionObserver\
Module"];
      const observer = new IntersectionObserver(
        this._observerId,
        intersectionObserverModule,
        this
      );
      this._observers[this._observerId] = observer;
      intersectionObserverModule.createIntersectionObserver(
        this._observerId,
        componentId,
        options || this._defaultOptions
      );
      this._observerId++;
      return observer;
    }
    getObserver(observerId) {
      return this._observers[observerId];
    }
    removeObserver(observerId) {
      this._observers[observerId] = null;
    }
  };

  // src/modules/performance/performanceObserver.ts
  var ListenerKeys = {
    onPerformance: "lynx.performance.onPerformanceEvent"
  };
  var PerformanceObserver = class {
    constructor(emitter, callback) {
      this._emitter = emitter;
      this._onPerformance = callback;
      this._observedNames = [];
    }
    observe(names) {
      if (this._observedNames.length > 0) {
        return;
      }
      this._observedNames = names;
      this._emitter.addListener(
        ListenerKeys.onPerformance,
        this.onPerformanceEvent.bind(this)
      );
    }
    disconnect() {
      this._observedNames = [];
      this._emitter.removeListener(
        ListenerKeys.onPerformance,
        this.onPerformanceEvent.bind(this)
      );
    }
    onPerformanceEvent(entry) {
      if (this._observedNames.length === 0) {
        return;
      }
      let entryName2 = entry.entryType + "." + entry.name;
      if (this._observedNames.includes(entryName2) || this._observedNames.includes(
      entry.entryType)) {
        this._onPerformance(entry);
      }
    }
  };

  // src/modules/performance/performance.ts
  var ListenerKeys2 = {
    onSetup: "lynx.performance.timing.onSetup",
    onUpdate: "lynx.performance.timing.onUpdate"
  };
  var Performance = class {
    constructor(emitter, nativeApp) {
      this._emitter = emitter;
      this._generatePipelineOptions = nativeApp.generatePipelineOptions;
      this._onPipelineStart = nativeApp.onPipelineStart;
      this._markTiming = nativeApp.markPipelineTiming;
      this._profileStart = nativeApp.profileStart;
      this._profileEnd = nativeApp.profileEnd;
      this._profileMark = nativeApp.profileMark;
      this._profileFlowId = nativeApp.profileFlowId;
      this._isProfileRecording = nativeApp.isProfileRecording;
      this._bindPipelineIdWithTimingFlag = nativeApp.bindPipelineIdWithTimingFlag;
    }
    profileStart(traceName, option) {
      this._profileStart(traceName, option);
    }
    profileEnd() {
      this._profileEnd();
    }
    profileMark(traceName, option) {
      this._profileMark(traceName, option);
    }
    profileFlowId() {
      return this._profileFlowId();
    }
    createObserver(callback) {
      return new PerformanceObserver(this._emitter, callback);
    }
    isProfileRecording() {
      return this._isProfileRecording();
    }
    addTimingListener(listener) {
      this._emitter.addListener(ListenerKeys2.onSetup, listener.onSetup, listener);
      this._emitter.addListener(
        ListenerKeys2.onUpdate,
        listener.onUpdate,
        listener
      );
    }
    removeTimingListener(listener) {
      this._emitter.removeListener(ListenerKeys2.onSetup, listener.onSetup);
      this._emitter.removeListener(ListenerKeys2.onUpdate, listener.onUpdate);
    }
    removeAllTimingListener() {
      this._emitter.removeAllListeners(ListenerKeys2.onSetup);
      this._emitter.removeAllListeners(ListenerKeys2.onUpdate);
    }
    _initializeAndStartPipeline() {
      const pipelineOptions = this._generatePipelineOptions();
      if (pipelineOptions) {
        this._onPipelineStart(pipelineOptions.pipelineID);
      }
      return pipelineOptions;
    }
    _checkAndBindTimingFlag(pipelineOptions, data) {
      if (!pipelineOptions) {
        return;
      }
      const PerformanceTimingFlag = "__lynx_timing_flag";
      if (data[PerformanceTimingFlag]) {
        this._bindPipelineIdWithTimingFlag(
          pipelineOptions.pipelineID,
          data[PerformanceTimingFlag]
        );
        this._markTiming(pipelineOptions.pipelineID, "update_set_state_trigger");
        pipelineOptions.needTimestamps = true;
      }
    }
  };

  // src/modules/performance/index.ts
  var performance_default = Performance;

  // src/common/jsbi.ts
  var jsbi_default = nativeGlobal_default2.LynxJSBI;

  // src/util/cachedFunctionProxy.ts
  var CachedFunctionProxy = class _CachedFunctionProxy {
    constructor(obj) {
      this._cachedFunctions = {};
      for (const key in obj) {
        Object.defineProperty(this, key, {
          get() {
            if (this._cachedFunctions[key]) {
              return this._cachedFunctions[key];
            }
            const value = obj[key];
            if (typeof value === "function") {
              this._cachedFunctions[key] = value;
            }
            return value;
          }
        });
      }
    }
    static create(obj) {
      return new _CachedFunctionProxy(obj);
    }
  };

  // src/util/setup-promise.ts
  function getPromiseMaybePolyfill(setTimeout2, onUnhandled, clearTimeout, queueMicrotask = void 0, enableMicrotaskPromisePolyfill = false) {
    const { getPromise } = nativeGlobal_default2;
    if (typeof getPromise === "function") {
      const nextTick = enableMicrotaskPromisePolyfill ? queueMicrotask : (fn) => setTimeout2(
      fn, 0);
      return getPromise({ nextTick, setTimeout: setTimeout2, onUnhandled, clearTimeout });
    } else {
      return nativeGlobal_default2.Promise;
    }
  }

  // src/modules/fetch/TextDecoder.ts
  var TextDecoder = class {
    constructor() {
    }
    decode(buffer) {
      if (buffer.byteLength === 0) {
        return "";
      }
      if (buffer instanceof DataView) {
        buffer = buffer.buffer.slice(
          buffer.byteOffset,
          buffer.byteOffset + buffer.byteLength
        );
      } else if (ArrayBuffer.isView(buffer)) {
        buffer = buffer.buffer;
      }
      return globalThis.TextCodecHelper.decode(buffer);
    }
    encodeInto() {
      throw TypeError("TextEncoder().encodeInto not supported");
    }
    get encoding() {
      return "utf-8";
    }
    get fatal() {
      return false;
    }
    get ignoreBOM() {
      return true;
    }
  };

  // src/modules/fetch/TextEncoder.ts
  var TextEncoder = class {
    constructor() {
    }
    encode(str) {
      return new Uint8Array(globalThis.TextCodecHelper.encode(str));
    }
    encodeInto() {
      throw TypeError("TextEncoder().encodeInto not supported");
    }
    get encoding() {
      return "utf-8";
    }
  };

  // src/modules/fetch/BodyMixin.ts
  var BodyMixin = class _BodyMixin {
    constructor() {
      this._arrayBuffer = new ArrayBuffer(0);
      this._bodyStream = null;
      this._bodyUsed = false;
    }
    safeUseBody(use) {
      if (this._bodyUsed) {
        return void 0;
      }
      const ret = use(this._arrayBuffer);
      this._bodyUsed = true;
      this._arrayBuffer = null;
      return ret;
    }
    cloneArrayBuffer(src) {
      return src.slice(0);
    }
    setBody(body) {
      if (body instanceof _BodyMixin) {
        if (body._bodyUsed || body._bodyStream) {
          throw new Error("body used, or try to copy body stream");
        }
        this._arrayBuffer = this.cloneArrayBuffer(body._arrayBuffer);
      } else {
        if (body instanceof ArrayBuffer) {
          this._arrayBuffer = this.cloneArrayBuffer(body);
        } else if (body instanceof DataView) {
          this._arrayBuffer = this.cloneArrayBuffer(
            body.buffer.slice(body.byteOffset, body.byteOffset + body.byteLength)
          );
        } else if (ArrayBuffer.isView(body)) {
          this._arrayBuffer = this.cloneArrayBuffer(body.buffer);
        } else if (body) {
          this._arrayBuffer = new TextEncoder().encode(body.toString()).buffer;
        }
        if (globalThis.ReadableStream && body instanceof ReadableStream) {
          this._bodyStream = body;
        }
      }
    }
    arrayBuffer() {
      return Promise.resolve(this.safeUseBody((body) => body));
    }
    get body() {
      if (this._bodyUsed) {
        throw new Error("body used");
      }
      this._bodyUsed = true;
      return this._bodyStream;
    }
    text() {
      return Promise.resolve(
        this.safeUseBody((body) => new TextDecoder().decode(body))
      );
    }
    json() {
      return Promise.resolve(
        this.safeUseBody((body) => JSON.parse(new TextDecoder().decode(body)))
      );
    }
    // TODO(huzhanbo.luc): these APIs rely on foundamental types
    // which require extra works to support, we will support these
    // later when we have implemented these types.
    // blob(): Blob;
    // formData(): FormData;
    // cloneStream(): ReadableStream;
    get bodyUsed() {
      return this._bodyUsed;
    }
  };

  // src/modules/fetch/Headers.ts
  var _a2;
  var Headers2 = class _Headers {
    constructor(init) {
      this._headers_map = /* @__PURE__ */ new Map();
      this[_a2] = "Headers";
      if (init === null || typeof init === "number") {
        throw new TypeError("Headers init with null/number");
      }
      if (init instanceof _Headers) {
        for (const [key, value] of init) {
          this.append(key, value);
        }
      } else if (Array.isArray(init)) {
        init.forEach(([name, value]) => {
          this.append(name, Array.isArray(value) ? value.join(" ") : value);
        });
      } else if (init) {
        Object.getOwnPropertyNames(init).forEach((name) => {
          const value = init[name];
          this.append(name, Array.isArray(value) ? value.join(" ") : value);
        });
      }
    }
    [(_a2 = Symbol.toStringTag, Symbol.iterator)]() {
      return this.entries();
    }
    *keys() {
      for (const [key, value] of this._headers_map) {
        yield key;
      }
    }
    *values() {
      for (const [key, value] of this._headers_map) {
        yield value;
      }
    }
    *entries() {
      for (const entry of this._headers_map) {
        yield entry;
      }
    }
    /**
     * Returns a boolean stating whether a `Headers` object contains a certain header.
     */
    has(name) {
      return this._headers_map.has(name);
    }
    /**
     * Returns a `ByteString` sequence of all the values of a header with a given name.
     */
    get(name) {
      var _a3;
      return (_a3 = this._headers_map.get(name)) != null ? _a3 : null;
    }
    /**
     * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.
     */
    set(name, value) {
      this._headers_map.set(name, String(value));
    }
    /**
     * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.
     */
    append(name, value) {
      let resolvedValue = this.has(name) ? "".concat(this.get(name), ", ").concat(
      value) : value;
      this.set(name, resolvedValue);
    }
    /**
     * Deletes a header from the `Headers` object.
     */
    delete(name) {
      if (!this.has(name)) {
        return;
      }
      this._headers_map.delete(name);
    }
    /**
     * Traverses the `Headers` object,
     * calling the given callback for each header.
     */
    forEach(callback, thisArg) {
      for (const [name, value] of this.entries()) {
        callback.call(thisArg, value, name, this);
      }
    }
  };

  // src/modules/fetch/AbortController.ts
  var AbortSignal = class _AbortSignal extends event_default {
    get aborted() {
      return this._aborted;
    }
    get reason() {
      return this._reason;
    }
    constructor() {
      super();
      this._aborted = false;
    }
    get [Symbol.toStringTag]() {
      return "[object AbortSignal]";
    }
    dispatchEvent(event) {
      if (event.type === "abort") {
        this._aborted = true;
        this._reason = event.reason;
        if (typeof this.onabort === "function") {
          this.onabort.call(this, event);
        }
      }
      super.emit(event.type, event);
    }
    addEventListener(type, listener) {
      super.addListener(type, listener);
    }
    removeEventListener(type, listener) {
      super.removeListener(type, listener);
    }
    static __create() {
      return new _AbortSignal();
    }
  };
  var AbortController = class {
    get signal() {
      return this._signal;
    }
    constructor() {
      this._signal = AbortSignal.__create();
    }
    abort(reason) {
      let signalReason = reason;
      if (signalReason === void 0) {
        signalReason = new Error("This operation was aborted");
        signalReason.name = "AbortError";
      }
      const event = {
        type: "abort",
        reason: signalReason
      };
      this.signal.dispatchEvent(event);
    }
    get [Symbol.toStringTag]() {
      return "[object AbortController]";
    }
  };

  // src/modules/fetch/Request.ts
  function createRequestClass(Promise2) {
    return class Request extends BodyMixin {
      get url() {
        return this._url;
      }
      get headers() {
        return this._headers;
      }
      get method() {
        return this._method;
      }
      get signal() {
        return this._signal;
      }
      get lynxExtension() {
        return this._lynxExtension;
      }
      constructor(input, options) {
        super();
        options = options || {};
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }
          this._url = input.url;
          if (!options.headers) {
            this._headers = new Headers2(input.headers);
          }
          this._method = input.method;
          this._signal = input.signal;
          this.setBody(input._arrayBuffer);
        } else {
          this._url = String(input);
        }
        if (options.headers || !this.headers) {
          this._headers = new Headers2(options.headers);
        }
        this._method = options.method || this.method || "GET";
        this._method = this._method.toUpperCase();
        if ((this.method === "GET" || this.method === "HEAD") && options.body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        if (typeof options.signal !== "undefined") {
          this._signal = options.signal;
        }
        this._signal = this._signal || AbortSignal.__create();
        this._lynxExtension = options.lynxExtension || {};
        if (!this._headers.get("Content-Type")) {
          if (typeof options.body === "string") {
            this._headers.set("Content-Type", "text/plain;charset=UTF-8");
          } else if (globalThis.URLSearchParams && options.body instanceof URLSearchParams) {
            this._headers.set(
              "Content-Type",
              "application/x-www-form-urlencoded;charset=UTF-8"
            );
          } else if (options.body instanceof ArrayBuffer) {
          } else {
            this._headers.set("Content-Type", "text/plain;charset=UTF-8");
          }
        }
        this.setBody(options.body);
      }
      clone() {
        const cloned = new Request(this, {
          method: this.method
        });
        cloned.setBody(this);
        return cloned;
      }
    };
  }

  // src/modules/fetch/Response.ts
  function createResponseClass(Promise2) {
    return class Response extends BodyMixin {
      get url() {
        return this._url;
      }
      get status() {
        return this._status;
      }
      get statusText() {
        return this._statusText;
      }
      get ok() {
        return this._ok;
      }
      get headers() {
        return this._headers;
      }
      get lynxExtension() {
        return this._lynxExtension;
      }
      constructor(bodyInit, options) {
        super();
        options = options || {};
        this._status = options.status === void 0 ? 200 : options.status;
        if (this._status < 200 || this._status > 599) {
          throw new RangeError(
            "Failed to construct 'Response': The status provided (0) is outside \
the range [200, 599]."
          );
        }
        this._ok = this._status >= 200 && this._status < 300;
        this._statusText = options.statusText === void 0 ? "" : "" + options.statusText;
        this._headers = new Headers(options.headers);
        this._url = options.url || "";
        this._lynxExtension = options.lynxExtension || {};
        this.setBody(bodyInit);
      }
      clone() {
        const cloned = new Response(null, {
          status: this._status,
          statusText: this._statusText,
          headers: new Headers(this._headers),
          url: this._url
        });
        cloned.setBody(this);
        return cloned;
      }
    };
  }

  // src/modules/fetch/ReadableStream.ts
  function createReadableStreamClass(Promise2) {
    return class ReadableStream {
      constructor() {
        this.__dataReceived = [];
        this.__done = false;
        this.__cancelled = false;
        this.__locked = false;
        this.__eventCenter = new event_default();
      }
      onData(data) {
        if (this.__cancelled) {
          return;
        }
        this.__dataReceived.push(data);
        this.__eventCenter.emit("waitSignal", null);
      }
      onEnd() {
        this.__done = true;
        this.__eventCenter.emit("waitSignal", null);
      }
      onError(error) {
        this.__error = new Error(error);
        this.__eventCenter.emit("waitSignal", null);
      }
      processRead(resolve, reject) {
        if (this.__error) {
          return reject(this.__error);
        }
        if (this.__cancelled || this.__done && this.__dataReceived.length == 0) {
          return resolve({ done: true, value: void 0 });
        }
        if (this.__dataReceived.length > 0) {
          const currData = this.__dataReceived.shift();
          return resolve({ done: false, value: currData });
        }
        const waitSignal = () => {
          this.__eventCenter.removeListener("waitSignal", waitSignal);
          this.processRead(resolve, reject);
        };
        this.__eventCenter.addListener("waitSignal", waitSignal, this);
      }
      __read() {
        return new Promise2((resolve, reject) => {
          this.processRead(resolve, reject);
        });
      }
      get locked() {
        return this.__locked;
      }
      cancel(reason) {
        this.__cancelled = true;
        this.__dataReceived = null;
        this.__eventCenter.emit("waitSignal", null);
        return Promise2.resolve(reason);
      }
      getReader() {
        if (this.__locked) {
          return null;
        }
        this.__locked = true;
        return new ReadableStreamDefaultReader(this);
      }
    };
  }
  var ReadableStreamDefaultReader = class {
    constructor(stream) {
      this.__stream = stream;
    }
    cancel(reason) {
      return this.__stream.cancel(reason);
    }
    read() {
      return this.__stream.__read();
    }
  };

  // src/modules/fetch/URL.js
  function validateBaseUrl(url) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)*(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/.
    test(
      url
    );
  }
  var URL = class {
    constructor(url, base) {
      __publicField(this, "_url");
      __publicField(this, "_searchParamsInstance", null);
      let baseUrl = null;
      if (!base || validateBaseUrl(url)) {
        this._url = url;
        if (!this._url.endsWith("/")) {
          this._url += "/";
        }
      } else {
        if (typeof base === "string") {
          baseUrl = base;
          if (!validateBaseUrl(baseUrl)) {
            throw new TypeError("Invalid base URL: ".concat(baseUrl));
          }
        } else {
          baseUrl = base.toString();
        }
        if (baseUrl.endsWith("/")) {
          baseUrl = baseUrl.slice(0, baseUrl.length - 1);
        }
        if (!url.startsWith("/")) {
          url = "/".concat(url);
        }
        if (baseUrl.endsWith(url)) {
          url = "";
        }
        this._url = "".concat(baseUrl).concat(url);
      }
    }
    get href() {
      return this.toString();
    }
    get searchParams() {
      if (this._searchParamsInstance == null) {
        this._searchParamsInstance = new URLSearchParams();
      }
      return this._searchParamsInstance;
    }
    toJSON() {
      return this.toString();
    }
    toString() {
      if (this._searchParamsInstance === null) {
        return this._url;
      }
      const instanceString = this._searchParamsInstance.toString();
      const separator = this._url.indexOf("?") > -1 ? "&" : "?";
      return this._url + separator + instanceString;
    }
  };

  // src/modules/fetch/UrlSearchParamsPolyfill.js
  function URLSearchParamsPolyfill(self2) {
    "use strict";
    var _a3;
    const __URLSearchParams__ = "__URLSearchParams__";
    function URLSearchParamsPolyfill2(search) {
      search = search || "";
      if (search instanceof URLSearchParams) {
        search = search.toString();
      }
      this[__URLSearchParams__] = parseToDict(search);
    }
    const prototype = URLSearchParamsPolyfill2.prototype;
    prototype.append = function(name, value) {
      appendTo(this[__URLSearchParams__], name, value);
    };
    prototype["delete"] = function(name) {
      delete this[__URLSearchParams__][name];
    };
    prototype.get = function(name) {
      var dict = this[__URLSearchParams__];
      return this.has(name) ? dict[name][0] : null;
    };
    prototype.getAll = function(name) {
      var dict = this[__URLSearchParams__];
      return this.has(name) ? dict[name].slice(0) : [];
    };
    prototype.has = function(name) {
      return hasOwnProperty(this[__URLSearchParams__], name);
    };
    prototype.set = function set(name, value) {
      this[__URLSearchParams__][name] = ["" + value];
    };
    prototype.toString = function() {
      var dict = this[__URLSearchParams__], query = [], i, key, name, value;
      for (key in dict) {
        name = encode(key);
        for (i = 0, value = dict[key]; i < value.length; i++) {
          query.push(name + "=" + encode(value[i]));
        }
      }
      return query.join("&");
    };
    prototype.polyfill = true;
    prototype[Symbol.toStringTag] = "URLSearchParams";
    prototype.forEach = function(callback, thisArg) {
      var dict = parseToDict(this.toString());
      Object.getOwnPropertyNames(dict).forEach(function(name) {
        dict[name].forEach(function(value) {
          callback.call(thisArg, value, name, this);
        }, this);
      }, this);
    };
    prototype.sort = function() {
      var dict = parseToDict(this.toString()), keys = [], k, i, j;
      for (k in dict) {
        keys.push(k);
      }
      keys.sort();
      for (i = 0; i < keys.length; i++) {
        this["delete"](keys[i]);
      }
      for (i = 0; i < keys.length; i++) {
        var key = keys[i], values = dict[key];
        for (j = 0; j < values.length; j++) {
          this.append(key, values[j]);
        }
      }
    };
    prototype.keys = function() {
      var items = [];
      this.forEach(function(item, name) {
        items.push(name);
      });
      return makeIterator(items);
    };
    prototype.values = function() {
      var items = [];
      this.forEach(function(item) {
        items.push(item);
      });
      return makeIterator(items);
    };
    prototype.entries = function() {
      var items = [];
      this.forEach(function(item, name) {
        items.push([name, item]);
      });
      return makeIterator(items);
    };
    prototype[Symbol.iterator] = prototype.entries;
    Object.defineProperty(prototype, "size", {
      get: function() {
        var dict = parseToDict(this.toString());
        if (prototype === this) {
          throw new TypeError("Illegal invocation at URLSearchParams.invokeGette\
r");
        }
        return Object.keys(dict).reduce(function(prev, cur) {
          return prev + dict[cur].length;
        }, 0);
      }
    });
    function encode(str) {
      var replace = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function(match) {
        return replace[match];
      });
    }
    function decode(str) {
      return str.replace(/[ +]/g, "%20").replace(/(%[a-f0-9]{2})+/ig, function(match) {
        return decodeURIComponent(match);
      });
    }
    function makeIterator(arr) {
      var iterator = {
        next: function() {
          var value = arr.shift();
          return { done: value === void 0, value };
        }
      };
      iterator[Symbol.iterator] = function() {
        return iterator;
      };
      return iterator;
    }
    function parseToDict(search) {
      var dict = {};
      if (typeof search === "object") {
        if (isArray(search)) {
          for (var i = 0; i < search.length; i++) {
            var item = search[i];
            if (isArray(item) && item.length === 2) {
              appendTo(dict, item[0], item[1]);
            } else {
              throw new TypeError("Failed to construct 'URLSearchParams': Sequen\
ce initializer must only contain pair elements");
            }
          }
        } else {
          for (var key in search) {
            if (search.hasOwnProperty(key)) {
              appendTo(dict, key, search[key]);
            }
          }
        }
      } else {
        if (search.indexOf("?") === 0) {
          search = search.slice(1);
        }
        var pairs = search.split("&");
        for (var j = 0; j < pairs.length; j++) {
          var value = pairs[j], index = value.indexOf("=");
          if (-1 < index) {
            appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index +
            1)));
          } else {
            if (value) {
              appendTo(dict, decode(value), "");
            }
          }
        }
      }
      return dict;
    }
    function appendTo(dict, name, value) {
      var val = typeof value === "string" ? value : value !== null && value !== void 0 &&
      typeof value.toString === "function" ? value.toString() : JSON.stringify(value);
      if (hasOwnProperty(dict, name)) {
        dict[name].push(val);
      } else {
        dict[name] = [val];
      }
    }
    function isArray(val) {
      return !!val && "[object Array]" === Object.prototype.toString.call(val);
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    self2.URLSearchParams = (_a3 = self2.URLSearchParams) != null ? _a3 : URLSearchParamsPolyfill2;
  }

  // src/util/TraceEventDef.ts
  var TraceEventDef = class {
  };
  TraceEventDef.EXECUTE_LOADED_SCRIPT = "executeLoadedScript";

  // src/app/app.ts
  var _BaseApp = class _BaseApp {
    constructor(options, baseAppSingleData) {
      this.dataTypeSet = /* @__PURE__ */ new Set([
        "string",
        "number",
        "array",
        "object",
        "boolean",
        "null",
        "function"
      ]);
      this.removeInternalEventListenersCallbacks = [];
      /**
       * Set sourcemap release with a newly thrown error
       * @param {Error} error
       * The error thrown from the file that wants to set sourcemap release.
       * The top frame of `error.stack` **must be** the filename.
       * The `error.name` **must be** `'LynxGetSourceMapReleaseError'`.
       * The `error.message` **must be** the sourcemap release.
       *
       * @example
       * (function () {
       *   try {
       *     throw new Error(sourcemapRelease);
       *   } catch (e) {
       *     e.name = 'LynxGetSourceMapReleaseError';
       *     tt.setSourceMapRelease(e);
       *   }
       * })()
       */
      this.setSourceMapRelease = (error) => {
        this.Reporter.setSourceMapRelease(error);
      };
      this.getSourceMapRelease = (url) => {
        return this.Reporter.getSourceMapRelease(url);
      };
      this.setupGetTextInfoApi = () => {
        this._apiList["getTextInfo"] = (text, options) => {
          return this._textInfoManager.getTextInfo(text, options);
        };
      };
      this.setupExposureApi = () => {
        this._apiList["resumeExposure"] = () => {
          this._exposureManager.resumeExposure();
        };
        this._apiList["stopExposure"] = (options) => {
          this._exposureManager.stopExposure(
            options ? options : { sendEvent: true }
          );
        };
        this._apiList["setObserverFrameRate"] = (options) => {
          this._exposureManager.setObserverFrameRate(
            options ? options : { forPageRect: 20, forExposureCheck: 20 }
          );
        };
      };
      this.requestAnimationFrame = (callback) => this._nativeApp.requestAnimationFrame(
      callback);
      this.cancelAnimationFrame = (animationId) => this._nativeApp.cancelAnimationFrame(
      animationId);
      this.__removeInternalEventListeners = () => {
        this.removeInternalEventListenersCallbacks.forEach((f) => {
          f();
        });
      };
      this.initBase(options);
      if (baseAppSingleData) {
        baseAppSingleData.transferSingletonData(
          this,
          this.__internal__callLynxSetModule.bind(this)
        );
      } else {
        this.initExtra(options);
      }
      this.setTimeout = this.nativeApp.setTimeout;
      this.setInterval = this.nativeApp.setInterval;
      this.clearInterval = this.nativeApp.clearInterval;
      this.clearTimeout = this.nativeApp.clearTimeout;
      this.addInternalEventListeners();
    }
    initExtra(options) {
      const { lynx } = options;
      this.modules = {};
      this._lazyCallableModules = /* @__PURE__ */ new Map();
      this._nativeApp = CachedFunctionProxy.create(
        this._nativeApp
      );
      this.sharedConsole = createSharedConsole("runtimeId:".concat(this.nativeAppId));
      this.dynamicComponentExports = {};
      this.loadedDynamicComponentsSet = /* @__PURE__ */ new Set();
      this._lazyCallableModules = /* @__PURE__ */ new Map();
      this.Reporter = new Reporter(
        () => this,
        () => this.nativeApp
      );
      this.GlobalEventEmitter = new event_default(
        this.__internal__callLynxSetModule.bind(this)
      );
      this._intersectionObserverManager = new IntersectionObserverManager(
        this.NativeModules
      );
      this._exposureManager = new ExposureManager(this.NativeModules);
      this.setupExposureApi();
      this._aopManager = new AopManager();
      this.beforePublishEvent = this._aopManager._beforePublishEvent;
      this.performance = new performance_default(this.GlobalEventEmitter, this.nativeApp);
      const promiseCtor = this.setupPromise(
        this.nativeApp.setTimeout,
        this.nativeApp.clearTimeout,
        lynx
      );
      this.lynx = this.createLynx(lynx, promiseCtor);
      this.setupJSModule();
      this.setupIntersectionApi();
      this.setupFetchAPI(promiseCtor);
    }
    initBase(options) {
      const { nativeApp, params: params2 } = options;
      this.nativeAppId = nativeApp.id;
      this._params = params2;
      this._nativeApp = nativeApp;
      this.NativeModules = nativeApp.nativeModuleProxy;
      this.LynxUIMethodModule = nativeApp.nativeModuleProxy.LynxUIMethodModule;
      this.LynxTestModule = nativeApp.nativeModuleProxy.LynxTestModule;
      this.LynxResourceModule = nativeApp.nativeModuleProxy.LynxResourceModule;
      this.LynxAccessibilityModule = nativeApp.nativeModuleProxy.LynxAccessibilityModule;
      this.LynxSetModule = nativeApp.nativeModuleProxy.LynxSetModule;
      this._apiList = {};
      this._textInfoManager = new TextInfoManager(this.NativeModules);
      this.setupGetTextInfoApi();
    }
    /**
     * legacy sourcemap release use url default
     * used for backward compatibility
     *
     * new template should use setSourceMapRelease
     */
    set __sourcemap__release__(release) {
      let error = new Error();
      error.name = "LynxGetSourceMapReleaseError";
      error.message = release;
      error.stack = "at <anonymous> (".concat(_BaseApp.kDefaultSourceMapURL, ":1\
:1)");
      this.setSourceMapRelease(error);
    }
    destroy() {
      this.__removeInternalEventListeners();
      this._nativeApp = null;
      this._params = null;
      this._lazyCallableModules = null;
      this.GlobalEventEmitter = null;
    }
    registerModule(name, module2) {
      this._lazyCallableModules[name] = module2;
    }
    getJSModule(name) {
      return this._lazyCallableModules[name];
    }
    setupJSModule() {
      this.registerModule("GlobalEventEmitter", this.GlobalEventEmitter);
      this.registerModule("Reporter", this.Reporter);
    }
    setupFetchAPI(Promise2) {
      var _a3, _b2, _c2;
      this._createResponseClass = createResponseClass;
      this._createRequestClass = createRequestClass;
      this._createReadableStreamClass = createReadableStreamClass;
      this._RequestClass = (_a3 = nativeGlobal_default2.Request) != null ? _a3 :
      createRequestClass(Promise2);
      this._ResponseClass = (_b2 = nativeGlobal_default2.Response) != null ? _b2 :
      createResponseClass(Promise2);
      this._ReadableStreamClass = (_c2 = nativeGlobal_default2.ReadableStream) !=
      null ? _c2 : createReadableStreamClass(Promise2);
      if (!nativeGlobal_default2.Request) {
        nativeGlobal_default2.Request = this._RequestClass;
      }
      if (!nativeGlobal_default2.Response) {
        nativeGlobal_default2.Response = this._ResponseClass;
      }
      if (!nativeGlobal_default2.ReadableStream) {
        nativeGlobal_default2.ReadableStream = this._ReadableStreamClass;
      }
    }
    __internal__callLynxSetModule(functionName, payload) {
      const nativeFunction = this.LynxSetModule[functionName];
      if (nativeFunction) {
        Function.prototype.apply.call(nativeFunction, void 0, payload);
      }
    }
    get nativeApp() {
      return this._nativeApp;
    }
    set nativeApp(nativeApp) {
      this._nativeApp = nativeApp;
    }
    get params() {
      return this._params;
    }
    set apiList(api) {
      this._apiList = __spreadValues(__spreadValues({}, this._apiList), api);
    }
    setupIntersectionApi() {
      let self2 = this;
      this._apiList["createIntersectionObserver"] = function(component, options) {
        const { componentId = "" } = component;
        return self2._intersectionObserverManager.createIntersectionObserver(
          componentId,
          options
        );
      };
      this.lynx["createIntersectionObserver"] = this._apiList["createIntersectio\
nObserver"];
    }
    onIntersectionObserverEvent(observerId, callbackId, data) {
      const observer = this._intersectionObserverManager.getObserver(observerId);
      if (observer) {
        observer.invokeCallback(callbackId, data);
      }
    }
    reportError(error) {
      return this.lynx.reportError(error);
    }
    handleError(error, originError, errorLevel) {
      reportError(error, this.nativeApp, {
        originError,
        getSourceMapRelease: this.getSourceMapRelease,
        errorLevel
      });
    }
    handleUserError(error, cause, errorLevel, prefix) {
      let { message, name, stack } = error || {};
      if (!message) {
        ({ message, name, stack } = new Error(JSON.stringify(error)));
      }
      const userError = new UserRuntimeError(
        prefix ? "".concat(prefix, " ").concat(name, ": ").concat(message) : "".
        concat(name, ": ").concat(message),
        stack
      );
      userError.cause = cause;
      this.handleError(userError, error, errorLevel);
    }
    /**
     * @internal
     */
    handleInternalError(error, cause) {
      let { message, name, stack } = error || {};
      if (!message) {
        ({ message, name, stack } = new Error(JSON.stringify(error)));
      }
      const internalError = new InternalRuntimeError(
        "".concat(name, ": ").concat(message),
        stack
      );
      internalError.cause = cause;
      this.handleError(internalError, error);
    }
    /**
     * Get a external env with boolean value.
     * The same as `base::LynxEnv::GetInstance().GetBoolEnv`
     *
     * @param {EnvKey} key The {@link EnvKey}, should be placed in `lynx_env.h`
     */
    getBoolEnv(key) {
      const env = this.nativeApp.getEnv(key);
      return (env == null ? void 0 : env.toLowerCase()) === "true";
    }
    /**
     * @internal
     * Execute the loaded JS module ,  Called by {@link requireModule} & {@link requireModuleAsync}
     * @throws {UserRuntimeError} when loading or evaluating failed
     * @throws {Error} when executing failed
     */
    _$executeInit(exports, { path: path2, entryName: entryName2 }) {
      let factory;
      if (exports && exports.init) {
        factory = exports.init.bind(exports);
      } else if (nativeGlobal_default2.initBundle) {
        factory = nativeGlobal_default2.initBundle.bind(nativeGlobal_default2.initBundle);
        delete nativeGlobal_default2.initBundle;
      } else {
        throw new UserRuntimeError(
          "load failed. path:".concat(path2, ",entryName:").concat(entryName2)
        );
      }
      try {
        this.lynx.performance.profileStart(TraceEventDef.EXECUTE_LOADED_SCRIPT, {
          args: { path: path2 }
        });
        const ret = factory({ tt: this });
        _BaseApp._$factoryCache[path2] = factory;
        return ret;
      } finally {
        this.lynx.performance.profileEnd();
      }
    }
    /**
     * @internal
     * Used to load the json module. Called by {@link requireModule} & {@link requireModuleAsync}
     * @param content
     * @param path
     * @private
     */
    _$executeJSON(content, { path: path2 }) {
      const ret = JSON.parse(content);
      const init = () => ret;
      _BaseApp._$factoryCache[path2] = init;
      return ret;
    }
    requireModule(path2, entryName2, options) {
      const init = _BaseApp._$factoryCache[path2];
      if (false) {
        return this._$executeInit({ init }, { path: path2, entryName: entryName2 });
      }
      if (path2.split("?")[0].endsWith(".json")) {
        const content = this.nativeApp.readScript(path2, __spreadValues({
          dynamicComponentEntry: entryName2 != null ? entryName2 : DEFAULT_ENTRY
        }, options));
        return this._$executeJSON(content, { path: path2, entryName: entryName2 });
      }
      const exports = this.nativeApp.loadScript(path2, entryName2, options);
      return this._$executeInit(exports, { path: path2, entryName: entryName2 });
    }
    requireModuleAsync(path2, callback) {
      const init = _BaseApp._$factoryCache[path2];
      if (false) {
        callback(null, this._$executeInit({ init }, { path: path2 }));
        return;
      }
      if (path2.split("?")[0].endsWith(".json")) {
        try {
          const content = this.nativeApp.readScript(path2);
          const ret = this._$executeJSON(content, { path: path2 });
          callback(null, ret);
        } catch (e) {
          callback(e);
        }
        return;
      }
      const error = new Error();
      this.nativeApp.loadScriptAsync(path2, (message, exports) => {
        if (message) {
          error.message = message;
          return callback(error);
        }
        try {
          return callback(null, this._$executeInit(exports, { path: path2 }));
        } catch (e) {
          return callback(e);
        }
      });
    }
    require(path, params) {
      const that = this;
      if (typeof path !== "string") {
        throw new Error("require args must be a string");
      }
      const entryName = params && params.dynamicComponentEntry ? params.dynamicComponentEntry :
      DEFAULT_ENTRY;
      if (!that.modules[entryName]) {
        that.modules[entryName] = {};
      }
      let module = that.modules[entryName][path];
      if (!module) {
        try {
          const tt = that;
          const jsContent = that._nativeApp.readScript(path, {
            dynamicComponentEntry: entryName
          });
          eval(jsContent);
          module = that.modules[entryName][path];
        } catch (e) {
          this.handleError(
            new UserRuntimeError(
              "eval user: ".concat(that._nativeApp.id, " error: ").concat(e.message),
              e.stack
            ),
            e
          );
        }
        if (!that.modules[entryName][path]) {
          throw new Error(
            "module ".concat(path, " in ").concat(entryName, " is not defined in\
 card: ").concat(that._nativeApp.id)
          );
        }
      }
      if (!module.hasRun) {
        const { factory } = module;
        const _module = {
          exports: {}
        };
        let res;
        module.hasRun = true;
        module.exports = _module.exports;
        if (typeof factory === "function") {
          const inRequireCopy = inRequire.call(that, path);
          const tt2 = that;
          res = factory(
            inRequireCopy,
            _module,
            _module.exports,
            that.Card.bind(tt2),
            that.setTimeout,
            that.setInterval,
            that.clearInterval,
            that.clearTimeout,
            that.NativeModules,
            that._apiList,
            that.sharedConsole,
            that.Component.bind(tt2),
            params == null ? void 0 : params.ReactLynx,
            that.nativeAppId,
            that.Behavior.bind(tt2),
            jsbi_default,
            that.lynx,
            void 0,
            // window
            void 0,
            // document
            void 0,
            // frames
            void 0,
            // self
            void 0,
            // location
            void 0,
            // navigator
            void 0,
            // localStorage
            void 0,
            // history
            void 0,
            // Caches
            void 0,
            // screen
            void 0,
            // alert
            void 0,
            // confirm
            void 0,
            // prompt
            that.lynx.fetch,
            // fetch
            void 0,
            // XMLHttpRequest
            void 0,
            // WebSocket
            void 0,
            // webkit
            void 0,
            // Reporter
            void 0,
            // print
            void 0,
            // global
            that.requestAnimationFrame,
            that.cancelAnimationFrame
          );
          module.exports = _module.exports || res;
        }
      }
      return module.exports;
    }
    define(path2, factory, entryName2) {
      entryName2 = entryName2 ? entryName2 : DEFAULT_ENTRY;
      if (!this.modules[entryName2]) {
        this.modules[entryName2] = {};
      }
      this.modules[entryName2][path2] = {
        hasRun: false,
        factory: factory.bind(this)
      };
    }
    /**
     * Call By Native js_app
     * @internal
     * @param module
     * @param method
     * @param args
     */
    callFunction(module2, method, args) {
      try {
        const moduleMethods = this.getJSModule(module2);
        if (typeof moduleMethods[method] === "function") {
          moduleMethods[method].apply(moduleMethods, args);
        }
      } catch (e) {
        this.handleUserError(e, { by: "".concat(module2, ".").concat(method) });
      }
    }
    /**
     * Call By Native js_app
     * @internal
     * @param {never} _ Used for backward compatiblity, DO NOT USE.
     * @param {Error} error the Error object emit by native.
     */
    onAppError(_, error) {
      this.handleInternalError(error);
    }
    saveDynamicComponentExports(componentUrl, moduleExports) {
      this.dynamicComponentExports[componentUrl] = moduleExports;
    }
    getDynamicComponentExports(componentUrl) {
      return this.dynamicComponentExports[componentUrl];
    }
    Component(...args) {
    }
    Card(...args) {
    }
    Behavior(...args) {
    }
    /**
     * @param setTimeout
     */
    wrapReport(setTimeout2, desc) {
      const that2 = this;
      function wrapReport(fn) {
        return function wrapReportInner(...args) {
          try {
            return fn.apply(this, args);
          } catch (e) {
            that2.handleUserError(e, { by: desc });
          }
        };
      }
      return function WrapTimeout(fn, ...args) {
        return Function.prototype.apply.call(setTimeout2, void 0, [
          wrapReport(fn),
          ...args
        ]);
      };
    }
    setupPromise(setTimeout2, clearTimeout, lynx) {
      var _a3, _b2, _c2;
      const PromiseConstructor = getPromiseMaybePolyfill(
        setTimeout2,
        (id, reason) => {
          try {
            if (reason) {
              if (!reason.stack) {
                reason = new Error(JSON.stringify(reason));
              }
              reason.name = "unhandled rejection";
              this.handleUserError(reason);
            }
          } catch (err) {
          }
        },
        clearTimeout,
        lynx.queueMicrotask,
        (_c2 = (_b2 = (_a3 = this._params) == null ? void 0 : _a3.pageConfigSubset) ==
        null ? void 0 : _b2.enableMicrotaskPromisePolyfill) != null ? _c2 : false
      );
      this.resolvedPromise = PromiseConstructor.resolve();
      return PromiseConstructor;
    }
    addInternalEventListener(contextProxyType, type, listener) {
      this.contextProxyTypeToMethod[contextProxyType]().addEventListener(
        type,
        listener
      );
      this.removeInternalEventListenersCallbacks.push(() => {
        this.contextProxyTypeToMethod[contextProxyType]().removeEventListener(
          type,
          listener
        );
      });
    }
    addInternalEventListeners() {
      if (!this.contextProxyTypeToMethod) {
        this.contextProxyTypeToMethod = {
          [0 /* CoreContext */]: () => this.lynx.getCoreContext(),
          [1 /* DevTool */]: () => this.lynx.getDevtool(),
          [2 /* JSContext */]: () => this.lynx.getJSContext(),
          [3 /* UIContext */]: () => this.lynx.getUIContext(),
          [4 /* Native */]: () => this.lynx.getNative(),
          [5 /* Engine */]: () => this.lynx.getEngine()
        };
      }
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnNativeAppReady" /* ON_NATIVE_APP_READY */,
        () => {
          this.onNativeAppReady();
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__NotifyGlobalPropsUpdated" /* NOTIFY_GLOBAL_PROPS_UPDATED */,
        (event) => {
          this.updateGlobalProps(event.data);
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnLifecycleEvent" /* ON_LIFECYCLE_EVENT */,
        (event) => {
          this.OnLifecycleEvent(event.data);
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnAppFirstScreen" /* ON_APP_FIRST_SCREEN */,
        () => {
          this.onAppFirstScreen();
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnDynamicJSSourcePrepared" /* ON_DYNAMIC_JS_SOURCE_PREPARED */,
        (event) => {
          nativeGlobal_default2.loadDynamicComponent(this, event.data);
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnAppEnterForeground" /* ON_APP_ENTER_FOREGROUND */,
        () => {
          this.onAppEnterForeground();
        }
      );
      this.addInternalEventListener(
        0 /* CoreContext */,
        "__OnAppEnterBackground" /* ON_APP_ENTER_BACKGROUND */,
        () => {
          this.onAppEnterBackground();
        }
      );
    }
    /**
     *  override by subclass
     * @param newData
     */
    updateGlobalProps(newData) {
    }
    /**
     *  override by subclass
     * @param newData
     */
    OnLifecycleEvent(args) {
    }
    /**
     *  override by subclass
     * @param newData
     */
    onNativeAppReady() {
    }
    /**
     *  override by subclass
     * @param newData
     */
    onAppFirstScreen() {
    }
    /**
     *  override by subclass
     * @param newData
     */
    onAppEnterBackground() {
    }
    /**
     *  override by subclass
     * @param newData
     */
    onAppEnterForeground() {
    }
  };
  _BaseApp.kDefaultSourceMapURL = "default";
  _BaseApp.kGetSourceMapReleaseErrorName = SOURCE_MAP_RELEASE_ERROR_NAME;
  /**
   * @internal
   * @static
   * The LynxGroup level cache for requireModule , {@link registerModule}
   */
  _BaseApp._$factoryCache = {};
  var BaseApp = _BaseApp;
  function pathProcess(path2) {
    const match = path2.match(/(.*)\/([^/]+)?$/);
    return (match == null ? void 0 : match[1]) ? match[1] : "./";
  }
  function inRequire(path2) {
    const that2 = this;
    const pwd = pathProcess(path2);
    return function(path3) {
      const t = [];
      const r = "".concat(pwd, "/").concat(path3).split("/");
      const i = r.length;
      if (typeof path3 !== "string") {
        throw new Error("require args must be a string");
      }
      for (let o = 0; o < i; ++o) {
        const a = r[o];
        if (a !== "" && a !== ".") {
          if (a === "..") {
            if (t.length === 0) {
              throw new Error(
                "can't find module ".concat(path3, " in app: ").concat(that2._nativeApp.
                id)
              );
            }
            t.pop();
          } else {
            o + 1 < i && r[o + 1] === ".." ? o++ : t.push(a);
          }
        }
      }
      let c = t.join("/");
      return c.endsWith(".js") || (c += ".js"), that2.require(c);
    };
  }

  // src/react/reactApp.ts
  var ReactApp = class extends BaseApp {
    createLynx(nativeLynx, promiseCtor) {
      const lynx_proxy = CachedFunctionProxy.create(nativeLynx);
      return new Lynx(
        () => this.nativeApp,
        () => this,
        promiseCtor,
        () => lynx_proxy
      );
    }
    callBeforePublishEvent(eventData) {
      if (this._aopManager._beforePublishEvent.getEventsSize(eventData.type) !==
      0) {
        const copyData = __spreadValues({}, eventData);
        try {
          this._aopManager._beforePublishEvent.emit(copyData.type, [copyData]);
        } catch (e) {
          this.handleUserError(e, {
            by: "callBeforePublishEvent",
            type: copyData.type
          });
        }
      }
    }
  };

  // src/standalone/StandaloneApp.ts
  var BaseAppSingletonData = class {
    transferSingletonData(baseApp, callLynxSetModule) {
      baseApp.nativeApp = this.nativeApp;
      baseApp.sharedConsole = this.sharedConsole;
      baseApp.dynamicComponentExports = this.dynamicComponentExports;
      baseApp.loadedDynamicComponentsSet = this.loadedDynamicComponentsSet;
      baseApp._intersectionObserverManager = this.intersectionObserverManager;
      baseApp._exposureManager = this.exposureManager;
      baseApp._textInfoManager = this.textInfoManager;
      this.globalEventEmitter.setCallLynxSetModule(callLynxSetModule);
      baseApp.GlobalEventEmitter = this.globalEventEmitter;
      baseApp._aopManager = this.aopManager;
      baseApp.performance = this.performance;
      baseApp.modules = this.modules;
      baseApp._lazyCallableModules = this.lazyCallableModules;
      baseApp.lynx = this.lynx;
      this.lynx.rebind(() => baseApp);
      baseApp._apiList = this.apiList;
      this.Reporter.rebind(() => baseApp);
      baseApp.Reporter = this.Reporter;
      baseApp.resolvedPromise = this.resolvedPromise;
    }
  };
  var StandaloneApp = class extends BaseApp {
    constructor(options, params2) {
      super(options, void 0);
      this.fillSingletonData();
      try {
        if (params2.srcName) {
          delete this.lynx.requireModule.cache[params2.srcName];
          delete BaseApp._$factoryCache[params2.srcName];
          this.lynx.requireModule(params2.srcName, DEFAULT_ENTRY);
          this.dataTypeSet.add("undefined");
        }
      } catch (e) {
        this.handleUserError(e);
      }
    }
    createLynx(nativeLynx, promise) {
      const lynx_proxy = CachedFunctionProxy.create(nativeLynx);
      return new Lynx(
        () => this.nativeApp,
        () => this,
        promise,
        () => lynx_proxy
      );
    }
    fillSingletonData() {
      this.singletonData = new BaseAppSingletonData();
      this.singletonData.nativeApp = this._nativeApp;
      this.singletonData.sharedConsole = this.sharedConsole;
      this.singletonData.dynamicComponentExports = this.dynamicComponentExports;
      this.singletonData.loadedDynamicComponentsSet = this.loadedDynamicComponentsSet;
      this.singletonData.intersectionObserverManager = this._intersectionObserverManager;
      this.singletonData.exposureManager = this._exposureManager;
      this.singletonData.textInfoManager = this._textInfoManager;
      this.singletonData.globalEventEmitter = this.GlobalEventEmitter;
      this.singletonData.aopManager = this._aopManager;
      this.singletonData.performance = this.performance;
      this.singletonData.modules = this.modules;
      this.singletonData.lazyCallableModules = this._lazyCallableModules;
      this.singletonData.lynx = this.lynx;
      this.singletonData.apiList = this._apiList;
      this.singletonData.Reporter = this.Reporter;
      this.singletonData.resolvedPromise = this.resolvedPromise;
    }
  };

  // src/appManager.ts
  function loadCard(nativeApp, params2, lynx) {
    const { id } = nativeApp;
    const { cardType } = params2;
    alog("load card native app id: ".concat(id));
    let loadSuccess = true;
    let tt2;
    try {
      if (cardType == "standalone") {
        tt2 = new StandaloneApp({ nativeApp, params: params2, lynx }, params2);
      } else {
        tt2 = new ReactApp({
          nativeApp,
          params: params2,
          lynx
        });
      }
      nativeGlobal_default2.currentAppId = id;
      nativeGlobal_default2.multiApps[id] = tt2;
      if (cardType === "standalone") {
        nativeApp.setCard(tt2);
        return true;
      }
      alog(
        "load card native app load app-service.js params.bundleSupportLoadScript\
 ".concat(params2.bundleSupportLoadScript)
      );
      loadSuccess = true;
      try {
        delete tt2.lynx.requireModule.cache[APP_SERVICE_NAME];
        delete BaseApp._$factoryCache[APP_SERVICE_NAME];
        tt2.lynx.requireModule(APP_SERVICE_NAME, DEFAULT_ENTRY);
        if (tt2.lynx._switches["allowUndefinedInNativeDataTypeSet"]) {
          tt2.dataTypeSet.add("undefined");
        }
      } catch (e) {
        loadSuccess = false;
        tt2.handleUserError(e, void 0, void 0, "loadCard failed");
      }
      nativeApp.setCard(tt2);
    } catch (e) {
      handleLoadCardError(nativeApp, e);
      loadSuccess = false;
    }
    return loadSuccess;
  }
  function destroyCard(id) {
    alog("destroy ".concat(id));
    const appInstance = nativeGlobal_default2.multiApps[id];
    appInstance.destroy();
    delete nativeGlobal_default2.multiApps[id];
  }
  function callDestroyLifetimeFun(id) {
    alog("callDestroyLifetimeFun ".concat(id));
    const appInstance = nativeGlobal_default2.multiApps[id];
    appInstance.callDestroyLifetimeFun();
  }
  function loadDynamicComponent(tt2, componentUrl) {
    if (tt2.loadedDynamicComponentsSet.has(componentUrl)) {
      return tt2.getDynamicComponentExports(componentUrl);
    }
    const preEntry = nativeGlobal_default2.globDynamicComponentEntry;
    nativeGlobal_default2.globDynamicComponentEntry = componentUrl;
    try {
      delete tt2.lynx.requireModule.cache[APP_SERVICE_NAME];
      delete BaseApp._$factoryCache[APP_SERVICE_NAME];
      const ret = tt2.lynx.requireModule(APP_SERVICE_NAME, componentUrl);
      tt2.saveDynamicComponentExports(componentUrl, ret);
      tt2.loadedDynamicComponentsSet.add(componentUrl);
      return ret;
    } catch (error) {
      tt2.handleUserError(error);
    } finally {
      nativeGlobal_default2.globDynamicComponentEntry = preEntry;
    }
  }
  function handleLoadCardError(nativeApp, error, cause) {
    let { message, name, stack } = error || {};
    if (!message) {
      ({ message, name, stack } = new Error(JSON.stringify(error)));
    }
    const internalError = new InternalRuntimeError(
      "loadCard failed ".concat(name, ": ").concat(message),
      stack
    );
    internalError.cause = cause;
    reportError(internalError, nativeApp, {
      originError: error,
      getSourceMapRelease: (url) => {
        let ret = nativeApp.__GetSourceMapRelease(url);
        if (!ret) {
          return nativeApp.__GetSourceMapRelease(BaseApp.kDefaultSourceMapURL);
        }
      }
    });
  }

  // src/polyfill/arraybuffer.ts
  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var lookup = new Uint8Array(256);
  for (let i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }
  function arrayBufferToBase64(buffer) {
    var bytes = new Uint8Array(buffer);
    var i;
    var len = bytes.length;
    var base64 = "";
    for (i = 0; i < len; i += 3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += chars[bytes[i + 2] & 63];
    }
    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }
    return base64;
  }
  function base64ToArrayBuffer(base64) {
    let bufferLength = base64.length * 0.75;
    const len = base64.length;
    let i;
    let p = 0;
    let encoded1;
    let encoded2;
    let encoded3;
    let encoded4;
    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }
    let arraybuffer = new ArrayBuffer(bufferLength);
    let bytes = new Uint8Array(arraybuffer);
    for (i = 0; i < len; i += 4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i + 1)];
      encoded3 = lookup[base64.charCodeAt(i + 2)];
      encoded4 = lookup[base64.charCodeAt(i + 3)];
      bytes[p++] = encoded1 << 2 | encoded2 >> 4;
      bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
      bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return arraybuffer;
  }

  // src/index.card.ts
  nativeGlobal_default2.loadCard = loadCard;
  nativeGlobal_default2.destroyCard = destroyCard;
  nativeGlobal_default2.callDestroyLifetimeFun = callDestroyLifetimeFun;
  nativeGlobal_default2.loadDynamicComponent = loadDynamicComponent;
  nativeGlobal_default2.__createEventEmitter = createEventEmitter;
  nativeGlobal_default2.__lynxArrayBufferToBase64 = arrayBufferToBase64;
  nativeGlobal_default2.__lynxBase64ToArrayBuffer = base64ToArrayBuffer;
  nativeGlobal_default2.LynxSDKCore = {
    report: legacyReportError,
    reportInner: wrapInnerFunction,
    reportUser: wrapUserFunction
  };
  nativeGlobal_default2.Headers = Headers2;
  nativeGlobal_default2.AbortController = AbortController;
  nativeGlobal_default2.AbortSignal = AbortSignal;
  nativeGlobal_default2.URL = URL;
  URLSearchParamsPolyfill(nativeGlobal_default2);
})();
//# sourceMappingURL=data:application/json;base64,
